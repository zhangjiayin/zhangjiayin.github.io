<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

	<!-- generator="WordPress/5.4.8" created="2021-12-24 13:47" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>佳音的博客</title>
	<link>http://blog.00rz.com</link>
	<description>方乃做人之本，圆乃处世之道</description>
	<pubDate>Fri, 24 Dec 2021 13:47:14 +0000</pubDate>
	<language>zh-CN</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://blog.00rz.com</wp:base_site_url>
	<wp:base_blog_url>http://blog.00rz.com</wp:base_blog_url>

		

		<wp:category>
		<wp:term_id>11</wp:term_id>
		<wp:category_nicename><![CDATA[c%e8%af%ad%e8%a8%80%e5%ad%a6%e4%b9%a0]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[c语言学习]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>16</wp:term_id>
		<wp:category_nicename><![CDATA[hadoop]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[hadoop]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>12</wp:term_id>
		<wp:category_nicename><![CDATA[javascript]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[javascript]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>8</wp:term_id>
		<wp:category_nicename><![CDATA[opencv]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[opencv]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>6</wp:term_id>
		<wp:category_nicename><![CDATA[php]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[php]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>14</wp:term_id>
		<wp:category_nicename><![CDATA[python]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[python]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>7</wp:term_id>
		<wp:category_nicename><![CDATA[ubuntu]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[ubuntu]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>1</wp:term_id>
		<wp:category_nicename><![CDATA[uncategorized]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>13</wp:term_id>
		<wp:category_nicename><![CDATA[%e5%bc%80%e5%8f%91]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[开发]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>15</wp:term_id>
		<wp:category_nicename><![CDATA[%e7%94%b5%e5%ad%90%e4%b9%a6]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[电子书]]></wp:cat_name>
	</wp:category>
			<wp:tag>
		<wp:term_id>10</wp:term_id>
		<wp:tag_slug><![CDATA[asdfasdf]]></wp:tag_slug>
		<wp:tag_name><![CDATA[asdfasdf]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>5</wp:term_id>
		<wp:tag_slug><![CDATA[hadoop]]></wp:tag_slug>
		<wp:tag_name><![CDATA[hadoop]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>17</wp:term_id>
		<wp:tag_slug><![CDATA[javascript]]></wp:tag_slug>
		<wp:tag_name><![CDATA[javascript]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>18</wp:term_id>
		<wp:tag_slug><![CDATA[php]]></wp:tag_slug>
		<wp:tag_name><![CDATA[php]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>4</wp:term_id>
		<wp:tag_slug><![CDATA[twtteen]]></wp:tag_slug>
		<wp:tag_name><![CDATA[twtteen]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>3</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%bf%86%e5%be%80%e6%98%94]]></wp:tag_slug>
		<wp:tag_name><![CDATA[忆往昔]]></wp:tag_name>
	</wp:tag>
			<wp:term>
		<wp:term_id><![CDATA[10]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[asdfasdf]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[asdfasdf]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[2]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[link_category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[blogroll]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Blogroll]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[11]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[c%e8%af%ad%e8%a8%80%e5%ad%a6%e4%b9%a0]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[c语言学习]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[5]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[hadoop]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[hadoop]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[16]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[hadoop]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[hadoop]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[12]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[javascript]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[javascript]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[17]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[javascript]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[javascript]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[8]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[opencv]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[opencv]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[6]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[php]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[php]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[18]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[php]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[php]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[14]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[python]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[python]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[4]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[twtteen]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[twtteen]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[7]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[ubuntu]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[ubuntu]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[1]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[uncategorized]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Uncategorized]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[9]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[link_category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%8f%8b%e6%83%85%e9%93%be%e6%8e%a5]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[友情链接]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[13]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%bc%80%e5%8f%91]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[开发]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[3]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%bf%86%e5%be%80%e6%98%94]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[忆往昔]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[15]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e7%94%b5%e5%ad%90%e4%b9%a6]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[电子书]]></wp:term_name>
	</wp:term>
		
	<generator>https://wordpress.org/?v=5.4.8</generator>

		<item>
		<title>IMG_0782</title>
		<link>http://blog.00rz.com/2010/01/%e5%92%8c%e6%af%9b%e7%88%b7%e7%88%b7%e7%9a%84%e5%90%88%e5%bd%b1.html/img_0782</link>
		<pubDate>Sat, 16 Jan 2010 03:07:38 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/wp-content/uploads/2010/01/IMG_0782.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>121</wp:post_id>
		<wp:post_date><![CDATA[2010-01-16 03:07:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-01-16 03:07:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[img_0782]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>122</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://blog.00rz.com/wp-content/uploads/2010/01/IMG_0782.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2010/01/IMG_0782.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"800";s:6:"height";s:3:"600";s:14:"hwstring_small";s:23:"height='96' width='128'";s:4:"file";s:20:"2010/01/IMG_0782.gif";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
		<wp:meta_value><![CDATA[和毛爷爷的合影]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>xiaonei</title>
		<link>http://blog.00rz.com/xiaonei</link>
		<pubDate>Sat, 16 Jan 2010 14:26:05 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.00rz.com/blog/wp-content/uploads/2010/01/xiaonei.zip</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>140</wp:post_id>
		<wp:post_date><![CDATA[2010-01-16 14:26:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-01-16 14:26:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xiaonei]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://blog.00rz.com/wp-content/uploads/2010/01/xiaonei.zip]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2010/01/xiaonei.zip]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_temp_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[-1263651934]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>L123699482518HUA</title>
		<link>http://blog.00rz.com/l123699482518hua</link>
		<pubDate>Sun, 17 Jan 2010 07:11:46 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/wp-content/uploads/2010/01/L123699482518HUA.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>141</wp:post_id>
		<wp:post_date><![CDATA[2010-01-17 07:11:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-01-17 07:11:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[l123699482518hua]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://blog.00rz.com/wp-content/uploads/2010/01/L123699482518HUA.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2010/01/L123699482518HUA.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_temp_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[-1263712295]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"270";s:6:"height";s:3:"258";s:14:"hwstring_small";s:23:"height='96' width='100'";s:4:"file";s:28:"2010/01/L123699482518HUA.gif";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>p_head_jbRW_27f50002efd82d0e</title>
		<link>http://blog.00rz.com/p_head_jbrw_27f50002efd82d0e</link>
		<pubDate>Sun, 17 Jan 2010 07:15:01 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/wp-content/uploads/2010/01/p_head_jbRW_27f50002efd82d0e.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>142</wp:post_id>
		<wp:post_date><![CDATA[2010-01-17 07:15:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-01-17 07:15:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[p_head_jbrw_27f50002efd82d0e]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://blog.00rz.com/wp-content/uploads/2010/01/p_head_jbRW_27f50002efd82d0e.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2010/01/p_head_jbRW_27f50002efd82d0e.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_temp_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[-1263712383]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"100";s:6:"height";s:3:"133";s:14:"hwstring_small";s:22:"height='96' width='72'";s:4:"file";s:40:"2010/01/p_head_jbRW_27f50002efd82d0e.jpg";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>ZendOptimizer.tar</title>
		<link>http://blog.00rz.com/zendoptimizer-tar</link>
		<pubDate>Sun, 17 Jan 2010 13:34:45 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/wp-content/uploads/2010/01/ZendOptimizer.tar.gz</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>143</wp:post_id>
		<wp:post_date><![CDATA[2010-01-17 13:34:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-01-17 13:34:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[zendoptimizer-tar]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://blog.00rz.com/wp-content/uploads/2010/01/ZendOptimizer.tar.gz]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2010/01/ZendOptimizer.tar.gz]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_temp_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[-1263735122]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>hao123ol</title>
		<link>http://blog.00rz.com/hao123ol</link>
		<pubDate>Sat, 23 Jan 2010 03:19:19 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/wp-content/uploads/2010/01/hao123ol.zip</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>149</wp:post_id>
		<wp:post_date><![CDATA[2010-01-23 11:19:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-01-23 03:19:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hao123ol]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://blog.00rz.com/wp-content/uploads/2010/01/hao123ol.zip]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2010/01/hao123ol.zip]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_temp_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[-1264216698]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>hao123ol</title>
		<link>http://blog.00rz.com/hao123ol-2</link>
		<pubDate>Sat, 23 Jan 2010 03:23:51 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/wp-content/uploads/2010/01/hao123ol.zip</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>150</wp:post_id>
		<wp:post_date><![CDATA[2010-01-23 11:23:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-01-23 03:23:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hao123ol-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://blog.00rz.com/wp-content/uploads/2010/01/hao123ol.zip]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2010/01/hao123ol.zip]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_temp_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[-1264216698]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Logo_42d67299-1aa4-4d92-9b99-f313e7725632</title>
		<link>http://blog.00rz.com/logo_42d67299-1aa4-4d92-9b99-f313e7725632</link>
		<pubDate>Sat, 23 Jan 2010 04:37:20 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/wp-content/uploads/2010/01/Logo_42d67299-1aa4-4d92-9b99-f313e7725632.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>151</wp:post_id>
		<wp:post_date><![CDATA[2010-01-23 12:37:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-01-23 04:37:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[logo_42d67299-1aa4-4d92-9b99-f313e7725632]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://blog.00rz.com/wp-content/uploads/2010/01/Logo_42d67299-1aa4-4d92-9b99-f313e7725632.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2010/01/Logo_42d67299-1aa4-4d92-9b99-f313e7725632.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_temp_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[-1264216698]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"177";s:6:"height";s:2:"55";s:14:"hwstring_small";s:23:"height='39' width='128'";s:4:"file";s:53:"2010/01/Logo_42d67299-1aa4-4d92-9b99-f313e7725632.gif";s:5:"sizes";a:1:{s:9:"thumbnail";a:3:{s:4:"file";s:52:"Logo_42d67299-1aa4-4d92-9b99-f313e7725632-150x55.gif";s:5:"width";s:3:"150";s:6:"height";s:2:"55";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>OReilly.Hadoop.The.Definitive.Guide.June.2009.RETAiL.eBOOk-sUppLeX</title>
		<link>http://blog.00rz.com/2010/02/oreilly-hadoop-the-definitive-guide-june-2009-retail-ebook-supplex-pdf.html/oreilly-hadoop-the-definitive-guide-june-2009-retail-ebook-supplex</link>
		<pubDate>Thu, 25 Feb 2010 05:29:18 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/wp-content/uploads/2010/02/OReilly.Hadoop.The_.Definitive.Guide_.June_.2009.RETAiL.eBOOk-sUppLeX.pdf</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>157</wp:post_id>
		<wp:post_date><![CDATA[2010-02-25 13:29:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-02-25 05:29:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[oreilly-hadoop-the-definitive-guide-june-2009-retail-ebook-supplex]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>156</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://blog.00rz.com/wp-content/uploads/2010/02/OReilly.Hadoop.The_.Definitive.Guide_.June_.2009.RETAiL.eBOOk-sUppLeX.pdf]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2010/02/OReilly.Hadoop.The_.Definitive.Guide_.June_.2009.RETAiL.eBOOk-sUppLeX.pdf]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Pro+Hadoop</title>
		<link>http://blog.00rz.com/2010/02/ebook-pro-hadoop.html/prohadoop</link>
		<pubDate>Thu, 25 Feb 2010 05:36:13 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/wp-content/uploads/2010/02/Pro+Hadoop.pdf</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>160</wp:post_id>
		<wp:post_date><![CDATA[2010-02-25 13:36:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-02-25 05:36:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[prohadoop]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>159</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://blog.00rz.com/wp-content/uploads/2010/02/Pro+Hadoop.pdf]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2010/02/Pro+Hadoop.pdf]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Pragmatic[1].Bookshelf.Practices.of.an.Agile.Developer.Working.in.the.Real.World.Mar.2006</title>
		<link>http://blog.00rz.com/2010/04/pragmatic-bookshelf-practices-of-an-agile-developer-working-in-the-real-world-%e9%ab%98%e6%95%88%e7%a8%8b%e5%ba%8f%e5%91%98%e7%9a%8445%e4%b8%aa%e4%b9%a0%e6%83%af.html/pragmatic1-bookshelf-practices-of-an-agile-developer-working-in-the-real-world-mar-2006</link>
		<pubDate>Mon, 19 Apr 2010 01:05:43 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/wp-content/uploads/2010/04/Pragmatic1.Bookshelf.Practices.of_.an_.Agile_.Developer.Working.in_.the_.Real_.World_.Mar_.2006.pdf</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>214</wp:post_id>
		<wp:post_date><![CDATA[2010-04-19 09:05:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-04-19 01:05:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[pragmatic1-bookshelf-practices-of-an-agile-developer-working-in-the-real-world-mar-2006]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>213</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://blog.00rz.com/wp-content/uploads/2010/04/Pragmatic1.Bookshelf.Practices.of_.an_.Agile_.Developer.Working.in_.the_.Real_.World_.Mar_.2006.pdf]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2010/04/Pragmatic1.Bookshelf.Practices.of_.an_.Agile_.Developer.Working.in_.the_.Real_.World_.Mar_.2006.pdf]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[7578623172]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Apress.the.Definitive.Guide.to.Pylons.Dec.2008</title>
		<link>http://blog.00rz.com/2010/05/the-definitive-guide-to-pylons-dec-2008-pdf.html/apress-the-definitive-guide-to-pylons-dec-2008</link>
		<pubDate>Tue, 11 May 2010 16:34:38 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/wp-content/uploads/2010/05/Apress.the_.Definitive.Guide_.to_.Pylons.Dec.2008.pdf</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>228</wp:post_id>
		<wp:post_date><![CDATA[2010-05-12 00:34:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-05-11 16:34:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[apress-the-definitive-guide-to-pylons-dec-2008]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>227</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://blog.00rz.com/wp-content/uploads/2010/05/Apress.the_.Definitive.Guide_.to_.Pylons.Dec.2008.pdf]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2010/05/Apress.the_.Definitive.Guide_.to_.Pylons.Dec.2008.pdf]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>vimrc_vimrc</title>
		<link>http://blog.00rz.com/vimrc_vimrc</link>
		<pubDate>Sat, 22 May 2010 01:16:53 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/wp-content/uploads/2010/05/vimrc_vimrc.zip</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>240</wp:post_id>
		<wp:post_date><![CDATA[2010-05-22 09:16:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-05-22 01:16:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[vimrc_vimrc]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://blog.00rz.com/wp-content/uploads/2010/05/vimrc_vimrc.zip]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2010/05/vimrc_vimrc.zip]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_temp_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[-1274490978]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>O&#039;Reilly.High.Performance.MySQL,2nd.Edition</title>
		<link>http://blog.00rz.com/?attachment_id=242</link>
		<pubDate>Thu, 03 Jun 2010 08:28:07 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/wp-content/uploads/2010/06/OReilly.High.Performance.MySQL2nd.Edition.pdf</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>242</wp:post_id>
		<wp:post_date><![CDATA[2010-06-03 16:28:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-06-03 08:28:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[oreilly-high-performance-mysql2nd-edition]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>241</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://blog.00rz.com/wp-content/uploads/2010/06/OReilly.High.Performance.MySQL2nd.Edition.pdf]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2010/06/OReilly.High.Performance.MySQL2nd.Edition.pdf]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>O&#039;Reilly.High.Performance.MySQL,2nd.Edition</title>
		<link>http://blog.00rz.com/2010/06/244.html/oreilly-high-performance-mysql2nd-edition-2</link>
		<pubDate>Thu, 03 Jun 2010 08:44:13 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/wp-content/uploads/2010/06/OReilly.High.Performance.MySQL2nd.Edition1.pdf</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>243</wp:post_id>
		<wp:post_date><![CDATA[2010-06-03 16:44:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-06-03 08:44:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[oreilly-high-performance-mysql2nd-edition-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>244</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://blog.00rz.com/wp-content/uploads/2010/06/OReilly.High.Performance.MySQL2nd.Edition1.pdf]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2010/06/OReilly.High.Performance.MySQL2nd.Edition1.pdf]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>1-100506220127</title>
		<link>http://blog.00rz.com/1-100506220127</link>
		<pubDate>Sun, 20 Jun 2010 14:49:36 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/wp-content/uploads/2010/06/1-100506220127.zip</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>247</wp:post_id>
		<wp:post_date><![CDATA[2010-06-20 22:49:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-06-20 14:49:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[1-100506220127]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://blog.00rz.com/wp-content/uploads/2010/06/1-100506220127.zip]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2010/06/1-100506220127.zip]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>程评估反馈表格</title>
		<link>http://blog.00rz.com/%e7%a8%8b%e8%af%84%e4%bc%b0%e5%8f%8d%e9%a6%88%e8%a1%a8%e6%a0%bc</link>
		<pubDate>Sun, 18 Jul 2010 12:11:23 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/wp-content/uploads/2010/07/程评估反馈表格.xlsx</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>249</wp:post_id>
		<wp:post_date><![CDATA[2010-07-18 20:11:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-07-18 12:11:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%a8%8b%e8%af%84%e4%bc%b0%e5%8f%8d%e9%a6%88%e8%a1%a8%e6%a0%bc]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://blog.00rz.com/wp-content/uploads/2010/07/程评估反馈表格.xlsx]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2010/07/程评估反馈表格.xlsx]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_temp_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[-1279455018]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>1</title>
		<link>http://blog.00rz.com/1</link>
		<pubDate>Sun, 22 Aug 2010 14:54:02 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/wp-content/uploads/2010/08/1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>252</wp:post_id>
		<wp:post_date><![CDATA[2010-08-22 22:54:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-08-22 14:54:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://blog.00rz.com/wp-content/uploads/2010/08/1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_temp_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[-1282488818]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2010/08/1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:1:"1";s:6:"height";s:1:"1";s:14:"hwstring_small";s:20:"height='1' width='1'";s:4:"file";s:13:"2010/08/1.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>1</title>
		<link>http://blog.00rz.com/1-2</link>
		<pubDate>Sun, 22 Aug 2010 15:14:25 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/wp-content/uploads/2010/08/1.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>253</wp:post_id>
		<wp:post_date><![CDATA[2010-08-22 23:14:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-08-22 15:14:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[1-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://blog.00rz.com/wp-content/uploads/2010/08/1.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2010/08/1.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_temp_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[-1282488818]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:1:"1";s:6:"height";s:1:"1";s:14:"hwstring_small";s:20:"height='1' width='1'";s:4:"file";s:13:"2010/08/1.gif";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>10.1.1.116.9808</title>
		<link>http://blog.00rz.com/2011/02/the-time-wait-state-in-tcp-and-its-effect-on-busy-servers.html/10-1-1-116-9808</link>
		<pubDate>Tue, 15 Feb 2011 10:19:40 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/wp-content/uploads/2011/02/10.1.1.116.9808.pdf</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>312</wp:post_id>
		<wp:post_date><![CDATA[2011-02-15 18:19:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-02-15 10:19:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[10-1-1-116-9808]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>311</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://blog.00rz.com/wp-content/uploads/2011/02/10.1.1.116.9808.pdf]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2011/02/10.1.1.116.9808.pdf]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>关于我</title>
		<link>http://blog.00rz.com/about</link>
		<pubDate>Sat, 16 Jan 2010 00:32:03 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?page_id=2</guid>
		<description></description>
		<content:encoded><![CDATA[名： 佳音，

民族：汗

籍贯： 吉林

生于1986.01.01 ，

现就职于北京 某互联网公司。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2</wp:post_id>
		<wp:post_date><![CDATA[2010-01-16 00:32:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-01-16 00:32:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[about]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543640920]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>RSS 1.0 规范 Core Syntax(核心语法)</title>
		<link>http://blog.00rz.com/2007/04/rss-1-0-%e8%a7%84%e8%8c%83-core-syntax%e6%a0%b8%e5%bf%83%e8%af%ad%e6%b3%95.html</link>
		<pubDate>Tue, 17 Apr 2007 18:56:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=107</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p> <br />
RSS 1.0 规范 Core Syntax(核心语法) <br />
 <br />
5. Core Syntax [核心语法]<br />
RSS 1.0 的核心是建立在 RSS 0.9 之上的. RSS 1.0 的焦点在于通过 XML 命名空间和 RDF 得到易扩展</p>
<p>性的同时保持向下兼容.<br />
向下兼容 RSS 0.9 <br />
基本的 RSS 解析器,模块,库对那些设计上未能理解以下内容的不予考虑,在这个前提和约定下,向下兼容</p>
<p>是毫无疑问的: <br />
属性(attribute); RSS 0.9 没有不在 RDF 命名空间声明之内的属性.</p>
<p>模块化的扩展部分的元素成员存在于默认命名空间之外.</p>
<p>特殊元素不妨碍 RSS 0.9 文档的全部结构.<br />
</p>
<p>通过基于 XML 命名空间的模块化的易扩展性<br />
RSS 1.0 通过基于 XML 命名空间的模块得以扩展. 由于鼓励特别的扩展性,自然希望能有一组被一致认同</p>
<p>的涵盖分类学,聚合,都柏林核心(Dublin Core)等功能性的核心模块. 请见下文的模块章节, 以及核心 </p>
<p>RSS 1.0 模块 的记录簿.</p>
<p>channel, image, item, 和 textinput 元素对其子元素的一个限制是不允许包含重复的子元素( 如 </p>
<p><item><dc:subject /><dc:subject /></item> ). 这个措施仅对紧邻级别的子元素有强制作用. 对于那</p>
<p>些更深一级的(丰富内容或重复元素)也已经定义明确的使用 RDF 语法.</p>
<p> </p>
<p>RDF<br />
RSS 1.0 建立在出现于 RSS 0.9 (但被 RSS 0.91 抛弃)的新生的 RDF 架构上,仅最小限度的增添以下内</p>
<p>容: </p>
<p>每一个第二级别元素 (channel, image, item, and textinput) 必须包含一个 rdf:about 属性.</p>
<p>一个频道级别(channel-level)的 RDF 内容表(table of contents)将 image, items 和 textinput 与近</p>
<p>处的 channel 联系到一块.<br />
为了尽可能实时保持 RSS 1.0 的 RDF 及 简朴 XML 的外观, RSS 1.0 只支持使用 核心元素中 指定类型</p>
<p>元素的 RDF 语法.</p>
<p>Mime Type<br />
</p>
<p>Mime类型(Mime Type)<br />
现在 RSS 1.0 文档的 mime-type 介绍是 application/xml. 不过给 RDF (甚至可能 RSS) 注册 mime-</p>
<p>type 的工作正在进行,一旦注册下来便可使用.</p>
<p> </p>
<p>文件扩展名<br />
RSS 1.0 文档并没有明确指定文件扩展名,推荐使用 .rdf 或 .xml 中的一个,前者为首选. </p>
<p>编码<br />
RSS 0.9 只支持 ASCII 码, 而 RSS 1.0 采用 UTF-8. 使用 US-ASCII (也就是把所有127以上的字符以 </p>
<p>&#nnn 的形式编码) 是和 UTF-8 (以及 ISO-8859-1, HTTP 的默认文件头编码)相符合一致的. </p>
<p> </p>
<p>URL<br />
为确保向下兼容 RSS 0.9,只有以下模式可以包含在 url 和 link 元素中: http:, https:, ftp:. </p>
<p>mailto: 仅允许存在于 textinput 的 link 元素中. </p>
<p>实体:<br />
XML 保留了某些字符作为置标符(markup). RSS 文档中要用到这些字符,必须用它们的实体引用(entity </p>
<p>reference)替换: </p>
<p>< 换成 &lt; <br />
> 换成 &gt; <br />
& 换成 &amp;<br />
下面两个实体引用也是为遵从 XML 的解析器公认有效的. 但在实用中,它们是可选的. 但是当一个句子中</p>
<p>有引号符且被括含在同样的符号之内使,就需要用实体引用, 如:""你好,"她说"就应该编写为""你好," 她</p>
<p>说". <br />
' 换成 &apos; <br />
" 换成 &quot;<br />
注意: 由于 RSS 1.0 不要求 DTD 文件, 请确保在使用上述5个外的实体引用时包含内联声明(inline </p>
<p>declarations). 下列 DTD 片断是很有用的兼容 HTML 的实体的资料: </p>
<p><a href="http://www.w3.org/TR/xhtml1/DTD/xhtml-special.ent">http://www.w3.org/TR/xhtml1/DTD/xhtml-special.ent</a> <br />
<a href="http://www.w3.org/TR/xhtml1/DTD/xhtml-symbol.ent">http://www.w3.org/TR/xhtml1/DTD/xhtml-symbol.ent</a> <br />
<a href="http://www.w3.org/TR/xhtml1/DTD/xhtml-lat1.ent">http://www.w3.org/TR/xhtml1/DTD/xhtml-lat1.ent</a><br />
Usage example [使用示例]: </p>
<p><?xml version="1.0"?></p>
<p><!DOCTYPE rdf:RDF [<br />
<!ENTITY % HTMLlat1 PUBLIC<br />
 "-//W3C//ENTITIES Latin 1 for XHTML//EN"<br />
 "<a href="http://www.w3.org/TR/xhtml1/DTD/xhtml-lat1.ent">http://www.w3.org/TR/xhtml1/DTD/xhtml-lat1.ent</a>"><br />
%HTMLlat1;<br />
]></p>
<p><rdf:RDF<br />
 xmlns:rdf="<a href="http://www.w3.org/1999/02/22-rdf-syntax-ns">http://www.w3.org/1999/02/22-rdf-syntax-ns</a>#"<br />
 xmlns="<a href="http://purl.org/rss/1.0/">http://purl.org/rss/1.0/</a>"<br />
></p>
<p>...<br />
>内容长度:<br />
RSS 1.0 对元素(如 title, link, description)的应用定下了合理的内容长度, 为严格坚持向下兼容提</p>
<p>出的好实例也纷纷诟病 RSS 0.9 的最大字符长度. </p>
<p>符号:<br />
下面的核心元素详述中，使用了下列符号: </p>
<p>{something} 仅仅是 URI, 值 等等的代指. <br />
典型描述(model description)中使用了一个类似 DTD 的语法,这只是为了介绍的目的,并不暗示其次序.</p>
<p>元素的次序并不重要. <br />
典型描述中, ? 表示元素或属性可选. <br />
典型描述中, + 表示此处允许使用"一个或更多"的元素或属性. <br />
典型描述中, + 表示此处允许使用"零个或更多"的元素或属性.<br />
5.1 <?xml version="1.0"?><br />
As an XML application, an RSS document is not required to begin with an XML declaration. As </p>
<p>a best practice suggestion and to further ensure backward compatibility with RSS 0.9 (the </p>
<p>specification for 0.9 required it), this specification recommends doing so. </p>
<p>Syntax: <?xml version="1.0"?><br />
Requirement: Optional (unless specifying encoding)</p>
<p><br />
作为 XML 应用, 一个 RSS 文档并不强求以一个 XML 声明开头. 但作为一个最实际的建议以及为了更进</p>
<p>一步保证对 RSS 0.9 的向下兼容( 0.9 的规范要求有 XML 声明),本规范建议加上这一声明.</p>
<p>语法: <?xml version="1.0"?><br />
要求: 可选 (除非编码特别指定) </p>
<p>5.2 <rdf:RDF><br />
每个服从 RSS 1.0 的文档里最外面的就是 RDF 元素. 开口型的 RDF 标签将 rdf: 命名空间前缀与 RDF </p>
<p>语法模式(schema)联系 (注:assocaties疑为associates之误)在一起并将 RSS 1.0 模式设为该文档的默</p>
<p>认命名空间.</p>
<p>尽管可以使用任何有效的命名空间前缀,建议文档创建者考虑标准化的"rdf:". 那些想严格向下兼容 RSS </p>
<p>0.9 的必需用"rdf:".</p>
<p>语法: <rdf:RDF xmlns:rdf="<a href="http://www.w3.org/1999/02/22-rdf-syntax-ns">http://www.w3.org/1999/02/22-rdf-syntax-ns</a>#" </p>
<p>xmlns="<a href="http://purl.org/rss/1.0/">http://purl.org/rss/1.0/</a>"><br />
要求: 完全按照上面格式要求,除非有补充的命名空间声明<br />
子模块: (channel, image?, item+, textinput?) </p>
<p> </p>
<p>5.3 <channel><br />
channel 元素包含了描述频道(channel)本身的元数据,包括一个标题,简要说明,和到所描述资源的 URL </p>
<p>链接(比如说:频道提供者的主页). channel 元素 rdf:about 属性的 {resource} URL 必须是该 RSS 文</p>
<p>档中所有 rdf:about 属性中唯一的一个并且是用来鉴别频道(channel)的 URI.一般说来,不是被描述的主</p>
<p>页的 URL 就是该 RSS 文件所在位置的 URL.</p>
<p>语法: <channel rdf:about="{resource}"><br />
要求: 必需<br />
必要属性: rdf:about<br />
子模块: (title, link, description, image?, items, textinput?)<br />
示例:</p>
<p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>107</wp:post_id>
		<wp:post_date><![CDATA[2007-04-17 18:56:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-04-17 18:56:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[rss-1-0-%e8%a7%84%e8%8c%83-core-syntax%e6%a0%b8%e5%bf%83%e8%af%ad%e6%b3%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[5098127914]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>atom 规范 中文版</title>
		<link>http://blog.00rz.com/2007/04/atom-%e8%a7%84%e8%8c%83-%e4%b8%ad%e6%96%87%e7%89%88.html</link>
		<pubDate>Tue, 17 Apr 2007 18:47:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=108</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p>The Atom Syndication Format<br />
draft-ietf-atompub-format-11</p>
<p>Status of this Memo]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>108</wp:post_id>
		<wp:post_date><![CDATA[2007-04-17 18:47:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-04-17 18:47:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[atom-%e8%a7%84%e8%8c%83-%e4%b8%ad%e6%96%87%e7%89%88]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4984294907]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>须3</title>
		<link>http://blog.00rz.com/2007/04/%e9%a1%bb3.html</link>
		<pubDate>Tue, 17 Apr 2007 18:38:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=109</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><a name="listing28"><strong><font color="#000000">清单 28. 对单个 FOM 对象计算 XPath 表达式</font></strong></a><br />
<table cellspacing="0" cellpadding="0" width="100%" border="0">
<tbody>
    <tr>
        <td class="code-outline">
<pre class="displaycode">]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>109</wp:post_id>
		<wp:post_date><![CDATA[2007-04-17 18:38:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-04-17 18:38:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%a1%bb3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>认识 Atom 发布协议，第 3 部分: Apache Abdera 项目简介</title>
		<link>http://blog.00rz.com/2007/04/%e8%ae%a4%e8%af%86-atom-%e5%8f%91%e5%b8%83%e5%8d%8f%e8%ae%ae%ef%bc%8c%e7%ac%ac-3-%e9%83%a8%e5%88%86-apache-abdera-%e9%a1%b9%e7%9b%ae%e7%ae%80%e4%bb%8b.html</link>
		<pubDate>Tue, 17 Apr 2007 18:37:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=110</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><table class="no-print" cellspacing="0" cellpadding="0" width="160" align="right" border="0">
<tbody>
    <tr>
        <td width="10"><img height="1" src="http://www.ibm.com/i/c.gif" width="10"></td>
        <td>
<table cellspacing="0" cellpadding="0" width="150" border="0">
        <tbody>
            <tr>
                <td class="v14-header-1-small"> </td>
            </tr>
        </tbody>
    </table>
    <table class="v14-gray-table-border" cellspacing="0" cellpadding="0" border="0">
    <tbody>
        <tr>
            <td class="no-padding" width="150"> </td>
        </tr>
    </tbody>
</table>
<br />
<table cellspacing="0" cellpadding="0" width="150" border="0">
<tbody>
    <tr>
        <td class="v14-header-2-small"> </td>
    </tr>
</tbody>
</table>
<table class="v14-gray-table-border" cellspacing="0" cellpadding="0" border="0">
<tbody>
    <tr>
        <td class="no-padding" width="150">
<table cellspacing="0" cellpadding="0" width="143" border="0">
        <tbody>
            <tr valign="top">
            <td width="8"><img height="1" src="http://www.ibm.com/i/c.gif" width="8"></td>
            <td> </td>
            <td width="125">
<p><font color="#5c81a7" size="2"></font></p>
</td>
        </tr>
    </tbody>
</table>
</td>
</tr>
</tbody>
</table>
<br />
</td>
</tr>
</tbody>
</table>
<p>级别: 中级</p>
<p><a href="http://www.ibm.com/developerworks/cn/xml/x-atompp3/index.html#author"><font color="#996699">James Snell</font></a> (<a href="mailto:jasnell@us.ibm.com?subject=Apache Abdera 项目简介&cc=dwxed@us.ibm.com"><font color="#5c81a7">jasnell@us.ibm.com</font></a>), 软件工程师, IBM<br />
</p>
<p>2007 年 1 月 26 日</p>
<blockquote>
<p>本系列的前几期介绍了 Atom 发布协议（Publishing Protocol），描述了在实际应用程序中使用的各种方式。本文将举例说明如何使用一个新的开放源代码项目 Abdera 实现支持 Atom 的应用程序，该项目目前处于 Apache Software Foundation 孵化阶段。</p>
<p>本文假设您已经阅读过 Atom Format 规范，对连锁有一定了解（请参阅 <a href="http://www.ibm.com/developerworks/cn/xml/x-atompp3/index.html#resources"><font color="#996699">参考资料</font></a>）。所有的例子都是用 Java 编写，并提供了包含全部代码例子的 Eclipse 项目供您下载。</p>
</blockquote>
<p><a name="N1006D"><span class="atitle"><font color="#000000">开始</font></span></a></p>
<p>首先要保证安装了 Apache Abdera 的当前版本。源代码可以从 Apache Subversion 资料库（<a href="http://svn.apache.org/repos/asf/incubator/abdera/java/branches/0.2.0-incubating/"><font color="#5c81a7">http://svn.apache.org/repos/asf/incubator/abdera/java/branches/0.2.0-incubating/</font></a>）下载。要检索源代码，需要安装 subversion 客户机并使用下面的命令：</p>
<table cellspacing="0" cellpadding="0" width="100%" border="0">
<tbody>
    <tr>
        <td class="code-outline">
<pre class="displaycode">> svn co http://svn.apache.org/repos/asf/incubator/abdera/java/branches/0.2.0-incubating/
</pre>
</td>
    </tr>
</tbody>
</table>
<br />
<p>下载源代码镜像之后，就可以使用 Ant 1.6.5 或更高版本构建 Abdera 了。</p>
<table cellspacing="0" cellpadding="0" width="100%" border="0">
<tbody>
    <tr>
        <td class="code-outline">
<pre class="displaycode">> cd trunk
> ant -f build/build.xml dist</pre>
</td>
    </tr>
</tbody>
</table>
<br />
<p>构建完成之后，编译后的 jar 和依赖关系文件存放在新建的 “dist” 目录中。运行本文中的例子需要在类路径中包含下列 jar。并非所有例子都需要依赖关系列表中的全部 jar：</p>
<table class="data-table-1" cellspacing="0" cellpadding="0" width="100%" summary="Jars required to run the examples" border="0">
<caption><strong><font color="#ffffff">表 1. 运行示例需要的 jar</font></strong> </caption>
<tbody>
<tr>
    <th>Abdera (dist)</th>
    <th>依赖关系（dist/lib）</th>
</tr>
<tr>
    <td valign="top">
<ul>
<li>abdera.client.0.2.0-incubating.jar </li>
    <li>abdera.core.0.2.0-incubating.jar </li>
    <li>abdera.parser.0.2.0-incubating.jar </li>
    <li>abdera.protocol.0.2.0-incubating.jar </li>
</ul>
</td>
    <td valign="top">
<ul>
<li>axiom-api-1.0.jar </li>
    <li>axiom-impl-1.0.jar </li>
    <li>commons-codec-1.3.jar </li>
    <li>commons-httpclient-3.0.1.jar </li>
    <li>commons-logging-1.0.4.jar </li>
    <li>geronimo-activation_1.0.2_spec-1.1.jar </li>
    <li>log4j-1.2.12.jar </li>
    <li>stax-1.1.2-dev.jar </li>
    <li>stax-api-1.0.jar </li>
    <li>jaxen-1.1-beta-7.jar </li>
</ul>
</td>
</tr>
</tbody>
</table>
<p><a name="N100DB"><span class="atitle"><font color="#000000">起步</font></span></a></p>
<p>Abdera 项目包含一组独立的模块，下表按字母顺序列出了这些模块。当然，最重要也是最常用的模块是 core、dependencies 和 parser：</p>
<table class="data-table-1" cellspacing="0" cellpadding="0" width="100%" summary="Jars required to run the examples" border="0">
<caption><strong><font color="#ffffff">表 2. Apache Abdera 项目模块</font></strong> </caption>
<tbody>
<tr>
    <th>模块</th>
    <th>说明</th>
    <th>依赖关系</th>
</tr>
<tr>
    <td>build</td>
    <td>整个项目的 Ant 构建</td>
    <td>Apache Ant 1.6.5+</td>
</tr>
<tr>
    <td valign="top">client</td>
    <td valign="top">Atom Publishing Protocol Client</td>
    <td valign="top">core, parser, protocol, commons-codec-1.3.jar, commons-httpclient-3.0.1.jar</td>
</tr>
<tr>
    <td valign="top">core</td>
    <td valign="top">Feed Object Model 接口</td>
    <td valign="top">Java Activation Framework, commons-logging-1.0.4.jar, log4j-1.2.12.jar</td>
</tr>
<tr>
    <td valign="top">dependencies</td>
    <td valign="top">所有模块共用的依赖关系</td>
    <td valign="top"> </td>
</tr>
<tr>
    <td valign="top">extensions</td>
    <td valign="top">提要语法和协议扩展</td>
    <td valign="top">core, protocol, json-1.0.jar</td>
</tr>
<tr>
    <td valign="top">parser</td>
    <td valign="top">StAX 和基于 Axiom 的默认 Feed Object Model （FOM）实现</td>
    <td valign="top">core, axiom-api-1.0.jar, axiom-impl-1.0.jar, stax-1.1.2-dev.jar, stax-api-1.0.jar, jaxen-1.1-beta-7.jar</td>
</tr>
<tr>
    <td valign="top">protocol</td>
    <td valign="top">Common Atom Publishing Protocol 代码</td>
    <td valign="top">core, parser</td>
</tr>
<tr>
    <td valign="top">security</td>
    <td valign="top">XML Digital Signature 和 Encryption 支持</td>
    <td valign="top">core, parser, xmlsec-1.3.0.jar, Bouncy Castle JCE 实现</td>
</tr>
<tr>
    <td valign="top">server</td>
    <td valign="top">Atom Publishing Protocol 服务器实现</td>
    <td valign="top">core, parser, protocol, Servlet API</td>
</tr>
</tbody>
</table>
<p>下表列出了 core 模块中的包，该模块定义了 Abdera 所称的 “Feed Object Model”，它是按照 Atom Syndication Format 规范建模的一组接口，用于解析、创建和操作 Atom 文档。</p>
<table class="data-table-1" cellspacing="0" cellpadding="0" width="100%" summary="Jars required to run the examples" border="0">
<caption><strong><font color="#ffffff">表 3. Abdera “core” 模块中的包</font></strong> </caption>
<tbody>
<tr>
    <th>包</th>
    <th>说明</th>
</tr>
<tr>
    <td valign="top">org.apache.abdera</td>
    <td valign="top">主包，包含一个 “Abdera” 对象</td>
</tr>
<tr>
    <td valign="top">org.apache.abdera.factory</td>
    <td valign="top">定义了创建新的 Feed Object Model 对象实例的 Factory 接口</td>
</tr>
<tr>
    <td valign="top">org.apache.abdera.filter</td>
    <td valign="top">定义了在解析过程中筛选 ATom 文档的接口</td>
</tr>
<tr>
    <td valign="top">org.apache.abdera.model</td>
    <td valign="top">定义了处理 Atom Feed 和 Entry 文档的基本接口，该模型还包括处理 Atom Publishing Protocol Service 和 Category 文档的支持。</td>
</tr>
<tr>
    <td valign="top">org.apache.abdera.parser</td>
    <td valign="top">定义了从 XML 文档创建 Feed Object Model 新的对象实例的 Parser 接口</td>
</tr>
<tr>
    <td valign="top">org.apache.abdera.util</td>
    <td valign="top">提供了各种工具类，主要针对希望扩展或替换 Abdera 默认解析器和工厂实现的开发人员</td>
</tr>
<tr>
    <td valign="top">org.apache.abdera.writer</td>
    <td valign="top">定义了用于序列化 Feed Object Model 对象实例的 Write 接口</td>
</tr>
<tr>
    <td valign="top">org.apache.abdera.xpath</td>
    <td valign="top">定义了使用 XPath 导航 Feed Object Model 的接口</td>
</tr>
</tbody>
</table>
<p>下载并构建 Abdera 源代码后，如果需要的话，可以花点时间通过浏览构建过程中生成的 Javadoc 文档（位于创建的 $ABDERA_HOME/dist/docs 目录下）来熟悉这种 API。</p>
<p><a name="N101B7"><span class="atitle"><font color="#000000">创建记录和提要</font></span></a></p>
<p>Abdera Feed Object Model 的两个主要功能是简化 Atom 提要和记录文档的生产与消费。</p>
<p>创建 Atom 文档首先要获得 org.apache.abdera.factory.Factory 的实例并设置提要或记录的属性。清单 1 显示了一个简单 Atom Entry Document 的创建：</p>
<br />
<br />
<a name="listing1"><strong><font color="#000000">清单 1. 创建简单的 Atom Entry 文档</font></strong></a><br />
<table cellspacing="0" cellpadding="0" width="100%" border="0">
<tbody>
    <tr>
        <td class="code-outline">
<pre class="displaycode">]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>110</wp:post_id>
		<wp:post_date><![CDATA[2007-04-17 18:37:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-04-17 18:37:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%ae%a4%e8%af%86-atom-%e5%8f%91%e5%b8%83%e5%8d%8f%e8%ae%ae%ef%bc%8c%e7%ac%ac-3-%e9%83%a8%e5%88%86-apache-abdera-%e9%a1%b9%e7%9b%ae%e7%ae%80%e4%bb%8b]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>认识 Atom 发布协议，第 2 部分: 应用 Atom 发布协议</title>
		<link>http://blog.00rz.com/2007/04/%e8%ae%a4%e8%af%86-atom-%e5%8f%91%e5%b8%83%e5%8d%8f%e8%ae%ae%ef%bc%8c%e7%ac%ac-2-%e9%83%a8%e5%88%86-%e5%ba%94%e7%94%a8-atom-%e5%8f%91%e5%b8%83%e5%8d%8f%e8%ae%ae.html</link>
		<pubDate>Tue, 17 Apr 2007 18:33:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=111</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p>级别: 中级</p>
<p><a href="http://www.ibm.com/developerworks/cn/xml/x-atompp2/index.html#author"><font color="#996699">James Snell</font></a> (<a href="mailto:jasnell@us.ibm.com?subject=应用 Atom 发布协议&cc=dwxed@us.ibm.com"><font color="#5c81a7">jasnell@us.ibm.com</font></a>), 软件工程师, IBM<br />
</p>
<p>2007 年 1 月 26 日</p>
<blockquote>
<p>本系列文章的 <a href="http://www.ibm.com/developerworks/cn/xml/x-atompp1/"><font color="#996699">上一期</font></a> 简要介绍了 Atom 发布协议（Atom Publishing Protocol，APP）。本文继续介绍该协议，举例说明如何用它与一些已经部署好的应用程序交互。</p>
<p>与以前一样，本文假设您了解使用 Atom 1.0 Syndication Format 的内容连锁，并对 HTTP 有基本的了解。本文的例子使用 Java 1.5 编写，并使用了 Apache Software Foundation 开发的 Apache Abdera 开放源码 Atom 实现的最新预览版本。</p>
</blockquote>
<p><a name="N10066"><span class="atitle"><font color="#000000">准备开始</font></span></a></p>
<p>首先要保证安装了 Apache Abdera 的当前版本。源代码可以从 Apache Subversion 资料库 <a href="http://svn.apache.org/repos/asf/incubator/abdera/java/trunk"><font color="#5c81a7">http://svn.apache.org/repos/asf/incubator/abdera/java/trunk</font></a> 下载。要检索源代码，需要安装 subversion 客户机并使用下面的命令：</p>
<table cellspacing="0" cellpadding="0" width="50%" border="0">
<tbody>
    <tr>
        <td class="code-outline">
<pre class="displaycode">> svn co http://svn.apache.org/repos/asf/incubator/abdera/java/trunk
</pre>
</td>
    </tr>
</tbody>
</table>
<br />
<p>下载源代码的镜像之后就可以用 Ant version 1.6.5 或更高版本构建 Abdera 了。</p>
<table cellspacing="0" cellpadding="0" width="50%" border="0">
<tbody>
    <tr>
        <td class="code-outline">
<pre class="displaycode">> cd trunk
> ant -f build/build.xml dist</pre>
</td>
    </tr>
</tbody>
</table>
<br />
<p>构建完成后，编译后的 jar 和 dependency 放在新建的 dist 目录中。要运行这些例子，需要在类路径中添加下列 jar：</p>
<table class="data-table-1" cellspacing="0" cellpadding="0" width="100%" summary="Jars required to run the examples" border="0">
<caption><strong><font color="#ffffff">表 1. 运行例子需要的 jar</font></strong> </caption>
<tbody>
<tr>
    <th>Abdera (dist)</th>
    <th>Dependency (dist/lib)</th>
</tr>
<tr>
    <td valign="top">
<ul>
<li>abdera.client.0.2.0-incubating-SNAPSHOT.jar </li>
    <li>abdera.core.0.2.0-incubating-SNAPSHOT.jar </li>
    <li>abdera.parser.0.2.0-incubating-SNAPSHOT.jar </li>
    <li>abdera.protocol.0.2.0-incubating-SNAPSHOT.jar </li>
</ul>
</td>
    <td valign="top">
<ul>
<li>axiom-api-1.0.jar </li>
    <li>axiom-impl-1.0.jar </li>
    <li>commons-codec-1.3.jar </li>
    <li>commons-httpclient-3.0.1.jar </li>
    <li>commons-logging-1.0.4.jar </li>
    <li>geronimo-activation_1.0.2_spec-1.1.jar </li>
    <li>geronimo-javamail_1.3.1_spec-1.1.jar </li>
    <li>log4j-1.2.12.jar </li>
    <li>stax-1.1.2-dev.jar </li>
    <li>stax-api-1.0.jar </li>
</ul>
</td>
</tr>
</tbody>
</table>
<p><a name="N100D4"><span class="atitle"><font color="#000000">Weblog</font></span></a></p>
<p>根据 IETF Atom Publishing Format and Protocol 工作组的章程，Atom 发布协议（Atom Publishing Protocol）的设计目标主要用于发布和管理 weblog 记录。毫不奇怪，随后很多 blogging 软件提供商如 Google、SixApart 和 Roller 已经开始初步支持该协议。</p>
<p><a name="N100DE"><span class="smalltitle"><strong><font color="#000000" size="3">Google 的 Blogger Beta</font></strong></span></a></p>
<p>2006 年 8 月初，Google 宣布将对其提供的网络日记服务进行期待已久的升级。服务新增加的一个特性就是支持使用 Atom 发布协议创建和编辑公告。</p>
<p>创建公告非常简单。首先需要知道新记录所要发送到的 Atom 集合的 URL。对于 Blogger 来说，Atom 提要用于连锁 blog 的内容组成 Atom 发布协议集合供提要阅读器和聚合器使用。因此要确定集合的 URI，只要查看 weblog 主页头部的替代链接即可。</p>
<br />
<br />
<a name="listing1"><strong><font color="#000000">清单 1. Blogger 主页的头部</font></strong></a><br />
<table cellspacing="0" cellpadding="0" width="75%" border="0">
<tbody>
    <tr>
        <td class="code-outline">
<pre class="displaycode">]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>111</wp:post_id>
		<wp:post_date><![CDATA[2007-04-17 18:33:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-04-17 18:33:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%ae%a4%e8%af%86-atom-%e5%8f%91%e5%b8%83%e5%8d%8f%e8%ae%ae%ef%bc%8c%e7%ac%ac-2-%e9%83%a8%e5%88%86-%e5%ba%94%e7%94%a8-atom-%e5%8f%91%e5%b8%83%e5%8d%8f%e8%ae%ae]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>认识 Atom 发布协议，第 1 部分: 使用 Atom 发布协议创建和编辑 Web 资源</title>
		<link>http://blog.00rz.com/2007/04/%e8%ae%a4%e8%af%86-atom-%e5%8f%91%e5%b8%83%e5%8d%8f%e8%ae%ae%ef%bc%8c%e7%ac%ac-1-%e9%83%a8%e5%88%86-%e4%bd%bf%e7%94%a8-atom-%e5%8f%91%e5%b8%83%e5%8d%8f%e8%ae%ae%e5%88%9b%e5%bb%ba%e5%92%8c%e7%bc%96.html</link>
		<pubDate>Tue, 17 Apr 2007 18:31:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=112</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p>
<table cellspacing="0" cellpadding="0" width="100%" border="0">
<tbody>
    <tr valign="top">
    <td width="100%">
<p >介绍协议的基本操作</p>
<img class="display-img" height="6" src="http://www.ibm.com/i/c.gif" width="1"></td>
    <td class="no-print" width="192"> </td>
</tr>
</tbody>
</table>
<table cellspacing="0" cellpadding="0" width="100%" border="0">
<tbody>
    <tr valign="top">
    <td width="10"><img height="1" src="http://www.ibm.com/i/c.gif" width="10"></td>
    <td width="100%">
<table class="no-print" cellspacing="0" cellpadding="0" width="160" align="right" border="0">
    <tbody>
        <tr>
            <td width="10"><img height="1" src="http://www.ibm.com/i/c.gif" width="10"></td>
            <td>
<table cellspacing="0" cellpadding="0" width="150" border="0">
            <tbody>
                <tr>
                    <td class="v14-header-1-small"> </td>
                </tr>
            </tbody>
        </table>
        <table class="v14-gray-table-border" cellspacing="0" cellpadding="0" border="0">
        <tbody>
            <tr>
                <td class="no-padding" width="150"> </td>
            </tr>
        </tbody>
    </table>
<br />
    <table cellspacing="0" cellpadding="0" width="150" border="0">
    <tbody>
        <tr>
            <td class="v14-header-2-small"> </td>
        </tr>
    </tbody>
</table>
<table class="v14-gray-table-border" cellspacing="0" cellpadding="0" border="0">
<tbody>
    <tr>
        <td class="no-padding" width="150">
<table cellspacing="0" cellpadding="0" width="143" border="0">
        <tbody>
            <tr valign="top">
            <td width="8"><img height="1" src="http://www.ibm.com/i/c.gif" width="8"></td>
            <td> </td>
            <td width="125">
<p><font color="#5c81a7" size="2"></font></p>
</td>
        </tr>
    </tbody>
</table>
</td>
</tr>
</tbody>
</table>
<br />
</td>
</tr>
</tbody>
</table>
<p>级别: 中级</p>
<p><a href="http://www.ibm.com/developerworks/cn/xml/x-atompp1/index.html#author"><font color="#996699">James Snell</font></a> (<a href="mailto:jasnell@us.ibm.com?subject=使用 Atom 发布协议创建和编辑 Web 资源&cc=dwxed@us.ibm.com"><font color="#5c81a7">jasnell@us.ibm.com</font></a>), 软件工程师, IBM<br />
</p>
<p>2007 年 1 月 23 日</p>
<blockquote>Atom 发布协议（Publishing Protocol）是一种重要的内容发布和管理新标准。本文从高层概述了该协议及其基本操作和能力。</blockquote>
<p>在过去几年中，Web 内容连锁技术在互联网上以及防火墙后面变得越来越重要。2005 年 7 月，互联网工程任务组（IETF）的 Atom Publishing Format and Protocol 工作组（简称为 “atompub”）发布了两个标准规范中的第一个，目标是提供 “用于表示的提要格式和用于编辑 Web 资源的协议，如 Weblog、在线日志、Wiki 以及类似的内容。” 此后，通常被称为 Atom 1.0 的 Atom 连锁格式（Syndication Format），部署到了成千上万个网站上，并得到了市场上所有主要连锁平台的支持。今天，仅仅过了一年之后，两个规范中的第二个也将宣告完成，即 Atom 发布协议（Publishing Protocol）。</p>
<p>Atom 发布协议是一种基于 HTTP 的用于创建和编辑 Web 资源的方法。它基本上围绕着这样一种观念设计，即利用 HTTP 协议提供的基本操作（如 GET、PUT 和 DELETE）传输表示 blog 项、博客、wiki 页面、日程记录等内容的 Atom 1.0 Feed and Entry 文档实例。</p>
<p>后面的讨论将带领您初步了解该协议的基本操作。本文假定读者非常熟悉使用 Atom 1.0 Syndication Format 的内容连锁，并对 HTTP 有基本的了解。阅读这篇概述文章的同时，建议您在手头上有 Atom 1.0（RFC 4287）和 HTTP 1.1（RFC 2616）规范的副本，作为涉及到的各种元素和方法的交叉参考。如果不熟悉 Atom 格式，建议您看一看我去年为 developerWorks 撰写的文章，“An overview of the Atom Syndication Format”（请参阅 <a href="http://www.ibm.com/developerworks/cn/xml/x-atompp1/index.html#resources"><font color="#996699">参考资料</font></a>）。 </p>
<p><a name="N1005E"><span class="atitle"><font color="#000000">高层概述</font></span></a></p>
<p>Atom 发布协议的核心是可编辑资源<em>集合</em> 的概念，用 Atom 1.0 Feed and Entry 文档表示。<em>集合</em> 有一个惟一的 URI。向这个 URI 发出 HTTP GET 请求将返回 Atom Feed Document。为了在提要中创建新记录，客户机需要向集合的 URI 发送 HTTP POST 请求。这些新创建的记录将分配惟一的编辑 URI。要修改这些记录，客户机只需要从集合中检索资源，修改后再放回去。要从提要中删除记录，只需要向适当的编辑 URI 发送 HTTP DELETE 请求。所有操作都是用简单的 HTTP 请求完成的，通常不会比简单的文本编辑器和命令提示更难。</p>
<br />
<br />
<a name="figure1"><strong><font color="#000000">图 1. 使用简单的 HTTP 方法发布和管理内容的 Atom 发布协议</font></strong></a><br />
<img height="152" alt="Atom 发布协议概述" src="http://www.ibm.com/developerworks/cn/xml/x-atompp1/overview.gif" width="377"> <br />
<br />
<br />
<a name="listing1"><strong><font color="#000000">清单 1. 使用开放源码的 curl HTTP 客户机和 Atom 发布端点交互</font></strong></a><br />
<table cellspacing="0" cellpadding="0" width="100%" border="0">
<tbody>
    <tr>
        <td class="code-outline">
<pre class="displaycode">curl -s -X POST --data-binary @entry.xml http://example.org/atom/entries
curl -s -X GET http://example.org/atom/entries/1
curl -s -X PUT --data-binary @entry.xml http://example.org/atom/entries/1
curl -s -X DELETE http://example.org/atom/entries/1
 </pre>
</td>
    </tr>
</tbody>
</table>
<br />
<p><a name="N10087"><span class="atitle"><font color="#000000">发现可用的集合</font></span></a></p>
<p>使用任何支持 APP 的服务第一步都是确定有哪些集合可用以及这些集合可能包含什么类型的资源。Atom 协议规范定义了一种被称为服务文档的 XML 格式，客户机可用它确定一个端点。</p>
<p>检索服务文档需要向服务文档的 URI 发送 HTTP GET 请求。</p>
<br />
<br />
<a name="listing2"><strong><font color="#000000">清单 2. 从服务器上检索 APP 服务文档</font></strong></a><br />
<table cellspacing="0" cellpadding="0" width="100%" border="0">
<tbody>
    <tr>
        <td class="code-outline">
<pre class="displaycode">GET /servicedocument HTTP/1.1
Host: example.org
 </pre>
</td>
    </tr>
</tbody>
</table>
<br />
<p>服务器应该用一个服务文档来响应这个请求，其中列出了客户机可用的集合，如 <a href="http://www.ibm.com/developerworks/cn/xml/x-atompp1/index.html#listing3"><font color="#996699">清单 3</font></a> 所示。</p>
<br />
<br />
<a name="listing3"><strong><font color="#000000">清单 3. 简单的 APP 服务文档</font></strong></a><br />
<table cellspacing="0" cellpadding="0" width="100%" border="0">
<tbody>
    <tr>
        <td class="code-outline">
<pre class="displaycode">HTTP/1.1 200 OK
Date: ...
Content-Type: application/atomserv+xml; charset=utf-8
Content-Length: nnn

<service xmlns="..." xmlns:atom="http://www.w3.org/2005/Atom">
 <workspace>
 <atom:title>My Weblog</atom:title>
 <collection href="http://www.example.org/blog/entries">
 <atom:title>Entries</atom:title>
 <accept>entry</accept>
 </collection>
 <collection href="http://www.example.org/blog/photos">
 <atom:title>Photos</atom:title>
 <accept>image/*</accept>
 </collection>
 </workspace>
</service>
 </pre>
</td>
    </tr>
</tbody>
</table>
<br />
<p>服务文档中列出的每个集合元素都代表一个容器，容器中可以存储一些内容。文档中的 workspace 元素仅用于对相关的集合进行逻辑分组。比方说，在给定的日志服务上一个用户可能有多个帐户，分别为 blog 记录、上传的文件、书签等提供不同的容器。每个服务可以用服务文档中单独的 workspace 表示。</p>
<p>collection 元素提供了集合的地址（href 属性）和可以添加到集合中的内容类型的列表（用 accept 元素中的 mime 类型标识）。<a href="http://www.ibm.com/developerworks/cn/xml/x-atompp1/index.html#listing3"><font color="#996699">清单 3</font></a> 中所示的例子有两个集合，一个只接受 Atom Entry Documents，另一个只接受图像文件（如 PNG、GIF、JPEG 等）。</p>
<p><a name="N100B9"><span class="atitle"><font color="#000000">向集合中添加记录</font></span></a></p>
<p>得到集合的地址后，我们使用 HTTP POST 方法增加新的资源，如 <a href="http://www.ibm.com/developerworks/cn/xml/x-atompp1/index.html#listing4"><font color="#996699">清单 4</font></a> 所示。</p>
<br />
<br />
<a name="listing4"><strong><font color="#000000">清单 4. 向 APP 集合中增加新记录</font></strong></a><br />
<table cellspacing="0" cellpadding="0" width="100%" border="0">
<tbody>
    <tr>
        <td class="code-outline">
<pre class="displaycode">POST /blog/entries HTTP/1.1
Host: www.example.org
Content-Type: application/atom+xml; charset=utf-8
Content-Length: nnn

<?xml version="1.0" ?>
<entry xmlns="http://www.w3.org/2005/Atom">
 <title>Atom-Powered Robots Run Amok</title>
 <link href="http://example.org/2003/12/13/atom03"/>
 <id>urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a</id>
 <updated>2003-12-13T18:30:02Z</updated>
 <author><name>James</name></author>
 <summary>Some text.</summary>
</entry>
 </pre>
</td>
    </tr>
</tbody>
</table>
<br />
<p><a href="http://www.ibm.com/developerworks/cn/xml/x-atompp1/index.html#listing4"><font color="#996699">清单 4</font></a> 的例子中向 http://example.org/blog/entries 的集合中添加了一个 Atom Entry Document。集合的 URI 从 <a href="http://www.ibm.com/developerworks/cn/xml/x-atompp1/index.html#listing3"><font color="#996699">清单 3</font></a> 所示的服务文档中取得。要注意，发出的记录必须是有效的，就是说必须有 id、author 和 updated 元素，虽然很多 APP 应用程序选择忽略或改写客户机提供的值。</p>
<p>对 POST 请求的成功响应（如 <a href="http://www.ibm.com/developerworks/cn/xml/x-atompp1/index.html#listing5"><font color="#996699">清单 5</font></a> 所示）为客户机提供了两个重要信息：请求的状态（HTTP 响应代码）和新建资源的地址（包含在 Location 头部中）。</p>
<br />
<br />
<a name="listing5"><strong><font color="#000000">清单 5. 成功 POST 操作的响应</font></strong></a><br />
<table cellspacing="0" cellpadding="0" width="100%" border="0">
<tbody>
    <tr>
        <td class="code-outline">
<pre class="displaycode">HTTP/1.1 201 Created
Date: nnnn
Content-Type: application/atom+xml; charset=utf-8
Content-Location: /blog/entries/1
Location: /blog/entries/1
ETag: "/blog/entries/1?1"
Last-Modified: Sat, 12 Aug 2006 13:40:03 GMT

<?xml version="1.0" ?<
<entry xmlns="http://www.w3.org/2005/Atom" >
 <id>tag:example.org,2006:/blog/entries/1</id>
 <title>Atom-Powered Robots Run Amok</title>
 <link href="http://example.org/2003/12/13/atom03"/>
 <link rel="edit" href="http://example.org/blog/entries/1" />
 <updated>2006-08-12T13:40:03Z</updated>
 <author><name>James M Snell</name></author>
 <summary>Some text.</summary>
</entry>
 </pre>
</td>
    </tr>
</tbody>
</table>
<br />
<p>因为一些 APP 服务器可能改变记录的主要内容（比如 id、author 和 updated 元素），服务器返回的响应可能包含实际添加到集合中的记录的副本。这样客户机就可以使发送给服务器的记录和实际创建的记录保持一致。</p>
<p><a name="N100EF"><span class="atitle"><font color="#000000">列出集合中的记录</font></span></a></p>
<p>将记录添加到集合中之后，客户机可以通过向集合的 URI 发送 GET 请求检索其成员资源的列表，如 <a href="http://www.ibm.com/developerworks/cn/xml/x-atompp1/index.html#listing6"><font color="#996699">清单 6</font></a> 所示。</p>
<br />
<br />
<a name="listing6"><strong><font color="#000000">清单 6. 检索集合中的提要</font></strong></a><br />
<table cellspacing="0" cellpadding="0" width="100%" border="0">
<tbody>
    <tr>
        <td class="code-outline">
<pre class="displaycode">GET /blog/entries HTTP/1.1
Host: example.org
 </pre>
</td>
    </tr>
</tbody>
</table>
<br />
<p>该请求的响应应该是一个 Atom Feed Document，其中每个记录表示集合中的一个成员资源，如 <a href="http://www.ibm.com/developerworks/cn/xml/x-atompp1/index.html#listing7"><font color="#996699">清单 7</font></a> 所示。</p>
<br />
<br />
<a name="listing7"><strong><font color="#000000">清单 7. APP 集合的 Atom Feed Document</font></strong></a><br />
<table cellspacing="0" cellpadding="0" width="100%" border="0">
<tbody>
    <tr>
        <td class="code-outline">
<pre class="displaycode">HTTP/1.1 200 OK
Date: ...
Content-Type: application/atom+xml; charset=utf-8
Content-Length: nnn
ETag: "/blog/entries?132"
Last-Modified: Sat, 12 Aug 2006 13:40:03 GMT

<feed xmlns="http://www.w3.org/2005/Atom" 
 xml:base="http://example.org/blog/entries">
 <id>http://example.org/blog/entries</id>
 <title>My Blog Entries</title>
 <updated>2006-08-12T13:40:03Z</updated>
 <link rel="self" href="/blog/entries" />
 <link href="http://blog.example.org" />
 <entry>
 <id>tag:example.org,2006:/blog/entries/1</id>
 <title>Atom-Powered Robots Run Amok</title>
 <link href="http://example.org/2003/12/13/atom03"/>
 <link rel="edit" href="http://example.org/blog/entries/1" />
 <updated>2006-08-12T13:40:03Z</updated>
 <author><name>James</name></author>
 <summary>Some text.</summary>
 </entry>
 <entry>
 ...
 </entry>
 ...
</feed>
 </pre>
</td>
    </tr>
</tbody>
</table>
<br />
<p>可以将返回的提要看作是集合上的某种索引，和文件系统中的 “dir” 或 “ls” 命令很相似。</p>
<p>记录本身按照记录 updated 元素的值排列，最近更新的记录排在最前面。此外，记录列表可能需要多个 Atom Feed Document，使用所谓的分页链接串在一起，如 <a href="http://www.ibm.com/developerworks/cn/xml/x-atompp1/index.html#listing8"><font color="#996699">清单 8</font></a> 所示。</p>
<br />
<br />
<a name="listing8"><strong><font color="#000000">清单 8. 使用分页链接的提要片段</font></strong></a><br />
<table cellspacing="0" cellpadding="0" width="100%" border="0">
<tbody>
    <tr>
        <td class="code-outline">
<pre class="displaycode"><feed xmlns="http://www.w3.org/2005/Atom" 
 xml:base="http://example.org/blog/entries?page2">
 <link rel="next" href="entries?page3" />
 <link rel="previous" href="entries?page1" />
 ...
 </pre>
</td>
    </tr>
</tbody>
</table>
<br />
<p>分页链接提供了一种方法，将可能很大的集合成员资源列表划分成较小的、更容易管理的子集。</p>
<p><a name="N1012F"><span class="atitle"><font color="#000000">编辑记录</font></span></a></p>
<p>要编辑记录，客户机首先需要检索可编辑的表示。为此可以向成员的 Edit URI 发送一个 GRT 请求，如 <a href="http://www.ibm.com/developerworks/cn/xml/x-atompp1/index.html#listing9"><font color="#996699">清单 9</font></a> 所示。这基本上相当于在本地文本编辑器中编辑文档时首先要打开文档。</p>
<br />
<br />
<a name="listing9"><strong><font color="#000000">清单 9. 检索资源的可编辑表示</font></strong></a><br />
<table cellspacing="0" cellpadding="0" width="100%" border="0">
<tbody>
    <tr>
        <td class="code-outline">
<pre class="displaycode">GET /blog/entries/1 HTTP/1.1
Host: example.org
 </pre>
</td>
    </tr>
</tbody>
</table>
<br />
<p>对该请求的响应应该是一个如 <a href="http://www.ibm.com/developerworks/cn/xml/x-atompp1/index.html#listing10"><font color="#996699">清单 10</font></a> 所示的 Atom Entry Document。</p>
<br />
<br />
<a name="listing10"><strong><font color="#000000">清单 10. 表示可编辑资源的 Atom Entry Document</font></strong></a><br />
<table cellspacing="0" cellpadding="0" width="100%" border="0">
<tbody>
    <tr>
        <td class="code-outline">
<pre class="displaycode">HTTP/1.1 200 OK 
Date: nnn
Content-Type: application/atom+xml; charset=utf-8
Content-Length: nnn
ETag: "/blog/entries/1?1"
Last-Modified: Sat, 12 Aug 2006 13:40:03 GMT

<?xml version="1.0" ?>
<entry xmlns="http://www.w3.org/2005/Atom" >
 <id>tag:example.org,2006:/blog/entries/1</id>
 <title>Atom-Powered Robots Run Amok</title>
 <link href="http://example.org/2003/12/13/atom03"/>
 <link rel="edit" href="http://example.org/blog/entries/1" />
 <updated>2006-08-12T13:40:03Z</updated>
 <author><name>James</name></author>
 <summary>Some text.</summary>
</entry>
 </pre>
</td>
    </tr>
</tbody>
</table>
<br />
<p>得到可编辑的表示之后，客户机可以对选择的记录做任何（合理的）修改，然后向记录的 Edit URI 发出 PUT 请求更新（<a href="http://www.ibm.com/developerworks/cn/xml/x-atompp1/index.html#listing11"><font color="#996699">清单 11</font></a>）。</p>
<br />
<br />
<a name="listing11"><strong><font color="#000000">清单 11. 把修改后的 Atom 记录返回服务器</font></strong></a><br />
<table cellspacing="0" cellpadding="0" width="100%" border="0">
<tbody>
    <tr>
        <td class="code-outline">
<pre class="displaycode">PUT /blog/entries/1 HTTP/1.1
Host: example.org
Content-Type: application/atom+xml; charset=utf-8
Content-Length: nnnn
If-Match: "/blog/entries/1?1"
If-Unmodified-Since: Sat, 12 Aug 2006 13:40:03 GMT

<?xml version="1.0" ?>
<entry xmlns="http://www.w3.org/2005/Atom" >
 <id>tag:example.org,2006:/blog/entries/1</id>
 <title>Atom-Powered Robots Run Crazy</title>
 <link href="http://example.org/2003/12/13/atom03"/>
 <link rel="edit" href="http://example.org/blog/entries/1" />
 <updated>2006-08-12T13:40:03Z</updated>
 <author><name>John</name></author>
 <summary>Some different text.</summary>
</entry>
 </pre>
</td>
    </tr>
</tbody>
</table>
<br />
<p>要注意，PUT 请求中使用了 If-Match 和 If-Unmodified-Since 头。虽然不是必需的，但使用这些头可以让 APP 实现避免覆盖其他客户机对成员资源所做的修改。如果这些条件都不满足，服务器可以拒绝请求并通知客户机尝试修改的资源可能存在冲突。如果条件满足，服务器就会认为客户机提交的修改是可以接受的，并返回适当的成功响应。</p>
<p><a name="N1016C"><span class="atitle"><font color="#000000">删除记录</font></span></a></p>
<p>如果客户机要从集合中删除资源，需要向 Edit URI 发送 DELETE 请求，如 <a href="http://www.ibm.com/developerworks/cn/xml/x-atompp1/index.html#listing12"><font color="#996699">清单 12</font></a> 所示。</p>
<br />
<br />
<a name="listing12"><strong><font color="#000000">清单 12. 从集合中删除资源</font></strong></a><br />
<table cellspacing="0" cellpadding="0" width="100%" border="0">
<tbody>
    <tr>
        <td class="code-outline">
<pre class="displaycode">DELETE /blog/entries/1 HTTP/1.1
Host: example.org
 </pre>
</td>
    </tr>
</tbody>
</table>
<br />
<p>删除成功后，该记录将不再出现在集合的 Atom 提要中，也不再能编辑。</p>
<p><a name="N10187"><span class="atitle"><font color="#000000">向集合中增加媒体资源</font></span></a></p>
<p>也可以向 APP 集合中增加任何媒体资源，如图片、文档、音频记录等。这些项被 APP 规范称为 <em>media-link 项</em>，因为当把这些资源增加到集合中时，服务器将创建一个 Atom 记录文档，链接到客户机提交的媒体资源。</p>
<p>虽然最初的设计目的仅仅是为了让 Weblog 作者能够上传需要的媒体对象并包含在文档中，但由于 Atom 发布协议支持任何媒体资源，因此非常适合各种应用程序，包括：</p>
<ul>
<li>博客 </li>
    <li>视频日志 </li>
    <li>图库 </li>
    <li>Wiki 和语境应用程序 </li>
    <li>文档管理 </li>
    <li>XML 资料库 </li>
    <li>软件分发 </li>
    <li>产品应用程序（如 Office Suites） </li>
    <li>等等 </li>
</ul>
    <p>创建 media-link 记录，客户机需要向集合 URI 发送 POST 请求，但包含的不是 Atom Entry Document 而是要链接的媒体资源的表示（<a href="http://www.ibm.com/developerworks/cn/xml/x-atompp1/index.html#listing13"><font color="#996699">清单 13</font></a>）。</p>
<br />
<br />
<a name="listing13"><strong><font color="#000000">清单 13. 向 APP 应用程序增加二进制图像文件</font></strong></a><br />
    <table cellspacing="0" cellpadding="0" width="100%" border="0">
    <tbody>
        <tr>
            <td class="code-outline">
<pre class="displaycode">POST /blog/photos HTTP/1.1
Host: example.org
Content-Type: image/png
Content-Length: nnnn
Slug: A trip to the beach

{binary image data}
 </pre>
</td>
        </tr>
    </tbody>
</table>
<br />
<p>如果集合可以保存客户机发送的媒体资源类型，就会保存它，并创建一个 Atom Entry Document 链接到该资源，如 <a href="http://www.ibm.com/developerworks/cn/xml/x-atompp1/index.html#listing14"><font color="#996699">清单 14</font></a> 所示。请求中包含的 Slug 头是 Atom Publishing Specification 新增加的 HTTP Entity Header，用于在创建和管理资源时把一个简单的名字和具有多种用途的成员资源关联起来。比方说，服务器可以在创建成员资源的 URI 或者设置 Atom Entry Document 中 title 元素的值时使用 slug 的值。Slug 头可以在发布 Atom 记录或者媒体资源时使用，但多用于后者。</p>
<br />
<br />
<a name="listing14"><strong><font color="#000000">清单 14. 在媒体发布响应中创建的 media-link 记录</font></strong></a><br />
<table cellspacing="0" cellpadding="0" width="100%" border="0">
<tbody>
    <tr>
        <td class="code-outline">
<pre class="displaycode">HTTP/1.1 201 Created
Date: nnnn
Content-Location: /blog/photos/a_trip_to_the_beach
Location: /blog/photos/a_trip_to_the_beach
Content-Type: application/atom+xml; charset=utf-8
Content-Length: nnnn
Slug: A trip to the beach
ETag: "/blog/photos/a_trip_to_the_beach?1"
Last-Modified: Sat, Aug 12 2006 14:11:04 GMT

<?xml version="1.0"?>
<entry xmlns="http://www.w3.org/2005/Atom">
 <id>tag:example.org,2006:/blog/photos/a_trip_to_the_beach</id>
 <title>A trip to the beach</title>
 <link rel="edit" 
 href="http://example.org/blog/photos/a_trip_to_the_beach" />
 <span class="boldcode"><strong><link rel="edit-media" type="image.png" 
 href="http://example.org/blog/photos/a_trip_to_the_beach?media" /></strong></span>
 <updated>2006-08-12T14:11:04Z</updated>
 <author><name>James</name></author>
 <summary>A trip to the beach</summary>
 <span class="boldcode"><strong><content type="image/png" 
 src="http://blog.example.org/photos/a_trip_to_the_beach" /></strong></span>
</entry>
 </pre>
</td>
    </tr>
</tbody>
</table>
<br />
<p>media-link 记录必须包含 content 元素，它的 src 属性提供了新建媒体资源的 URI。这个 URI 对于媒体资源的公共引用很方便。使用单独的 edit-media 链接可以确定用于更新媒体资源的 URI。</p>
<p><a name="N101E0"><span class="atitle"><font color="#000000">编辑媒体资源</font></span></a></p>
<p>编辑添加到集合中的媒体资源和编辑 Atom 记录基本相同。首先通过对 eit-media 链接所指定的 URI 发送 GET 请求来检索资源的可编辑版本（<a href="http://www.ibm.com/developerworks/cn/xml/x-atompp1/index.html#listing15"><font color="#996699">清单 15</font></a>）。</p>
<br />
<br />
<a name="listing15"><strong><font color="#000000">清单 15. 检索媒体资源的可编辑表示</font></strong></a><br />
<table cellspacing="0" cellpadding="0" width="100%" border="0">
<tbody>
    <tr>
        <td class="code-outline">
<pre class="displaycode">GET /blog/photos/a_trip_to_the_beach?media HTTP/1.1
Host: example.org
 </pre>
</td>
    </tr>
</tbody>
</table>
<br />
<p>返回可编辑的表示之后，客户机可以做需要的任何修改，然后向 edit-media URI 发出 PUT 请求（<a href="http://www.ibm.com/developerworks/cn/xml/x-atompp1/index.html#listing16"><font color="#996699">清单 16</font></a>）。</p>
<br />
<br />
<a name="listing16"><strong><font color="#000000">清单 16. 修改媒体资源</font></strong></a><br />
<table cellspacing="0" cellpadding="0" width="100%" border="0">
<tbody>
    <tr>
        <td class="code-outline">
<pre class="displaycode">PUT /blog/photos/a_trip_to_the_beach?media HTTP/1.1
Host: example.org
Content-Type: image/png
Content-Length: nnn

{new binary image data}
 </pre>
</td>
    </tr>
</tbody>
</table>
<br />
<p><a name="N10209"><span class="atitle"><font color="#000000">保护集合</font></span></a></p>
<p>虽然 Atom 发布协议不要求实现使用身份验证，但最好这样做以便防止有恶意的客户机创建和修改集合成员。至少，实现应该能够使用 HTTP Basic 身份验证和 TLS/SSL 连接。但实际上，APP 客户机很可能遇到各种形式的身份验证机制。但无论采用什么形式的身份验证，服务器都应该利用标准 HTTP 风格的挑战来确定所选身份验证的类型。</p>
<p>比方说，如果服务器从客户机收到未经授权的请求，服务器应该返回包含 WWW-Authenticate 头的 401 Unauthorized 响应，如 <a href="http://www.ibm.com/developerworks/cn/xml/x-atompp1/index.html#listing17"><font color="#996699">清单 17</font></a> 所示。</p>
<br />
<br />
<a name="listing17"><strong><font color="#000000">清单 17. 未授权请求的响应</font></strong></a><br />
<table cellspacing="0" cellpadding="0" width="100%" border="0">
<tbody>
    <tr>
        <td class="code-outline">
<pre class="displaycode">HTTP/1.1 401 Unauthorized
Date: nnn
WWW-Authenticate: Basic realm="my blog"
 </pre>
</td>
    </tr>
</tbody>
</table>
<br />
<p>然后，客户机可以使用适当的 Authorization 头重新发出请求。</p>
<br />
<br />
<a name="listing18"><strong><font color="#000000">清单 18. 授权的请求</font></strong></a><br />
<table cellspacing="0" cellpadding="0" width="100%" border="0">
<tbody>
    <tr>
        <td class="code-outline">
<pre class="displaycode">POST /entries/blog HTTP/1.1
Host: example.org:443
Authorization: Basic SmFtZXM6bm90IG15IHJlYWwgcGFzc3dvcmQgOi0p
...
 </pre>
</td>
    </tr>
</tbody>
</table>
<br />
<p><a name="N10231"><span class="atitle"><font color="#000000">使用 APP</font></span></a></p>
<p>到目前为止，我讨论了 Atom 发布协议的基本操作，并通过例子示范了所有核心功能。不过，还没有讨论可以将 Atom 发布协议付诸应用的各种方法。在本系列的下一期文章中，我将介绍被认为最适合采用该协议的几种应用。其中包括一些明显的应用，如 Weblog、社区书签和照像簿类型的应用；也包括一些不那么明显的用法，比如日程表、联系人管理、文档和媒体内容资料库、数据库管理、语境应用程序，甚至面向服务体系结构。</p>
<p>此外，我们还将讨论如何利用 Apache Abdera 开放源码的 Atom（目前在 Apache Software Foundation 下孵化）用 Java 实现 Atom 发布客户机和服务器，最后再讨论创建支持 APP 的应用程序服务。</p>
</td>
</tr>
</tbody>
</table>
</p></div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>112</wp:post_id>
		<wp:post_date><![CDATA[2007-04-17 18:31:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-04-17 18:31:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%ae%a4%e8%af%86-atom-%e5%8f%91%e5%b8%83%e5%8d%8f%e8%ae%ae%ef%bc%8c%e7%ac%ac-1-%e9%83%a8%e5%88%86-%e4%bd%bf%e7%94%a8-atom-%e5%8f%91%e5%b8%83%e5%8d%8f%e8%ae%ae%e5%88%9b%e5%bb%ba%e5%92%8c%e7%bc%96]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>用PHP做商品无限级的分类程序</title>
		<link>http://blog.00rz.com/2007/04/%e7%94%a8php%e5%81%9a%e5%95%86%e5%93%81%e6%97%a0%e9%99%90%e7%ba%a7%e7%9a%84%e5%88%86%e7%b1%bb%e7%a8%8b%e5%ba%8f.html</link>
		<pubDate>Tue, 17 Apr 2007 14:48:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=113</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p>根据动网的论坛无限级的分类,特开发了PHP版的无限级的分类.</p>
<p>即然是PHP,数据表当然是 MYSQL:在应用之前,先在mysql中建立数据表.b_mtype.其中的字段包括:typeid,typename,parentid,paretnstr,rootid,child,orders.</p>
<p>具体PHP程序如下:</p>
<p><?php<br />
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>113</wp:post_id>
		<wp:post_date><![CDATA[2007-04-17 14:48:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-04-17 14:48:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%94%a8php%e5%81%9a%e5%95%86%e5%93%81%e6%97%a0%e9%99%90%e7%ba%a7%e7%9a%84%e5%88%86%e7%b1%bb%e7%a8%8b%e5%ba%8f]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>php+mysql实现无限级分类 &#124; 树型显示分类关系</title>
		<link>http://blog.00rz.com/2007/04/phpmysql%e5%ae%9e%e7%8e%b0%e6%97%a0%e9%99%90%e7%ba%a7%e5%88%86%e7%b1%bb-%e6%a0%91%e5%9e%8b%e6%98%be%e7%a4%ba%e5%88%86%e7%b1%bb%e5%85%b3%e7%b3%bb.html</link>
		<pubDate>Tue, 17 Apr 2007 14:40:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=114</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><div align="center">
<h1 class="aTitle"><font size="2">转自</font><a href="http://www.heima123.com/html/2006-10/22915.shtm"><font size="2">http://www.heima123.com/html/2006-10/22915.shtm</font></a></h1>
</div>
<div class="content" style="padding-right: 10px; display: block; padding-left: 10px; padding-bottom: 0px; padding-top: 0px">
<p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>114</wp:post_id>
		<wp:post_date><![CDATA[2007-04-17 14:40:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-04-17 14:40:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[phpmysql%e5%ae%9e%e7%8e%b0%e6%97%a0%e9%99%90%e7%ba%a7%e5%88%86%e7%b1%bb-%e6%a0%91%e5%9e%8b%e6%98%be%e7%a4%ba%e5%88%86%e7%b1%bb%e5%85%b3%e7%b3%bb]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>说说大型高并发高负载网站的系统架构</title>
		<link>http://blog.00rz.com/2007/04/%e8%af%b4%e8%af%b4%e5%a4%a7%e5%9e%8b%e9%ab%98%e5%b9%b6%e5%8f%91%e9%ab%98%e8%b4%9f%e8%bd%bd%e7%bd%91%e7%ab%99%e7%9a%84%e7%b3%bb%e7%bb%9f%e6%9e%b6%e6%9e%84.html</link>
		<pubDate>Wed, 11 Apr 2007 15:46:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=115</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p>转载请保留出处：俊麟 Michael’s blog (http://www.toplee.com/blog/?p=71)<br />
Trackback Url : <a href="http://www.toplee.com/blog/wp-trackback.php?p=71">http://www.toplee.com/blog/wp-trackback.php?p=71</a></p>
<p>　　我在CERNET做过拨号接入平台的搭建，而后在Yahoo&3721从事过搜索引擎前端开发，又在MOP处理过大型社区猫扑大杂烩的架构升级等工作，同时自己接触和开发过不少大中型网站的模块，因此在大型网站应对高负载和并发的解决方案上有一些积累和经验，可以和大家一起探讨一下。</p>
<p><a ></a><br />
　　一个小型的网站，比如个人网站，可以使用最简单的html静态页面就实现了，配合一些图片达到美化效果，所有的页面均存放在一个目录下，这样的网站对系统架构、性能的要求都很简单，随着互联网业务的不断丰富，网站相关的技术经过这些年的发展，已经细分到很细的方方面面，尤其对于大型网站来说，所采用的技术更是涉及面非常广，从硬件到软件、编程语言、数据库、WebServer、防火墙等各个领域都有了很高的要求，已经不是原来简单的html静态网站所能比拟的。</p>
<p>　　大型网站，比如门户网站。在面对大量用户访问、高并发请求方面，基本的解决方案集中在这样几个环节：使用高性能的服务器、高性能的数据库、高效率的编程语言、还有高性能的Web容器。但是除了这几个方面，还没法根本解决大型网站面临的高负载和高并发问题。</p>
<p>　　上面提供的几个解决思路在一定程度上也意味着更大的投入，并且这样的解决思路具备瓶颈，没有很好的扩展性，下面我从低成本、高性能和高扩张性的角度来说说我的一些经验。</p>
<p><strong>1、HTML静态化</strong><br />
　　其实大家都知道，效率最高、消耗最小的就是纯静态化的html页面，所以我们尽可能使我们的网站上的页面采用静态页面来实现，这个最简单的方法其实也是最有效的方法。但是对于大量内容并且频繁更新的网站，我们无法全部手动去挨个实现，于是出现了我们常见的信息发布系统CMS，像我们常访问的各个门户站点的新闻频道，甚至他们的其他频道，都是通过信息发布系统来管理和实现的，信息发布系统可以实现最简单的信息录入自动生成静态页面，还能具备频道管理、权限管理、自动抓取等功能，对于一个大型网站来说，拥有一套高效、可管理的CMS是必不可少的。</p>
<p>　　除了门户和信息发布类型的网站，对于交互性要求很高的社区类型网站来说，尽可能的静态化也是提高性能的必要手段，将社区内的帖子、文章进行实时的静态化，有更新的时候再重新静态化也是大量使用的策略，像Mop的大杂烩就是使用了这样的策略，网易社区等也是如此。目前很多博客也都实现了静态化，我使用的这个Blog程序WordPress还没有静态化，所以如果面对高负载访问，www.toplee.com一定不能承受 <img class="wp-smiley" alt=":)" src="http://www.toplee.com/blog/wp-includes/images/smilies/icon_smile.gif"> </p>
<p>　　同时，html静态化也是某些缓存策略使用的手段，对于系统中频繁使用数据库查询但是内容更新很小的应用，可以考虑使用html静态化来实现，比如论坛中论坛的公用设置信息，这些信息目前的主流论坛都可以进行后台管理并且存储再数据库中，这些信息其实大量被前台程序调用，但是更新频率很小，可以考虑将这部分内容进行后台更新的时候进行静态化，这样避免了大量的数据库访问请求。</p>
<p>　　在进行html静态化的时候可以使用一种折中的方法，就是前端使用动态实现，在一定的策略下进行定时静态化和定时判断调用，这个能实现很多灵活性的操作，我开发的台球网站故人居(<a href="http://www.8zone.cn/"><font color="#800080">www.8zone.cn</font></a>)就是使用了这样的方法，我通过设定一些html静态化的时间间隔来对动态网站内容进行缓存，达到分担大部分的压力到静态页面上，可以应用于中小型网站的架构上。故人居网站的地址：<a href="http://www.8zone.cn/"><font color="#800080">http://www.8zone.cn</font></a>，顺便提一下，有喜欢台球的朋友多多支持我这个免费网站:)</p>
<p><strong>2、图片服务器分离</strong><br />
　　大家知道，对于Web服务器来说，不管是Apache、IIS还是其他容器，图片是最消耗资源的，于是我们有必要将图片与页面进行分离，这是基本上大型网站都会采用的策略，他们都有独立的图片服务器，甚至很多台图片服务器。这样的架构可以降低提供页面访问请求的服务器系统压力，并且可以保证系统不会因为图片问题而崩溃。</p>
<p>　　在应用服务器和图片服务器上，可以进行不同的配置优化，比如Apache在配置ContentType的时候可以尽量少支持，尽可能少的LoadModule，保证更高的系统消耗和执行效率。</p>
<p>　　我的台球网站故人居<a href="http://www.8zone.cn/"><font color="#800080">8zone.cn</font></a>也使用了图片服务器架构上的分离，目前是仅仅是架构上分离，物理上没有分离，由于没有钱买更多的服务器:)，大家可以看到故人居上的图片连接都是类似img.9tmd.com或者img1.9tmd.com的URL。</p>
<p>　　另外，在处理静态页面或者图片、js等访问方面，可以考虑使用<a href="http://www.lighttpd.net/">lighttpd</a>代替Apache，它提供了更轻量级和更高效的处理能力。</p>
<p><strong>3、数据库集群和库表散列</strong><br />
　　大型网站都有复杂的应用，这些应用必须使用数据库，那么在面对大量访问的时候，数据库的瓶颈很快就能显现出来，这时一台数据库将很快无法满足应用，于是我们需要使用数据库集群或者库表散列。</p>
<p>　　在数据库集群方面，很多数据库都有自己的解决方案，Oracle、Sybase等都有很好的方案，常用的MySQL提供的Master/Slave也是类似的方案，您使用了什么样的DB，就参考相应的解决方案来实施即可。</p>
<p>　　上面提到的数据库集群由于在架构、成本、扩张性方面都会受到所采用DB类型的限制，于是我们需要从应用程序的角度来考虑改善系统架构，库表散列是常用并且最有效的解决方案。我们在应用程序中安装业务和应用或者功能模块将数据库进行分离，不同的模块对应不同的数据库或者表，再按照一定的策略对某个页面或者功能进行更小的数据库散列，比如用户表，按照用户ID进行表散列，这样就能够低成本的提升系统的性能并且有很好的扩展性。sohu的论坛就是采用了这样的架构，将论坛的用户、设置、帖子等信息进行数据库分离，然后对帖子、用户按照板块和ID进行散列数据库和表，最终可以在配置文件中进行简单的配置便能让系统随时增加一台低成本的数据库进来补充系统性能。</p>
<p><strong>4、缓存</strong><br />
　　缓存一词搞技术的都接触过，很多地方用到缓存。网站架构和网站开发中的缓存也是非常重要。这里先讲述最基本的两种缓存。高级和分布式的缓存在后面讲述。</p>
<p>　　架构方面的缓存，对Apache比较熟悉的人都能知道Apache提供了自己的mod_proxy缓存模块，也可以使用外加的Squid进行缓存，这两种方式均可以有效的提高Apache的访问响应能力。</p>
<p>　　网站程序开发方面的缓存，Linux上提供的<a href="http://www.danga.com/memcached/">Memcached</a>是常用的缓存方案，不少web编程语言都提供memcache访问接口，<a href="http://cn.php.net/memcached">php</a>、perl、c和java都有，可以在web开发中使用，可以实时或者Cron的把数据、对象等内容进行缓存，策略非常灵活。一些大型社区使用了这样的架构。</p>
<p>　　另外，在使用web语言开发的时候，各种语言基本都有自己的缓存模块和方法，PHP有<a href="http://pear.php.net/">Pear</a>的Cache模块和<a href="http://www.toplee.com/blog/?p=100">eAccelerator</a>加速和Cache模块，还要知名的Apc、XCache（国人开发的，支持！）php缓存模块，Java就更多了，.net不是很熟悉，相信也肯定有。</p>
<p><strong>5、镜像</strong><br />
　　镜像是大型网站常采用的提高性能和数据安全性的方式，镜像的技术可以解决不同网络接入商和地域带来的用户访问速度差异，比如ChinaNet和EduNet之间的差异就促使了很多网站在教育网内搭建镜像站点，数据进行定时更新或者实时更新。在镜像的细节技术方面，这里不阐述太深，有很多专业的现成的解决架构和产品可选。也有廉价的通过软件实现的思路，比如Linux上的rsync等工具。</p>
<p><strong>6、负载均衡</strong><br />
　　负载均衡将是大型网站解决高负荷访问和大量并发请求采用的终极解决办法。</p>
<p>　　负载均衡技术发展了多年，有很多专业的服务提供商和产品可以选择，我个人接触过一些解决方法，其中有两个架构可以给大家做参考。另外有关初级的负载均衡DNS轮循和较专业的CDN架构就不多说了。</p>
<p><strong>6.1 硬件四层交换</strong><br />
　　第四层交换使用第三层和第四层信息包的报头信息，根据应用区间识别业务流，将整个区间段的业务流分配到合适的应用服务器进行处理。　第四层交换功能就象是虚IP，指向物理服务器。它传输的业务服从的协议多种多样，有HTTP、FTP、NFS、Telnet或其他协议。这些业务在物理服务器基础上，需要复杂的载量平衡算法。在IP世界，业务类型由终端TCP或UDP端口地址来决定，在第四层交换中的应用区间则由源端和终端IP地址、TCP和UDP端口共同决定。</p>
<p>　　在硬件四层交换产品领域，有一些知名的产品可以选择，比如Alteon、F5等，这些产品很昂贵，但是物有所值，能够提供非常优秀的性能和很灵活的管理能力。Yahoo中国当初接近2000台服务器使用了三四台Alteon就搞定了。</p>
<p><strong>6.2 软件四层交换</strong><br />
　　大家知道了硬件四层交换机的原理后，基于OSI模型来实现的软件四层交换也就应运而生，这样的解决方案实现的原理一致，不过性能稍差。但是满足一定量的压力还是游刃有余的，有人说软件实现方式其实更灵活，处理能力完全看你配置的熟悉能力。</p>
<p>　　软件四层交换我们可以使用Linux上常用的LVS来解决，LVS就是Linux Virtual Server，他提供了基于心跳线heartbeat的实时灾难应对解决方案，提高系统的鲁棒性，同时可供了灵活的虚拟VIP配置和管理功能，可以同时满足多种应用需求，这对于分布式的系统来说必不可少。</p>
<p>　　一个典型的使用负载均衡的策略就是，在软件或者硬件四层交换的基础上搭建squid集群，这种思路在很多大型网站包括搜索引擎上被采用，这样的架构低成本、高性能还有很强的扩张性，随时往架构里面增减节点都非常容易。这样的架构我准备空了专门详细整理一下和大家探讨。</p>
<p>总结：<br />
　　对于大型网站来说，前面提到的每个方法可能都会被同时使用到，Michael这里介绍得比较浅显，具体实现过程中很多细节还需要大家慢慢熟悉和体会，有时一个很小的squid参数或者apache参数设置，对于系统性能的影响就会很大，希望大家一起讨论，达到抛砖引玉之效。</p>
<p>　　转载请保留出处：俊麟 Michael’s blog (http://www.toplee.com/blog/?p=71)<br />
</p></div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>115</wp:post_id>
		<wp:post_date><![CDATA[2007-04-11 15:46:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-04-11 15:46:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%af%b4%e8%af%b4%e5%a4%a7%e5%9e%8b%e9%ab%98%e5%b9%b6%e5%8f%91%e9%ab%98%e8%b4%9f%e8%bd%bd%e7%bd%91%e7%ab%99%e7%9a%84%e7%b3%bb%e7%bb%9f%e6%9e%b6%e6%9e%84]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>memcache的应用</title>
		<link>http://blog.00rz.com/2007/04/memcache%e7%9a%84%e5%ba%94%e7%94%a8.html</link>
		<pubDate>Wed, 11 Apr 2007 14:05:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=116</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p><strong><font size="4">phpmore第七期（memcache）</font></strong><br />
<br />
<font size="3"><strong>在phpmore杂志的第七期《memcache文章的简介》,此文章可以说是此篇文章的摘抄及总结。<br />
<br />
</strong></font></p>
<ol>
    <li><font size="4"><strong>用户通过浏览器访问Web服务器LAMP系统的情景描述</strong></font><br />
    <blockquote><font color="#ff0000"><strong>首先用户请求被发送到服务器,通过tcp协议访问到Apache进程，Apache从文件系统中加载PHP代码后，进行解析，并运行其命令，可能的操作是查询数据库得到数据，然后生成HTML返回给浏览器。</strong></font></blockquote></li>
    <li><font color="#ff0000"><font color="#000000"><font size="4"><strong>为什么要使用memcache?</strong></font><br />
    <br />
    </font></font><blockquote><strong><font color="#ff0000">在Web系统中，最容易产生瓶径的就是PHP查询数据库并返回结果的部份，常见的解决办法是除了对SQL查询语句进行优化，对数据库表添加必要的索引外，就是将数据库的查询缓存起来。它将有效的降低数据的压力。</font></strong></blockquote></li>
    <li><strong><font color="#ff0000"><font color="#000000" size="4">memcache简介？</font><br />
    </font></strong><blockquote><strong><font color="#ff0000">memcache是一高效、快速的分布式内存对象缓存系统，主要用于加速WEB动态应用程序</font></strong></blockquote></li>
    <li><font size="4"><strong>memcache的安装？</strong></font><br />
    <blockquote><strong><font color="#ff0000">首先是下载 memcached 了，目前最新版本是 1.1.12 ，直接从官方网站(http://www.danga.com/memcached/download.bml)即可下载到memcached-1.1.12.tar.gz 。除此之外， memcached 用到了 libevent ，我下载的是libevent-1.1a.tar.gz。接下来是分别将 libevent-1.1a.tar.gz 和 memcached-1.1.12.tar.gz 解开包、编译、安装安装完成之后，memcached 应该在 /usr/bin/memcached</font></strong></blockquote></li>
    <li><strong><font color="#000000" size="4">运行memcache守护程序</font></strong><br />
    <blockquote><strong><font color="#ff0000">运行 memcached 守护程序很简单，只需一个命令行即可，不需要修改任何配置文件<br />
    /usr/bin/memcached -d -m 128 -l 192.168.1.1 -p 11211 -u httpd<br />
    参数解释：<br />
    -d 以守护程序（daemon）方式运行 memcached；<br />
    -m 设置 memcached 可以使用的内存大小，单位为 M；<br />
    -l 设置监听的 IP 地址，如果是本机的话，通常可以不设置此参数；<br />
    -p 设置监听的端口，默认为 11211，所以也可以不设置此参数；<br />
    -u 指定用户，如果当前为 root 的话，需要使用此参数指定用户。<br />
    当然，还有其它参数可以用，man memcached 一下就可以看到了。</font></strong></blockquote></li>
    <li><font size="4"><strong>memcache工作原理？</strong></font><br />
    <blockquote><font color="#ff0000"><strong>首先 memcached 是以守护程序方式运行于一个或多个服务器中，随时接受客户端的连接操作，客户端可以由各种语言编写，目前已知的客户端 API 包括 Perl/PHP/Python/Ruby/Java/C#/C 等等。PHP 等客户端在与 memcached 服务建立连接之后，接下来的事情就是存取对象了，每个被存取的对象都有一个唯一的标识符 key，存取操作均通过这个 key 进行，保存到 memcached 中的对象实际上是放置内存中的，并不是保存在 cache 文件中的，这也是为什么 memcached 能够如此高效快速的原因。注意，这些对象并不是持久的，服务停止之后，里边的数据就会丢失。</strong></font></blockquote></li>
    <li><font size="4"><strong>如何使PHP作为memcached客户端？</strong></font><br />
    <blockquote><font color="#ff0000"><strong>有两种方法可以使 PHP 作为 memcached 客户端，调用 memcached 的服务进行对象存取操作。第一种，PHP 有一个叫做 memcache 的扩展，Linux 下编译时需要带上 &ndash;enable-memcache[=DIR]选项，Window 下则在 php.ini 中去掉 php_memcache.dll 前边的注释符，使其可用。除此之外， 还有一种方法，可以避开扩展、重新编译所带来的麻烦，那就是直接使用php-memcached-client。本文选用第二种方式，虽然效率会比扩展库稍差一些，但问题不大。</strong></font></blockquote></li>
    <li><font size="4"><strong>PHP memcached应用示例</strong></font><br />
    <blockquote><font color="#ff0000"><strong>首先 下载 memcached-client.php，在下载了 memcached-client.php 之后，就可以通过这个文件中的类&ldquo;memcached&rdquo;对 memcached 服务进行操作了。其实代码调用非常简单，主要会用到的方法有add()、get()、replace() 和 delete()，方法说明如下：<br />
    <? Text ?> - PHPMORE<br />
    add ($key, $val, $exp = 0)<br />
    往 memcached 中写入对象，$key 是对象的唯一标识符，$val 是写入的对象数据，$exp 为过期时间，单位为秒，默认为不限时间；<br />
    get ($key)<br />
    从 memcached 中获取对象数据，通过对象的唯一标识符 $key 获取；<br />
    replace ($key, $value, $exp=0)<br />
    使用 $value 替换 memcached 中标识符为 $key 的对象内容，参数与 add()方法一样，只有 $key 对象存在的情况下才会起作用；<br />
    delete ($key, $time = 0)<br />
    删除 memcached 中标识符为 $key 的对象，$time 为可选参数，表示删除之前需要等待多长时间。<br />
    <br />
    下面是一段简单的测试代码，代码中对标识符为 &lsquo;mykey&rsquo; 的对象数据进行存取操作：<br />
    // 包含 memcached 类文件<br />
    require_once(&lsquo;memcached-client.php&rsquo;);<br />
    // 选项设置<br />
    $options = array(<br />
    &rsquo;servers&rsquo; => array(&lsquo;192.168.1.1:11211′), //memcached 服务的地址、<br />
    端口，可用多个数组元素表示多个 memcached 服务<br />
    &lsquo;debug&rsquo; => true, //是否打开 debug<br />
    &lsquo;compress_threshold&rsquo; => 10240, //超过多少字节的数据时进行压缩<br />
    &lsquo;persistant&rsquo; => false //是否使用持久连接<br />
    );<br />
    // 创建 memcached 对象实例<br />
    $mc = new memcached($options);<br />
    // 设置此脚本使用的唯一标识符<br />
    $key = &lsquo;mykey&rsquo;;<br />
    // 往 memcached 中写入对象<br />
    $mc->add($key, &rsquo;some random strings&rsquo;);<br />
    $val = $mc->get($key);<br />
    echo &ldquo;n&rdquo;.str_pad(&lsquo;$mc->add() &rsquo;, 60, &lsquo;_&rsquo;).&ldquo;n&rdquo;;<br />
    var_dump($val);<br />
    // 替换已写入的对象数据值<br />
    $mc->replace($key, array(&rsquo;some&rsquo;=>&lsquo;haha&rsquo;, &lsquo;array&rsquo;=>&lsquo;xxx&rsquo;));<br />
    $val = $mc->get($key);<br />
    echo &ldquo;n&rdquo;.str_pad(&lsquo;$mc->replace() &rsquo;, 60, &lsquo;_&rsquo;).&ldquo;n&rdquo;;<br />
    var_dump($val);<br />
    // 删除 memcached 中的对象<br />
    $mc->delete($key);<br />
    $val = $mc->get($key);<br />
    echo &ldquo;n&rdquo;.str_pad(&lsquo;$mc->delete() &rsquo;, 60, &lsquo;_&rsquo;).&ldquo;n&rdquo;;<br />
    var_dump($val);<br />
    <br />
    在实际的应用中，通常会把数据库查询的结果集保存到memcache中，下次访问时直接从memcache中获取，而不在做数据库查询操作，这样就可以很大程度上减轻数据库的负担。通常会将sql语句MD5($sql)之后的值作为唯一的键值。</strong></font></blockquote></li>
    <li><font size="4"><strong>利用memcache来缓存数据库查询结果集的示例</strong></font><br />
    <blockquote><font color="#ff0000"><strong><? Code ?> - PHPMORE<br />
    $sql = &lsquo;SELECT * FROM users&rsquo;;<br />
    $key = md5($sql); //memcached 对象标识符<br />
    if ( !($datas = $mc->get($key)) ) {<br />
    // 在 memcached 中未获取到缓存数据，则使用数据库查询获取记录集。<br />
    echo &ldquo;n&rdquo;.str_pad(&lsquo;Read datas from MySQL.&rsquo;, 60, &lsquo;_&rsquo;).&ldquo;n&rdquo;;<br />
    $conn = mysql_connect(&lsquo;localhost&rsquo;, &lsquo;test&rsquo;, &lsquo;test&rsquo;);<br />
    mysql_select_db(&lsquo;test&rsquo;);<br />
    $result = mysql_query($sql);<br />
    while ($row = mysql_fetch_object($result))<br />
    $datas[] = $row;<br />
    // 将数据库中获取到的结果集数据保存到 memcached 中，以供下次访问时<br />
    使用。<br />
    $mc->add($key, $datas);<br />
    } else {<br />
    echo &ldquo;n&rdquo;.str_pad(&lsquo;Read datas from memcached.&rsquo;, 60, &lsquo;_&rsquo;).&ldquo;n&rdquo;;<br />
    }<br />
    var_dump($datas);</strong></font></blockquote></li>
    <li><font size="4"><strong>相关资源</strong></font><br />
    <blockquote><font color="#ff0000"><strong>memcached 官方网站]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>116</wp:post_id>
		<wp:post_date><![CDATA[2007-04-11 14:05:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-04-11 14:05:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[memcache%e7%9a%84%e5%ba%94%e7%94%a8]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>续memcache session</title>
		<link>http://blog.00rz.com/2007/04/%e7%bb%admemcache-session.html</link>
		<pubDate>Tue, 10 Apr 2007 19:58:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=117</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  >]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>117</wp:post_id>
		<wp:post_date><![CDATA[2007-04-10 19:58:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-04-10 19:58:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%bb%admemcache-session]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>Memcache存储的Session类</title>
		<link>http://blog.00rz.com/2007/04/memcache%e5%ad%98%e5%82%a8%e7%9a%84session%e7%b1%bb.html</link>
		<pubDate>Tue, 10 Apr 2007 19:58:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=118</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><table cellspacing="0" cellpadding="0" width="100%" border="0">
    <tbody>
        <tr>
            <td style="font-size: 12pt; padding-top: 10px" align="center" width="99%"> </td>
        </tr>
        <tr>
            <td style="border-bottom: #cccccc 1px solid" align="center" height="30"> </td>
        </tr>
        <tr>
            <td valign="top">
            <table style="margin-top: 8px" cellspacing="0" cellpadding="0" width="100%" border="0">
                <tbody>
                    <tr>
                        <td width="6"> </td>
                        <td>
                        <p><font color="#000000" size="2">使用基于文件的Session存取瓶颈可能都是在磁盘IO操作上，所以对付小数据量的Session没有问题，但是如果碰到大数据量的Sesstion，那么可能无法胜任，现在利用Memcache来保存Session数据，直接通过内存的方式，效率自然能够提高不少，并且如果结合PHP的Memcache扩展，能够支持分布式的Memcache服务器，那么这个性能就能够提到更高，负载更多更复杂的应用。</font></p>
                        <p><font size="2">说明：以下代码基于Memcache来保存Session数据，客户端必须安装有PHP的Memcache扩展，否则无法运行，同时本代码没有经过严格测试，只是作为学习代码。</font></p>
                        <p> </p>
                        <div style="border-right: windowtext 0.5pt solid; padding-right: 5.4pt; border-top: windowtext 0.5pt solid; padding-left: 5.4pt; background: #e6e6e6; padding-bottom: 4px; border-left: windowtext 0.5pt solid; width: 95%; word-break: break-all; padding-top: 4px; border-bottom: windowtext 0.5pt solid">
                        <div><span style="color: #000000"><?</span><span style="color: #000000">php<br />
                        </span><span style="color: #008000">//</span><span style="color: #008000">===========================================<br />
                        // 程序：Memcache-Based Session Class<br />
                        // 功能：基于Memcache存储的 Session 功能类<br />
                        // 作者: heiyeluren<br />
                        // 博客: http://blog.csdn.net/heiyeshuwu<br />
                        // 时间: 2006-12-23<br />
                        //===========================================</span><span style="color: #008000"><br />
                        </span><span style="color: #000000"><br />
                        <br />
                        </span><span style="color: #008000">/*</span><span style="color: #008000">*<br />
                        * 类名: FileSession Class<br />
                        * 功能: 自主实现基于Memcache存储的 Session 功能<br />
                        * 描述: 这个类就是实现Session的功能, 基本上是通过设置客户端的Cookie来保存SessionID,<br />
                        *]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>118</wp:post_id>
		<wp:post_date><![CDATA[2007-04-10 19:58:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-04-10 19:58:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[memcache%e5%ad%98%e5%82%a8%e7%9a%84session%e7%b1%bb]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>续</title>
		<link>http://blog.00rz.com/2007/04/%e7%bb%ad.html</link>
		<pubDate>Tue, 10 Apr 2007 19:47:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=119</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p><font size="4"><strong>【Memcache的扩展性】</strong></font></p>
<p>Memcache算是比较简洁高效的程序，Memcache 1.2.0 的源代码大小才139K，在Windows平台上是不可想象的，但是在开源世界来说，这是比较正常合理的。<br />
Memcache目前都只是比较简单的功能，简单的数据存取功能，我个人希望如果有识之士，能够在下面两方面进行扩展。</p>
<p><strong><font size="2">1. 日志功能</font></strong><br />
目前Memcache没有日志功能，只有一些命令在服务器端进行回显，这样是很不利于对一个服务器的稳定性和负载等等进行监控的，最好能够相应的加上日志的等功能，便于监控。</p>
<p><strong><font size="2">2. 存储结构</font></strong><br />
目前的数据形式就是: key => data 的形式，特别单一，只能够存储单一的一维数据，如果能够扩展的话，变成类似数据库的格式，能够存储二维数据，那样会让可以用性更强，使用面更广，当然相应的可能代码效率和存取效率更差一些。</p>
<p><strong><font size="2">3. 同步功能</font></strong><br />
数据同步是个比较重要的技术，因为谁都不能保证一台服务器是持久正常的运行的，如果能够具有类似MySQL的 Master/Slave 的功能，那么将使得Memcache的数据更加稳定，那么相应的就可以考虑存储持久一点的数据，并且不用害怕Memcache的down掉，因为有同步的备份服务器，这个问题就不是问题了。</p>
<p>以上三点只是个人拙见，有识之士和技术高手可以考虑。</p>
<p> </p>
<p><font size="4"><strong>【结束语】</strong></font></p>
<p>我上面的内容都只是自己安装和使用的一些想法，不能保证绝对正确，只是给需要的人一个参考，一个推广Memcache的文章，希望更多的人能够认识和了解这个技术，并且为自己所用。</p>
<p>我花费了整整一个晚上的时间洋洋洒洒的写了这么长，无非是对于这项开源技术的热爱，我想开源世界能够繁荣起来，就是源于大家的热爱并且愿意做出贡献，开源世界才这么精彩。</p>
<p>希望本文能够给需要的人一些帮助，希望不会误导他们，呵呵。<br />
</p>
<p><strong><font size="4"></font></strong></p>
<p><strong><font size="4">附加</font>：（我操作Memcache相应对应上面文章内容的图片） </strong></p>
<p><strong>[ 启动Memcache]<br />
<br />
<img alt="Memcache启动" src="http://p.blog.csdn.net/images/p_blog_csdn_net/heiyeshuwu/mem_start1.JPG"></strong></p>
<p><strong><br />
[ Memcache的PHP测试代码]</strong></p>
<p><img alt="代码" src="http://p.blog.csdn.net/images/p_blog_csdn_net/heiyeshuwu/mem_code.JPG"></p>
<p> </p>
<p><strong>[测试代码执行效果]</strong></p>
<p><img alt="浏览器效果" src="http://p.blog.csdn.net/images/p_blog_csdn_net/heiyeshuwu/mem_browser.JPG"></p>
<p> </p>
<p><strong>[ 通过Telnet连接到Memcache ]</strong></p>
<p><img alt="连接Memcache" src="http://p.blog.csdn.net/images/p_blog_csdn_net/heiyeshuwu/mem_cmd.JPG"></p>
<p><strong><br />
[ 基本的Memcache的数据存取协议交互]</strong></p>
<p><img alt="存取Memcache指令" src="http://p.blog.csdn.net/images/p_blog_csdn_net/heiyeshuwu/mem_cmd1.JPG"></p>
<p> </p>
<p><strong>[ Memcache状态信息协议交互]</strong></p>
<p><img alt="获取Memcache信息" src="http://p.blog.csdn.net/images/p_blog_csdn_net/heiyeshuwu/mem_cmd2.JPG"></p></div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>119</wp:post_id>
		<wp:post_date><![CDATA[2007-04-10 19:47:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-04-10 19:47:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%bb%ad]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>Memcache的使用和协议分析详解</title>
		<link>http://blog.00rz.com/2007/04/memcache%e7%9a%84%e4%bd%bf%e7%94%a8%e5%92%8c%e5%8d%8f%e8%ae%ae%e5%88%86%e6%9e%90%e8%af%a6%e8%a7%a3.html</link>
		<pubDate>Tue, 10 Apr 2007 19:45:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=120</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><em>作者：heiyeluren<br />
博客：</em><a href="http://blog.csdn.net/heiyeshuwu"><em>http://blog.csdn.net/heiyeshuwu</em></a><br />
<em>时间：2006-11-12<br />
关键字：PHP Memcache Linux 缓存</em>
<p><br />
Memcache是danga.com的一个项目，最早是为 LiveJournal 服务的，目前全世界不少人使用这个缓存项目来构建自己大负载的网站，来分担数据库的压力。（关于Memcache的更多信息请Google）<br />
Memcache官方网站：<a href="http://www.danga.com/memcached"><em><font color="#800080">http://www.danga.com/memcached</font></em></a></p>
<p><br />
<strong><font size="4">【安装Memcache服务器端】</font></strong></p>
<p>我目前的平台，服务器是Fedora Core 1（内核：2.4.22），客户端是Windows XP SP2，需要安装的就是服务器的Memcached的守护进程和客户端的PHP扩展php_memcache两个东西。现在我分别来讲。</p>
<p>服务器端主要是安装memcache服务器端，目前的最新版本是 memcached-1.2.0 。<br />
下载：<a href="http://www.danga.com/memcached/dist/memcached-1.2.0.tar.gz"><em><font color="#800080">http://www.danga.com/memcached/dist/memcached-1.2.0.tar.gz</font></em></a><br />
另外，Memcache用到了libevent这个库用于Socket的处理，所以还需要安装libevent，libevent的最新版本是libevent-1.2。（如果你的系统已经安装了libevent，可以不用安装）<br />
官网：<a href="http://www.monkey.org/~provos/libevent/"><em>http://www.monkey.org/~provos/libevent/</em></a><br />
下载：<a href="http://www.monkey.org/~provos/libevent-1.2.tar.gz"><em>http://www.monkey.org/~provos/libevent-1.2.tar.gz</em></a></p>
<p>我分别把两个东东下载回来，放到 /tmp 目录下：<br />
<font color="#0000ff"># cd /tmp<br />
# wget </font><a href="http://www.danga.com/memcached/dist/memcached-1.2.0.tar.gz"><font color="#0000ff">http://www.danga.com/memcached/dist/memcached-1.2.0.tar.gz</font></a><br />
<font color="#0000ff"># wget </font><a href="http://www.monkey.org/~provos/libevent-1.2.tar.gz"><font color="#0000ff">http://www.monkey.org/~provos/libevent-1.2.tar.gz</font></a></p>
<p>先安装libevent：<br />
<font color="#0000ff"># tar zxvf libevent-1.2.tar.gz<br />
# cd libevent-1.2<br />
# ./configure --prefix=/usr<br />
# make<br />
# make install</font></p>
<p>然后看看我们的libevent是否安装成功：<br />
<font color="#0000ff"># ls -al /usr/lib | grep libevent</font><br />
<font color="#993300">lrwxrwxrwx]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>120</wp:post_id>
		<wp:post_date><![CDATA[2007-04-10 19:45:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-04-10 19:45:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[memcache%e7%9a%84%e4%bd%bf%e7%94%a8%e5%92%8c%e5%8d%8f%e8%ae%ae%e5%88%86%e6%9e%90%e8%af%a6%e8%a7%a3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title></title>
		<link>http://blog.00rz.com/?p=209</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/?p=209</guid>
		<description></description>
		<content:encoded><![CDATA[ADDRESS_OR_OFFSET(%BASE_OR_OFFSET,%INDEX,MULTIPLIER)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>209</wp:post_id>
		<wp:post_date><![CDATA[2010-04-06 14:48:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>O&#039;Reilly.High.Performance.MySQL,2nd.Edition</title>
		<link>http://blog.00rz.com/?p=241</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/?p=241</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://blog.00rz.com/wp-content/uploads/2010/06/OReilly.High.Performance.MySQL2nd.Edition.pdf">O'Reilly.High.Performance.MySQL,2nd.Edition</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>241</wp:post_id>
		<wp:post_date><![CDATA[2010-06-03 16:29:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e7%94%b5%e5%ad%90%e4%b9%a6"><![CDATA[电子书]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>优化外部js(Optimizing External Javascript: Be Lazy, And Efficient）</title>
		<link>http://blog.00rz.com/?p=317</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/?p=317</guid>
		<description></description>
		<content:encoded><![CDATA[link: http://www.schillmania.com/content/entries/2009/defer-script-loading/
<h3>The Risks And Reality of Third-party Javascript</h3>
Ever had your site "broken" due to loading Javascript from a remote site that went down, effectively taking yours with it? Using third-party (remote) script references, security concerns aside, introduces a reliability risk and can effectively prevent your site from rendering, which happens more often than necessary - but is avoidable.

Web 1.0 dHTML!! (San Francisco, 2005 on flickr.com)
"DHTML" at the Web 1.0 summit, SF (2005)

With the current trend of web services springing up, there is no shortage of remote services driven by Javascript which you may want to add to your site via &lt;script&gt;. Web analytics, keyword and traffic services, commenting systems, bookmarking and JSON-formatted media feeds are a few common examples.
<h3>How &lt;script&gt; Can Break Your Site</h3>
Traditionally, a &lt;script&gt; node blocks (or "hangs") the browser while it is being processed, preventing the rest of the page from loading. Because document.write() or other javascript in the block may inject HTML into the document structure at parse time, browsers generally have to stop rendering in order to parse and evaluate the javascript block before continuing. This is undesirable.

Where this becomes particularly troublesome is when including third-party javascript, eg., a remote analytics service. If this resource were slow to load, became unavailable or went offline, your site would be frozen while the browser hangs on an unresponsive or broken connection. Numerous large sites including TechCrunch have been hit by, and reported on issues arising from third-party scripts. Unnecessary "downtime" due to a third party bit of Javascript is an embarrassing annoyance which, if tied to blocking issues, can be avoided.
<h3>Avoiding Site Hang-Ups</h3>
Sometimes, it's good to be lazy for the sake of performance. There are a few ways to work around the blocking nature of script elements which load slowly, or perhaps don't load at all, from both local and third-party sites.

The defer Attribute

Despite being criticized for their IE-only features, Microsoft have come up with a number of good ones over the years (eg. xmlHttpRequest, among others.) It appears they also thought of the script blocking issue, as well.

Internet Explorer has for years supported the defer attribute on &lt;script&gt; nodes, (reference) which instructs the browser to defer parse and execution of the script until a later time. This does not mean that script loading is deferred, so blocking of rendering may still occur even if the browser's "downloading and parsing" process is not interrupted.

&lt;script type="text/javascript" src="foo.js" defer="defer"&gt;&lt;/script&gt;

Deferring and document.write() calls are at odds with each other, so be careful when deferring scripts that use it.

Though not universally-supported yet, Firefox 3.1 is reported to be introducing support for defer, as Opera does. (Source) Opera 9.5 also has a "deferred script loading" user preference, disabled by default, which reportedly can defer and supports document.write() calls as well. (Source)

Performance gains can also be made by deferring script, as that the browser can focus on downloading content and doing layout before having to parse and execute potentially-expensive Javascript code which further modifies the DOM.

Load Javascript Using.. Javascript

Once the document has been parsed (DOMContentReady etc.) or within an inline script block, one may safely create and append &lt;script&gt; elements to the DOM dynamically via Javascript. Because the document has parsed and rendered, script requests no longer block rendering and their load, parse and execution are effectively deferred. This is safe provided that the code you're loading does not include use of document.write(), which will "blank" the page if called after parsing has completed.

Dynamically-loading Javascript example

Creating a script node, assigning the .src attribute and appending it to the document head. The script should be downloaded, parsed and executed immediately, as though it were referenced statically from HTML.
<pre lang="javascript">function loadScript(sURL) {
var oS = document.createElement('script');
oS.type = 'text/javascript';
oS.src = sURL;
document.getElementsByTagName('head')[0].appendChild(oS);
};</pre>
Dynamically-loading Javascript (with readyState handler)

Creating and appending a script node including an optional onload()-style event callback for when the script has loaded. This is useful in the case where you need to load a script which does not have a callback of its own (eg., code which defines a data structure but does not pass it to a predefined function.)

function loadScript(sURL,fOnLoad) {
function scriptOnload() {
this.onreadystatechange = null;
this.onload = null;
window.setTimeout(fOnLoad,20);
};
var loadScriptHandler = function() {
var rs = this.readyState;
if (rs == 'loaded' || rs == 'complete') {
scriptOnload();
}
};
var oS = document.createElement('script');
oS.type = 'text/javascript';
if (fOnLoad) {
// hook into both possible events
oS.onreadystatechange = loadScriptHandler;
oS.onload = scriptOnload;
};
oS.src = sURL;
document.getElementsByTagName('head')[0].appendChild(oS);
};

Cache Static Content Locally
This is self-explanatory, but is worth mentioning. If it's static content, why pull it from a remote source? It really should be served (and if possible, deferred) locally.

Is It Worth Doing?
Though defer and dynamic loading both make script behave asynchronously, the approach should be quite familiar to modern developers used to working with Ajax-style applications. Ultimately, this method trades a change in programming style for a more failure-proof method which can also improve initial page render and perceived performance.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>317</wp:post_id>
		<wp:post_date><![CDATA[2011-05-25 18:45:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[optimizing_external_javascript]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>dead</title>
		<link>http://blog.00rz.com/dead</link>
		<pubDate>Mon, 11 Mar 2013 06:11:55 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/wp-content/uploads/2013/03/dead.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>345</wp:post_id>
		<wp:post_date><![CDATA[2013-03-11 14:11:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-03-11 06:11:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[dead]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://blog.00rz.com/wp-content/uploads/2013/03/dead.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"640";s:6:"height";s:3:"478";s:14:"hwstring_small";s:23:"height='96' width='128'";s:4:"file";s:16:"2013/03/dead.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:16:"dead-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:16:"dead-300x224.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"224";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2013/03/dead.jpg]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>更新系统证书</title>
		<link>http://blog.00rz.com/?p=363</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/?p=363</guid>
		<description></description>
		<content:encoded><![CDATA[yum check-<wbr>update ca-certificates</wbr>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>363</wp:post_id>
		<wp:post_date><![CDATA[2018-02-23 16:13:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Symfony简介[转]</title>
		<link>http://blog.00rz.com/2007/05/symfony%e7%ae%80%e4%bb%8b%e8%bd%ac.html</link>
		<pubDate>Thu, 17 May 2007 10:17:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=87</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p style="text-align: left" align="left"><strong><span style="font-size: 18pt">Overview</span></strong></p>
<p style="text-align: left" align="left"><strong><span style="font-size: 18pt">概要</span></strong></p>
<p style="text-align: left" align="left"><span style="font-size: 12pt">Symfony is an object-oriented PHP5 framework based on the MVC model. Symfony allows for the separation of business rules, server logic and presentation views of a web application. It also contains numerous tools and classes aimed at shortening the development time of a complex web application.</span></p>
<p style="text-align: left" align="left"><span style="font-size: 12pt">Symfony</span><span style="font-size: 12pt">是一个基于<span>MVC</span>模型的面向对象的<span>PHP5</span>框架（<span>framework</span>）。<span>Symfony</span>可以帮助你将<span>web</span>应用程序的业务逻辑、服务器端逻辑和页面显示分开。它也包含了许多的工具和类，这些工具和类可以帮助你缩短开发复杂<span>web</span>应用程序的时间。</span></p>
<p style="text-align: left" align="left"><strong><span style="font-size: 18pt">What is a framework?</span></strong></p>
<p style="text-align: left" align="left"><strong><span style="font-size: 18pt">什么是框架（<span>framework</span>）？</span></strong></p>
<p style="text-align: left" align="left"><span style="font-size: 12pt">A framework adds new mechanisms on top of a programming language, and these mechanisms automate many of the development patterns used for a given purpose. A framework also adds structure to the code, and pushes the developer to write better, more readable and maintainable code. A framework also makes programming easier, since it packages complex operations into simple statements.</span></p>
<p style="text-align: left" align="left"><span style="font-size: 12pt">框架在编程语言之上替我们添加一些机制，这些机制可以帮助我们自动应用各种开发模式以更好的实现某些给定的开发目标。框架也会很好的架构我们的代码，推动开发者写出更好的、更易读的并且可维护的代码。由于框架将一些复杂操作封装在了一些简单的语句里，所以它可以使我们的开发更加简单。</span></p>
<p style="text-align: left" align="left"><span style="font-size: 12pt">A framework is usually developed with the same language that it extends. A PHP5 framework is a set of files written in PHP5.</span></p>
<p style="text-align: left" align="left"><span style="font-size: 12pt">由于框架的目的一般都是对所基于的编程语言进行一定扩展，所以它一般采用原编程语言，并且扩展之。一个<span>PHP5</span>的框架就是一批用<span>PHP5</span>写成的文件。</span></p>
<p style="text-align: left" align="left"><span style="font-size: 12pt">A framework will add layering to an application. In general, they divide applications in three layers:</span></p>
<p style="text-align: left" align="left"><span style="font-size: 12pt">框架一般都会将应用程序分层。一般来讲，它一般会将应用程序分为如下三层：</span></p>
<ul type="disc">
    <li style="text-align: left"><span style="font-size: 12pt">The <strong>presentation logic</strong> handles the interactions between the user and the software</span></li>
    <li style="text-align: left"><strong><span style="font-size: 12pt">表现层逻辑</span></strong><span style="font-size: 12pt">处理用户和应用程序之间的交互。</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">The <strong>data source logic</strong> carries the access to a database or other data providers</span></li>
    <li style="text-align: left"><strong><span style="font-size: 12pt">数据源逻辑</span></strong><span style="font-size: 12pt">处理所有与数据库或者其他数据提供者的交互。</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">The <strong>domain logic</strong>, or business logic, is the remaining piece. It involves calculation made on inputs, manipulation of data from the presentation, and dispatching of data source logic according to the commands received from the presentation.</span></li>
    <li style="text-align: left"><strong><span style="font-size: 12pt">领域逻辑</span></strong><span style="font-size: 12pt">，或者叫业务逻辑，这是留下来让你填写的地方。它包括计算用户输入，处理表现层的数据，根据表现层命令执行相应的数据源逻辑等。</span></li>
</ul>
<p style="text-align: left" align="left"><span style="font-size: 12pt">Web application frameworks intend to facilitate the development of... web applications (websites, Intranets, etc.). Building a basic dynamic website can be easily achieved with existing programming languages, and PHP is known for its simplicity and broadly adopted for that purpose. With PHP alone, you can already query a database, manage session cookies, access files in the server, etc. But when it comes to building a more complex website, where business logic increases the volume of code to maintain, the need of a web application framework arises.</span></p>
<p style="text-align: left" align="left"><span style="font-size: 12pt">Web</span><span style="font-size: 12pt">应用程序框架的目的就是想要简化各种<span>Web</span>应用程序的开发（包括网站，内网应用程序等）。用现存的编程语言当然可以比较轻松的建造基本的动态网站，比如<span>PHP</span>就是因其的简单性和广泛采用性而被大家所熟知。仅用<span>PHP</span>，你就可以查询数据库，管理<span>session cookies</span>，访问服务器上的文件，等等。但是，当你需要开发一个比较复杂的网站时，当由于业务代码的激增而导致有大量代码需要维护时，<span>web</span>应用程序框架的重要性就体现出来。</span></p>
<p style="text-align: left" align="left"><strong><span style="font-size: 18pt">What is symfony?</span></strong></p>
<p style="text-align: left" align="left"><strong><span style="font-size: 18pt">什么是<span>symfony</span>？</span></strong></p>
<p style="text-align: left" align="left"><span style="font-size: 12pt">Symfony is a complete framework designed to help and speedup the development of web applications.</span></p>
<p style="text-align: left" align="left"><span style="font-size: 12pt">Symfony</span><span style="font-size: 12pt">完全是为了帮助和加速<span>web</span>应用程序的开发而设计的。</span></p>
<p style="text-align: left" align="left"><span style="font-size: 12pt">It is based on the following concepts:</span></p>
<p style="text-align: left" align="left"><span style="font-size: 12pt">它基于如下的概念：</span></p>
<ul type="disc">
    <li style="text-align: left"><span style="font-size: 12pt">compatible with as many environments as possible</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">尽可能的兼容所有的应用环境</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">easy to install and configure</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">简单安装和配置</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">simple to learn</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">易于学习</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">enterprise ready</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">支持企业开发</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">convention rather than configuration, supporting fallback calls</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">依靠惯例而不是配置，<a><font color="#000000">支持回滚调用</font></a></span><span><span><!--[if !supportAnnotations]--><a href="http://blog.csdn.net/coofucoo/archive/2006/04/19/669749.aspx#_msocom_1" name="_msoanchor_1"><font color="#800080">[i1]</font></a><!--[endif]--><span> </span></span></span></li>
    <li style="text-align: left"><span style="font-size: 12pt">simple in most cases, but still flexible enough to adapt to complex cases</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">尽量使多数情况简单，但是当需要复杂时，依然能够支持</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">most common web features included</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">包括大多数通用的<span>web</span>特性</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">compliant with most of the web "best practices" and web "design patterns"</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">遵从大多数的<span>web</span>最佳实践和<span>web</span>设计模式</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">very readable code with easy maintenance</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">非常易读的代码，非常高的可维护性</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">open source</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">开源</span></li>
</ul>
<p style="text-align: left" align="left"><span style="font-size: 12pt">The main concept underlying the symfony framework is that the most common tasks are done automatically so that the developer can focus entirely on the specifics of an application. There is no need to reinvent the wheel every time a new web application is built.</span></p>
<p style="text-align: left" align="left"><span style="font-size: 12pt">隐藏在<span>symfony</span>框架背后的最重要的思想就是越多的普通的工作由计算机来自动完成，开发者就可以更加完全的投入自己的精力于应用程序中那些更需要投入精力的特殊的地方。每次打造一个新的<span>Web</span>应用时，你都不需要重新发明轮子了。</span></p>
<p style="text-align: left" align="left"><span style="font-size: 12pt">To fulfill these requirements, symfony was written entirely in <a href="http://www.php.net/manual/en/migration5.php">PHP5</a>. It has been thoroughly tested in various real world projects, and is actually in use for high demand e-business websites. It is compatible with most of the available databases, among which:</span></p>
<p style="text-align: left" align="left"><span style="font-size: 12pt">为了完成这样的需求，<span>symfony</span>全部是用<span>PHP5</span>编写的。他已经被各式各样的真实地项目所完全测试，并且已经在一些高要求的电子商务网站中应用。它可以兼容几乎所有已知的数据库，比如：</span></p>
<ul type="disc">
    <li style="text-align: left"><span style="font-size: 12pt">MySQL</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">PostgreSQL</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">Oracle</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">MSSQL</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">and any other database if a <a href="http://creole.phpdb.org/trac/">Creole</a> driver exists for it</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">任何其他的数据库，只要它具备<span><a href="http://creole.phpdb.org/trac/">Creole</a></span>驱动</span></li>
</ul>
<p style="text-align: left" align="left"><span style="font-size: 12pt">The symfony object model relies on three distinct layers:</span></p>
<p style="text-align: left" align="left"><span style="font-size: 12pt">Symfony</span><span style="font-size: 12pt">的对象模型依赖于如下三个独特的层次：</span></p>
<ul type="disc">
    <li style="text-align: left"><span style="font-size: 12pt">a database abstraction</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">一个数据库抽象层</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">an object-relational mapping </span></li>
    <li style="text-align: left"><span style="font-size: 12pt">一个对象<span>-</span>关系映射层</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">a Model-View-Controller model for the front and back-office </span></li>
    <li style="text-align: left"><span style="font-size: 12pt">一个<span>Model-View-Controller</span>模型用来支持前端和后端的应用</span></li>
</ul>
<p style="text-align: left" align="left"><span style="font-size: 12pt">Common features of web projects are made easy since Symfony natively automates them:</span></p>
<p style="text-align: left" align="left"><span style="font-size: 12pt">由于<span>Symfony</span>替你自动化了许多操作，所以一些通用的<span>Web</span>项目的特性将非常容易的被支持</span></p>
<ul type="disc">
    <li style="text-align: left"><span style="font-size: 12pt">internationalization</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">国际化</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">templating with helpers</span></li>
    <li style="text-align: left"><a><span style="font-size: 12pt"><font color="#000000">templating with helpers</font></span></a><span><span><!--[if !supportAnnotations]--><a href="http://blog.csdn.net/coofucoo/archive/2006/04/19/669749.aspx#_msocom_2" name="_msoanchor_2"><font color="#800080">[i2]</font></a><!--[endif]--><span> </span></span></span></li>
    <li style="text-align: left"><span style="font-size: 12pt">form validation</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">表单验证</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">cache management</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">缓存管理</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">shopping cart management</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">购物车管理</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">smart URLs</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">智能<span>URLs</span></span></li>
    <li style="text-align: left"><span style="font-size: 12pt">Scaffolding</span></li>
    <li style="text-align: left"><a><span style="font-size: 12pt"><font color="#000000">Scaffolding</font></span></a><span><span><!--[if !supportAnnotations]--><a href="http://blog.csdn.net/coofucoo/archive/2006/04/19/669749.aspx#_msocom_3" name="_msoanchor_3"><font color="#800080">[i3]</font></a><!--[endif]--><span> </span></span></span></li>
    <li style="text-align: left"><span style="font-size: 12pt">email sending</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">邮件发送</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">Pagination </span></li>
    <li style="text-align: left"><span style="font-size: 12pt">分页支持</span></li>
    <li style="text-align: left"><st1:city><st1:place><span style="font-size: 12pt">AJAX</span></st1:place></st1:city><span style="font-size: 12pt"> interactions</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">Ajax</span><span style="font-size: 12pt">式交互</span></li>
</ul>
<p style="text-align: left" align="left"><span style="font-size: 12pt">In addition, to fulfill the requirements of enterprises having their own coding guidelines and project management rules, symfony can be entirely reconfigured using <a href="http://www.yaml.org/">YAML</a> configuration files. It provides by default, several development environments, and is bundled with tools to easily achieve the following operations:</span></p>
<p style="text-align: left" align="left"><span style="font-size: 12pt">另外，由于企业开发有其自身的代码规范和项目管理规则，为了满足该需求，<span>symfony</span>可以用<span><a href="http://www.yaml.org/">YAML</a></span>配置文件来完全重新配置。一般的，它提供许多开发环境，并且绑定了一批工具来完成如下的操作：</span></p>
<ul type="disc">
    <li style="text-align: left"><span style="font-size: 12pt">prototyping</span></li>
    <li style="text-align: left"><a><span style="font-size: 12pt"><font color="#000000">prototyping</font></span></a><span><span><!--[if !supportAnnotations]--><a href="http://blog.csdn.net/coofucoo/archive/2006/04/19/669749.aspx#_msocom_4" name="_msoanchor_4"><font color="#800080">[i4]</font></a><!--[endif]--><span> </span></span></span></li>
    <li style="text-align: left"><span style="font-size: 12pt">content management</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">内容管理</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">live configuration changes</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">在线配置变更</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">deployment</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">部署</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">unit testing</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">单元测试</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">applicative testing</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">可用性测试</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">logging</span></li>
    <li style="text-align: left"><a><span style="font-size: 12pt"><font color="#000000">logging</font></span></a><span><span><!--[if !supportAnnotations]--><a href="http://blog.csdn.net/coofucoo/archive/2006/04/19/669749.aspx#_msocom_5" name="_msoanchor_5"><font color="#800080">[i5]</font></a><!--[endif]--><span> </span></span></span></li>
    <li style="text-align: left"><span style="font-size: 12pt">debugging</span></li>
    <li style="text-align: left"><span style="font-size: 12pt">调试</span></li>
</ul>
<p style="text-align: left" align="left"><span style="font-size: 12pt">Symfony uses some code fragments of other open source projects:</span></p>
<p style="text-align: left" align="left"><span style="font-size: 12pt">Symfony</span><span style="font-size: 12pt">采用了一些其他的开源项目的代码片断；</span></p>
<ul type="disc">
    <li style="text-align: left"><span style="font-size: 12pt"><a href="http://creole.phpdb.org/trac/">Creole</a>, for the database abstraction layer </span></li>
    <li style="text-align: left"><span style="font-size: 12pt"><a href="http://creole.phpdb.org/trac/">Creole</a></span><span style="font-size: 12pt">，为数据抽象层</span></li>
    <li style="text-align: left"><span style="font-size: 12pt"><a href="http://propel.phpdb.org/trac/">Propel</a>, for the object-relational mapping layer</span></li>
    <li style="text-align: left"><span style="font-size: 12pt"><a href="http://propel.phpdb.org/trac/">Propel</a></span><span style="font-size: 12pt">，为对象<span>-</span>关系映射层</span></li>
    <li style="text-align: left"><span style="font-size: 12pt"><a href="http://www.mojavi.org/">Mojavi</a>, for the Model-View-Controller model layer</span></li>
    <li style="text-align: left"><span style="font-size: 12pt"><a href="http://www.mojavi.org/">Mojavi</a></span><span style="font-size: 12pt">，为<span>Model-View-Controller</span>模型层</span></li>
</ul>
<p style="text-align: left" align="left"><strong><span style="font-size: 18pt">Is symfony made for me?</span></strong></p>
<p style="text-align: left" align="left"><strong><span style="font-size: 18pt">Symfony</span></strong><strong><span style="font-size: 18pt">适合我吗？</span></strong></p>
<p style="text-align: left" align="left"><span style="font-size: 12pt">Whether you are a PHP5 expert or a beginner in web application programming doesn't matter. The main factor that should direct your decision is the size of your project.</span></p>
<p style="text-align: left" align="left"><span style="font-size: 12pt">无论你是一个<span>PHP5</span>的高手或者是一个<span>Web</span>应用程序开发的初学者，都不要紧。决定<span>Symfony</span>是否适合你的关键因素是你需要开发的项目的大小。</span></p>
<p style="text-align: left" align="left"><span style="font-size: 12pt">If you want to develop a simple website with five to ten pages, having limited access to a database and no obligation for performance, availability or documentation, then you should stick with PHP alone. You wouldn't take much advantage of the features of a web application framework, and using object orientation or a MVC model would only slow down your development. Symfony is not optimized to run efficiently on a shared server with only CGI support.</span></p>
<p style="text-align: left" align="left"><span style="font-size: 12pt">如果你只是希望开发一个简单的只有<span>5</span>页或者<span>10</span>页的网站，仅仅需要简单的访问一下数据库，也不需要关注性能、可用性和文档化，那么你用<span>PHP</span>就可以了。这种情况即使你使用<span>web</span>应用程序框架也不会给你带来多大的好处。相反，面向对象的特性和<span>MVC</span>模型还有可能减慢你的开发。<a><font color="#000000"><span>Symfony</span>并不是为那些运行在共享服务器上，仅支持<span>CGI</span>的简单、高效应用而设计的。</font></a></span><span><span><!--[if !supportAnnotations]--><a href="http://blog.csdn.net/coofucoo/archive/2006/04/19/669749.aspx#_msocom_6" name="_msoanchor_6"><font color="#800080">[i6]</font></a><!--[endif]--><span> </span></span></span></p>
<p style="text-align: left" align="left"><span style="font-size: 12pt">On the other hand, if you develop bigger web applications, with a heavy business logic, PHP alone is not enough. If you plan to maintain or extend your application in the future, you will need your code to be lightweight, readable and performant. If you want to use the latest advances in user interaction (like <st1:city><st1:place>AJAX</st1:place></st1:city>) in an intuitive way, you can't just write hundreds of lines of Javascript. If you want to have fun and develop fast, then PHP alone will probably be disappointing. For all these cases, symfony is made for you.</span></p>
<p style="text-align: left" align="left"><span style="font-size: 12pt">反之，如果你正要开发一个较大型的项目，由大量的业务逻辑需要处理，那么仅仅有<span>PHP</span>就不够了。如果你打算在未来维护或者扩展你的应用程序，那么你需要让你的代码保持轻量级，可读并且高性能。如果你想用一种比较直接的方式采用一些最新技术在用户交互方面的优势，如<span>Ajax</span>，而不用编写成千上万行的<span>Javascript</span>代码。如果你想让开发高效并且充满乐趣，那么仅采用<span>PHP</span>进行开发将会令你失望。如果你碰到了上述所有情况的一种，那么，<span>symfony</span>就是为你而生的！</span></p>
<p style="text-align: left" align="left"><span style="font-size: 12pt">And of course, if you are a profesional web developer, you already know all the benefits of web application frameworks, and you need one which is mature, well documented, and with a large community. Search no more, for symfony is your solution.</span></p>
<p><span style="font-size: 12pt">当然，如果你是一个专业的<span>web</span>开发者，你当然已经知道了<span>web</span>应用程序框架的优势，你所需要的是一个成熟的，有良好文档支持的，有一个大型交互社区的框架。不用再寻找了，</span><span style="font-size: 12pt">symfony</span><span style="font-size: 12pt">就是合适你的解决方案<span>!</span></span></p>
<p> </p>
<p style="text-align: right" align="right"><span style="font-size: 12pt">Translated by coofucoo</span></p>
<p style="text-align: right" align="right"><st1:chsdate year="2006" month="4" day="19" islunardate="False" isrocdate="False"><span style="font-size: 12pt">4/19/2006</span></st1:chsdate></p>
<div>
<div>
<div>
<p> </p>
</div>
</div>
</div></div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>87</wp:post_id>
		<wp:post_date><![CDATA[2007-05-17 10:17:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-05-17 10:17:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[symfony%e7%ae%80%e4%bb%8b%e8%bd%ac]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>Zend Platform案例应用</title>
		<link>http://blog.00rz.com/2007/05/zend-platform%e6%a1%88%e4%be%8b%e5%ba%94%e7%94%a8.html</link>
		<pubDate>Thu, 17 May 2007 10:15:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=88</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><div>发布时间: 2006-11-15 15:51　　作者: PHPchina 　　信息来源: PHPchina</div>
<div>
<p> </p>
<p>Platform 是企业级<a target="_self" href=":;"><u><strong>PHP</strong></u></a>应用平台环境]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>88</wp:post_id>
		<wp:post_date><![CDATA[2007-05-17 10:15:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-05-17 10:15:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[zend-platform%e6%a1%88%e4%be%8b%e5%ba%94%e7%94%a8]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>教训</title>
		<link>http://blog.00rz.com/2007/05/%e6%95%99%e8%ae%ad.html</link>
		<pubDate>Wed, 16 May 2007 17:26:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=89</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p>今天突然遇到一个问题，用javascript 提交表单的时候怎么提交也提交不上去 结果在网上一查原来提交按钮[buuton]的名字不能为submit()]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>89</wp:post_id>
		<wp:post_date><![CDATA[2007-05-16 17:26:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-05-16 17:26:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%95%99%e8%ae%ad]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>理解PHP中的MVC之模型</title>
		<link>http://blog.00rz.com/2007/05/%e7%90%86%e8%a7%a3php%e4%b8%ad%e7%9a%84mvc%e4%b9%8b%e6%a8%a1%e5%9e%8b.html</link>
		<pubDate>Wed, 16 May 2007 10:42:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=90</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><h2>Implementing MVC in PHP: The Model</h2>
by <a href="http://www.onlamp.com/pub/au/1234">Joe Stump</a><br />
03/02/2006
<p>This article series (starting with <a href="http://www.onlamp.com/pub/a/php/2005/09/15/mvc_intro.html"><font color="#800080">Understanding MVC in PHP</font></a> and continued in <a href="http://www.onlamp.com/pub/a/php/2005/11/03/mvc_controller.html"><font color="#800080">Implementing MVC in PHP: The Controller</font></a> and <a href="http://www.onlamp.com/pub/a/php/2006/01/26/mvc_view.html"><font color="#800080">Implementing MVC in PHP: The View</font></a>) demonstrates how to build an MVC web framework using PHP 5. This article explains the Model part of Model-View-Controller design.</p>
<div class="adtag right" style="margin: 8px; width: 336px"><a target="_blank" href="http://ad.doubleclick.net/click;h=v8/3554/0/0/%2a/u;94292064;1-0;0;14651468;4252-336/280;19939645/19957539/1;;~aopt=2/0/ff/0;~sscs=%3fhttp://conferences.oreillynet.com/rails/"><img alt="Click here to find out more!" border="0" src="http://m1.2mdn.net/viewad/1319813/Rails07_general_336x280.jpg"></a></div>
<p>The Model is where the majority of the application's logic sits. It is where you run queries against the database and perform calculations on input. A good example of what a Model would look like is a simple login script. The login script gets user input from a form, validates it against the database, and then logs in the user.</p>
<p>The first application using the newly created framework will be the <code><font face="新宋体" color="#003366">users</font></code> module. I will be creating three Models:</p>
<ul>
    <li><em>login.php</em> validates input from a form against the database</li>
    <li><em>logout.php</em> logs a user out and destroys the associated session</li>
    <li><em>whoami.php</em> displays simple user information, similar to the Unix program of the same name</li>
</ul>
<p>Because I am introducing the idea of sessions and users into the framework, I will need to create a few more foundation classes as well as a table in a database. Before I go over the code of <em>login.php</em>, I'd like to walk through these classes.</p>
<h3><code><font face="新宋体" color="#003366">FR_Session</font></code></h3>
<p><code><font face="新宋体" color="#003366">FR_Session</font></code> is a wrapper for the built-in PHP sessions. The code isn't very involved and provides only basic support for starting, destroying, and writing sessions.</p>
<pre><code><font color="#003366"><?php

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>90</wp:post_id>
		<wp:post_date><![CDATA[2007-05-16 10:42:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-05-16 10:42:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%90%86%e8%a7%a3php%e4%b8%ad%e7%9a%84mvc%e4%b9%8b%e6%a8%a1%e5%9e%8b]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543640929]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Implementing MVC in PHP: The View</title>
		<link>http://blog.00rz.com/2007/05/implementing-mvc-in-php-the-view.html</link>
		<pubDate>Wed, 16 May 2007 10:39:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=91</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><h2>Implementing MVC in PHP: The View</h2>
by <a href="http://www.onlamp.com/pub/au/1234">Joe Stump</a><br />
01/26/2006
<p nd="2">This is the third article in a series about understanding MVC in PHP. The first article explained <a href="http://www.onlamp.com/pub/a/php/2005/09/15/mvc_intro.html"><font color="#800080">basics of MVC programming in PHP</font></a>. The second article showed the <a href="http://www.onlamp.com/php/2005/11/03/mvc_controller.html">implementation of the Controller in MVC</a>. The final article is <a href="http://www.onlamp.com/pub/a/php/2006/03/02/mvc_model.html">Implementing MVC in PHP: The Model</a>.</p>
<div class="adtag right" style="margin: 8px; width: 336px"><a target="_blank" href="http://ad.doubleclick.net/click;h=v8/3554/0/0/%2a/u;94292064;1-0;0;14651468;4252-336/280;19939645/19957539/1;;~aopt=2/0/ff/0;~sscs=%3fhttp://conferences.oreillynet.com/rails/"><img alt="Click here to find out more!" border="0" src="http://m1.2mdn.net/viewad/1319813/Rails07_general_336x280.jpg"></a></div>
<p nd="3">The presentation layer, as I call it, is the View, in common MVC terms. Its sole responsibility is to display information. It could care less about authenticating users, what the data is or, for the most part, where it came from. The only thing it has to worry about is how to render it and where to send it once rendered.</p>
<p nd="4">By default, the framework uses <a href="http://smarty.php.net/">Smarty</a> to render the framework. I'm not here to argue semantics, but your presentation layer should consist of a template engine of some sort and a few supporting presentation layers.</p>
<p nd="5">The idea is that, after the Model runs, the framework hands it off to a child of the <code><font face="新宋体" color="#003366">FR_Presenter_common</font></code> class. Actually, the framework uses the <code><font face="新宋体" color="#003366">FR_Presenter::factory()</font></code> to create the presenter. Each presenter should have a <code><font face="新宋体" color="#003366">display()</font></code> method that does the actual rendering. When the factory creates the presenter, it passes the presenter the instance of the model class. The presenter then gets the model's data using its <code><font face="新宋体" color="#003366">getData()</font></code> method. From there, the presenter is free to present that data however it sees fit.</p>
<h3><code><font face="新宋体" color="#003366">FR_Presenter_smarty</font></code></h3>
<p nd="6">The way I've created my Smarty presenter is a hybrid of two templates. I create a Smarty template, and the outer page template includes the model's template. The model class's <code><font face="新宋体" color="#003366">$pageTemplateFile</font></code> can request a particular outer template. If it does not, the default is <em>tpl/default/templates/page.tpl</em>. The <em>page.tpl</em> template then uses the <code><font face="新宋体" color="#003366">{$modulePath}</font></code> and <code><font face="新宋体" color="#003366">{$tplFile}</font></code> directives to include the model's template. All model templates should reside in <em>modules/example/tpl/</em>.</p>
<p nd="7">After assigning the variables, the controller runs Smarty's display function to render the templates. With little modification, you could wrap these calls with Smarty's built-in caching as well. By using Smarty, you could enable an output modifier to output <code><font face="新宋体" color="#003366">gzip</font></code>ped code instead of plain HTML.</p>
<pre><code><font color="#003366"><?php

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>91</wp:post_id>
		<wp:post_date><![CDATA[2007-05-16 10:39:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-05-16 10:39:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[implementing-mvc-in-php-the-view]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[6795653948]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>基于既定词表的自适应汉语分词技术研究 [转]</title>
		<link>http://blog.00rz.com/2007/05/%e5%9f%ba%e4%ba%8e%e6%97%a2%e5%ae%9a%e8%af%8d%e8%a1%a8%e7%9a%84%e8%87%aa%e9%80%82%e5%ba%94%e6%b1%89%e8%af%ad%e5%88%86%e8%af%8d%e6%8a%80%e6%9c%af%e7%a0%94%e7%a9%b6-%e8%bd%ac.html</link>
		<pubDate>Sun, 13 May 2007 17:10:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=92</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><table cellspacing="0" cellpadding="0" width="85%" border="0">
<tbody>
    <tr>
        <td class="logsSide" valign="top" align="left"><font color="#003333"><img height="1" src="http://www.blogbus.com/blogbus/blog/images/templates/neo_default/line_vb.gif" width="3"></font></td>
        <td class="logsMain" valign="top" align="left">
<div class="date">基于既定词表的自适应汉语分词技术研究</div>
        <p>黄水清]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>92</wp:post_id>
		<wp:post_date><![CDATA[2007-05-13 17:10:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-05-13 17:10:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%9f%ba%e4%ba%8e%e6%97%a2%e5%ae%9a%e8%af%8d%e8%a1%a8%e7%9a%84%e8%87%aa%e9%80%82%e5%ba%94%e6%b1%89%e8%af%ad%e5%88%86%e8%af%8d%e6%8a%80%e6%9c%af%e7%a0%94%e7%a9%b6-%e8%bd%ac]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>理解PHP中的MVC编程之控制</title>
		<link>http://blog.00rz.com/2007/05/%e7%90%86%e8%a7%a3php%e4%b8%ad%e7%9a%84mvc%e7%bc%96%e7%a8%8b%e4%b9%8b%e6%8e%a7%e5%88%b6.html</link>
		<pubDate>Fri, 11 May 2007 20:01:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=93</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  >简单来讲，控制器的作用就是接受请求。它使用获取的方法，在这里是通过URI，载入一个功能模块来刷新或者提交一个表述层。控制器将使用$_GET自动全局变量来判断载入哪一个模块。 <br />
<br />
　　一个请求的例子，看起来像这样：<br />
<br />
　　http://example.com/index.php?module=login<br />
<br />
　　这看起来很简单，但是在实现的过程中却不是。这里是几个控制器能识别的argument部分：<br />
<br />
　　module定义了使用哪一个模块，如users模块 <br />
　　class定义了使用哪一个功能类，如你想让用户login还是logout <br />
　　event定义了使用哪一个具体事件 <br />
<br />
　　这样一个更复杂的例子可以解释上面的各个argument最终组成的请求URL：<br />
<br />
　　http://example.com/index.php?module=users&class=login<br />
<br />
　　这段请求告诉控制器应该载入users模块，然后是login类，最后因为没有定义具体事件，所以运行login::__default()默认事件。<br />
<br />
　　以下是具体代码部分：<br />
<br />
<table bordercolor="#cccccc" width="90%" align="center" bgcolor="#e3e3e3" border="1">
    <tbody>
        <tr>
            <td>＜?php <br />
            　/**<br />
            　　* index.php<br />
            　　*<br />
            　　* @author Joe Stump ＜joe@joestump.net＞<br />
            　　* @copyright Joe Stump ＜joe@joestump.net＞<br />
            　　* @license http://www.opensource.org/licenses/gpl-license.php<br />
            　　* @package Framework<br />
            　*/ <br />
            <br />
            　require_once('config.php'); <br />
            <br />
            　// {{{ __autoload($class)<br />
            　/**<br />
            　　* __autoload<br />
            　　*<br />
            　　* Autoload is ran by PHP when it can't find a class it is trying to load.<br />
            　　* By naming our classes intelligently we should be able to load most classes<br />
            　　* dynamically.<br />
            　　*<br />
            　　* @author Joe Stump ＜joe@joestump.net＞<br />
            　　* @param string $class Class name we're trying to load<br />
            　　* @return void<br />
            　　* @package Framework<br />
            　*/<br />
            <br />
            　function __autoload($class)<br />
            　{<br />
            　　$file = str_replace('_','/',substr($class,2)).'.php'; <br />
            　　require_once(FR_BASE_PATH.'/includes/'.$file);<br />
            　}<br />
            　// }}} <br />
            <br />
            　if (isset($_GET['module'])) {<br />
            　　$module = $_GET['module'];<br />
            　　if (isset($_GET['event'])) {<br />
            　　　$event = $_GET['event'];<br />
            　　} else {<br />
            　　　$event = '__default';<br />
            　　} <br />
            <br />
            　if (isset($_GET['class'])) {<br />
            　　$class = $_GET['class'];<br />
            　} else {<br />
            　　$class = $module;<br />
            　} <br />
            <br />
            　$classFile = FR_BASE_PATH.'/modules/'.$module.'/'.$class.'.php';<br />
            　if (file_exists($classFile)) {<br />
            　　require_once($classFile);<br />
            　　if (class_exists($class)) {<br />
            　　　try {<br />
            　　　　$instance = new $class();<br />
            　　　　if (!FR_Module::isValid($instance)) {<br />
            　　　　　die("Requested module is not a valid framework module!");<br />
            　　　　} <br />
            <br />
            　　　　$instance-＞moduleName = $module;<br />
            　　　　if ($instance-＞authenticate()) {<br />
            　　　　　try {<br />
            　　　　　　$result = $instance-＞$event();<br />
            　　　　　　if (!PEAR::isError($result)) {<br />
            　　　　　　　$presenter = FR_Presenter::factory($instance-＞presenter,$instance); <br />
            <br />
            　　　　　　if (!PEAR::isError($presenter)) {<br />
            　　　　　　　$presenter-＞display();<br />
            　　　　　　} else {<br />
            　　　　　　　die($presenter-＞getMessage());<br />
            　　　　　　}<br />
            　　　　　}<br />
            　　　　} catch (Exception $error) {<br />
            　　　　　die($error-＞getMessage());<br />
            　　　　}<br />
            　　　} else {<br />
            　　　　die("You do not have access to the requested page!");<br />
            　　　}<br />
            　　} catch (Exception $error) { <br />
            　　　die($error-＞getMessage()); <br />
            　　}<br />
            　} else {<br />
            　　die("An valid module for your request was not found"); <br />
            　}<br />
            　} else {<br />
            　　die("Could not find: $classFile"); <br />
            　}<br />
            　} else {<br />
            　　die("A valid module was not specified");<br />
            } <br />
            <br />
            ?＞</td>
        </tr>
    </tbody>
</table>
<br />
　　接下来是以上代码具体的注释：<br />
<br />
　　载入&ldquo;config.php&rdquo; <br />
<br />
　　定义__autoload()函数。这是PHP5里面的一个新函数，方便动态地载入各个类。 <br />
<br />
　　如果一个argument被定义，那么载入相关的模块、类和具体事件 <br />
<br />
　　接下来就是一些判断以及错误的具体操作 <br />
<br />
　　最后一切无误后就载入表述层 <br />
<br />
　　<strong>【友好URL】</strong><br />
<br />
　　如果你觉得上面例子讲到的请求URL让你觉得不舒服的话，那么就用mod_rewrite来实现友好URL吧。接下来是作者给这个框架写的实际重写标准代码：<br />
<br />
<table bordercolor="#cccccc" width="90%" align="center" bgcolor="#e3e3e3" border="1">
    <tbody>
        <tr>
            <td>RewriteEngine On<br />
            <br />
            # Change the URI here to whatever you want your homepage to be<br />
            <br />
            RewriteRule ^/$ /index.php?module=welcome [L,QSA]<br />
            <br />
            # Changes /index.php?module=welcome to /welcome<br />
            <br />
            RewriteCond %{DOCUMENT_ROOT}/%{REQUEST_FILENAME} !-d<br />
            <br />
            RewriteCond %{DOCUMENT_ROOT}/%{REQUEST_FILENAME} !-f<br />
            <br />
            RewriteRule ^/([^/]*)$ /index.php?module=$1 [L,QSA]<br />
            <br />
            # Changes /index.php?module=users&class=login to /users/login<br />
            <br />
            RewriteCond %{DOCUMENT_ROOT}/%{REQUEST_FILENAME} !-d<br />
            <br />
            RewriteCond %{DOCUMENT_ROOT}/%{REQUEST_FILENAME} !-f<br />
            <br />
            RewriteRule ^/([^/]*)/([^/]*)$ /index.php?module=$1&class=$2 [L,QSA]<br />
            <br />
            # Changes /index.php?module=users&class=login&event=foo<br />
            <br />
            # to /users/login/foo.html<br />
            <br />
            RewriteCond %{DOCUMENT_ROOT}/%{REQUEST_FILENAME} !-d<br />
            <br />
            RewriteCond %{DOCUMENT_ROOT}/%{REQUEST_FILENAME} !-f<br />
            <br />
            RewriteRule ^/([^/]*)/([^/]*)/([^/]*).html$ \<br />
            <br />
            /index.php?module=$1&class=$2&event=$3 [L,QSA] <br />
            <br />
            Extending the Controller</td>
        </tr>
    </tbody>
</table>
<br />
　　<strong>【扩展控制器】</strong><br />
<br />
　　拥有一个集中控制器的一点好处就是你加入一些功能后，马上就能通过控制器体现出来。以下是几个可以扩展一下这个控制器的点子，使这个框架的整体能力更加强大：<br />
　<br />
　　你可以使用PHP5里一个新东西SoapServer来自动检测一个请求是否为SOAP <br />
<br />
　　你可以使用控制器来过滤所有的自动全局变量如$_GET和$_POST以防止恶意HTML代码等 <br />
<br />
　　你可以使用控制器即时地转换表述层，比如从默认的方式转到PDF方式<br />
<br />
　　你可以直接在控制器中加入缓存机制，这样的好处是应用程序整体都能使用到缓存以提高效率 <br />
<br />
　　当然，需要注意一点的是，你在控制器中所增加的功能将体现在程序全局。如你想过滤所有的自动全局变量，但是很多应用程序的管理员需要使用到一些HTML代码，反而成为一件棘手的事情（译者注：本人的想法是可以加一个if条件语句，在加载特定模块时不应用过滤功能即可）。<br />
(本文被浏览次数： 11 )</div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>93</wp:post_id>
		<wp:post_date><![CDATA[2007-05-11 20:01:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-05-11 20:01:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%90%86%e8%a7%a3php%e4%b8%ad%e7%9a%84mvc%e7%bc%96%e7%a8%8b%e4%b9%8b%e6%8e%a7%e5%88%b6]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543640932]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>理解PHP中的MVC编程之MVC框架简介</title>
		<link>http://blog.00rz.com/2007/05/%e7%90%86%e8%a7%a3php%e4%b8%ad%e7%9a%84mvc%e7%bc%96%e7%a8%8b%e4%b9%8bmvc%e6%a1%86%e6%9e%b6%e7%ae%80%e4%bb%8b.html</link>
		<pubDate>Fri, 11 May 2007 20:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=94</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><table cellspacing="0" cellpadding="0" width="100%" border="0">
    <tbody>
        <tr>
            <td align="center" width="99%" height="40"> </td>
        </tr>
        <tr>
            <td style="border-bottom: #dddddd 1px solid" align="center" height="30">来源/作者：PHP5研究室 Joe Stump <font color="#666666">2006-08-22</font> [</td>
        </tr>
        <tr>
            <td valign="top" height="300">
            <table style="margin-top: 8px" cellspacing="0" cellpadding="0" width="100%" border="0">
                <tbody>
                    <tr align="right">
                        <td colspan="2" height="2"> </td>
                    </tr>
                    <tr>
                        <td width="8" height="226"> </td>
                        <td>　<strong>【什么是MVC？】</strong> <br />
                        <br />
                        　　MVC是一个可以让你把&ldquo;三个部分（即MVC的全称，Model、View、Controller）&rdquo;谐调地组成一个复杂应用程序的概念。一辆汽车就是一个在现实生活中非常好的MVC例子。我们看车都看两个View（显示）部分：内部和外部。而这两个都离不开一个Controller（控制者）：司机。刹车系统、方向盘和其他操控系统代表了Model（模型）：他们从司机（Controller）那里取得控制方法然后应用到内部和外观（View）。 <br />
                        <br />
                        　　<strong>【网络上的MVC】<br />
                        </strong><br />
                        　　MVC框架所涵盖的概念相当简单并且极度灵活。基本的概念就是，你有一个单独的控制器（如index.php）用来控制所有建立在参数请求基础上的框架内应用程序。这个控制器通常包含了（最小程度上）一个定义模型的参数、一个事件和一个GET参数。这样控制器就能确认所有的请求然后运行相应的事件。打个比方来说，一个像这样/index.php?module=foo&event=bar的请求很有可能就是用来载入一个名叫foo的类，然后运行foo::bar()[就是其中的bar()函数]。这样做的好处有：<br />
                        <br />
                        　　一个对应所有应用程序的接口 <br />
                        <br />
                        　　同时维护一个应用程序内无数的代码非常麻烦，因为每一段代码都有自己的相对路径、数据库链接、验证等等。而这样做就免除你在这方面的烦恼，允许你合并并重复使用代码 <br />
                        <br />
                        　　<strong>【为什么要创建作者自己的MVC框架？】</strong><br />
                        <br />
                        　　迄今为止，我没有见到过太多用PHP写的MVC框架。事实上我仅仅知道一个－Solar，是完全用PHP5写的。另外一个是Cake，一个试图成为PHP的RoR（Ruby on Rails－一个Ruby语言开源网络框架）。我自己对这两个框架都有一些不满意的地方：它们都没有利用到PEAR，Smarty等所包含的现有代码；现在的Cake还比较紊乱；最后，Solar是一个绝大部分由一个人写的作品（我无意说其作者Paul不是一个好人或者好程序员）。这些问题可能并不会让你否认它们，而且很有可能你根本不关心这些问题。但是正因为如此，我请各位尽可能地审视它们。 <br />
                        <br />
                        　　<strong>【老方式】</strong><br />
                        <br />
                        　　如果回到2001看自己写的代码，作者有可能找到一个叫template.txt的文件，它看起来像这样：www.phpv.net 转载请注明出处<br />
                        <br />
                        <table bordercolor="#cccccc" width="90%" align="center" bgcolor="#e3e3e3" border="1">
                            <tbody>
                                <tr>
                                    <td>＜?php <br />
                                    　require_once('config.php'); // Other requires, DB info, etc. <br />
                                    <br />
                                    　$APP_DB = 'mydb';<br />
                                    　$APP_REQUIRE_LOGIN = false; // Set to true if script requires login<br />
                                    　$APP_TEMPLATE_FILE = 'foo.php'; // Smarty template<br />
                                    　$APP_TITLE = 'My Application'; <br />
                                    <br />
                                    　if ($APP_REQUIRE_LOGIN == true) {<br />
                                    　　if (!isset($_SESSION['userID'])) {<br />
                                    　　　header("Location: /path/to/login.php");<br />
                                    　　　exit();<br />
                                    　　}<br />
                                    　} <br />
                                    <br />
                                    　$db = DB::connect('mysql://'.$DB_USER.':'.$DB_PASS.'@localhost/'.$APP_DB);<br />
                                    　if (!PEAR::isError($db)) {<br />
                                    　　$db-＞setFetchMode(DB_FETCHMODE_ASSOC);<br />
                                    　} else {<br />
                                    　　die($db-＞getMessage());<br />
                                    　} <br />
                                    <br />
                                    　// Put your logic here <br />
                                    　// Output the template<br />
                                    <br />
                                    　include_once(APP_TEMPLATE_PATH.'/header.php');<br />
                                    　include_once(APP_TEMPLATE_PATH.'/'.$APP_TEMPLATE_FILE);<br />
                                    　include_once(APP_TEMPLATE_PATH.'/footer.php'); <br />
                                    ?＞</td>
                                </tr>
                            </tbody>
                        </table>
                        <br />
                        　　天哪，只是看这些代码都会让我有退缩的欲望。这段代码的概念就是确保每一个应用程序都能适用于这个处理方法，比如我可以简单地将template.txt拷进myapp.php，改变一些变量，瞧，它就能运行起来了。尽管如此，这个组织严密的处理方法存在一些严重的缺点：<br />
                        <br />
                        　　如果我的老板想让作者用myapp.php在一些情况下输出PDF、一些情况下输出HTML、一些情况下（直接提交的XML请求）SOAP，我该怎么办？ <br />
                        <br />
                        　　如果这个应用程序需要IMAP或LDAP验证，我该怎么办？ <br />
                        <br />
                        　　我该如何处理各种不同的代码（包括编辑、升级和删除）？ <br />
                        <br />
                        　　我该如何处理多级验证（管理员 vs. 非管理员）？ <br />
                        我该如何启用输出缓存？www.phpv.net 转载请注明出处 <br />
                        <br />
                        　　<strong>【新方式】</strong><br />
                        <br />
                        　　将所有东西都扔进这个MVC框架，你会发现生活是如此简单。请对比以下代码：<br />
                        <br />
                        <table bordercolor="#cccccc" width="90%" align="center" bgcolor="#e3e3e3" border="1">
                            <tbody>
                                <tr>
                                    <td>＜?php <br />
                                    　class myapp extends FR_Auth_User<br />
                                    　{<br />
                                    　　public function __construct()<br />
                                    　　{<br />
                                    　　　parent::__construct();<br />
                                    　　} <br />
                                    <br />
                                    　public function __default()<br />
                                    　{<br />
                                    　　// Do something here<br />
                                    　} <br />
                                    <br />
                                    　public function delete()<br />
                                    　{ } <br />
                                    <br />
                                    　public function __destruct()<br />
                                    　{<br />
                                    　　parent::__destruct();<br />
                                    　}<br />
                                    } <br />
                                    <br />
                                    ?＞</td>
                                </tr>
                            </tbody>
                        </table>
                        <br />
                        　　注意这段代码显然不是用来链接到一个数据库、判断一个用户是否已经登陆、或者输出任何其他信息。控制器掌握了所有的一切。 <br />
                        <br />
                        　　如果我想验证LDAP，我可以建立FR_Auth_LDAP。控制器可以识别某些输出方法（比如$_GET['output']）并可以随时转换成PDF或者SOAP。事件处理delete，只负责删除，其他的它都不管。因为这个模块拥有一个FR_User类的实例，它可以简单地判断一个用户是否已经登陆等等。Smarty，作为模板引擎控制缓存是理所当然的，但是控制器同样可以控制一部分缓存。 <br />
                        <br />
                        　　从前面讲的老方式到MVC方式对于很多人来讲可能是一个全新、陌生的概念，但是一旦你转换到了这样一个概念，那么要转回去将是件相当困难的事情。 <br />
                        　<strong>【建立底层】</strong><br />
                        <br />
                        　　我是一个PEAR尤其是PEAR_Error类的爱好者。PHP5引入了一个新的内建类&ldquo;Exception&rdquo; 取代了PEAR_Error。但是PEAR_Error拥有一些比Exception还要实用的特性。所以，在此系列文章中的MVC框架实例将用到它来做错误处理。无论如何，我还是要用到Exception获得从构造器中的错误，因为它们本身不能传回错误。<br />
                        <br />
                        　　设计这些基础类的目的有如下几点： <br />
                        <br />
                        　　利用PEAR快速添加功能到基础类 <br />
                        <br />
                        　　建立小巧、可反复实用的抽象类以便让使用者在此框架中快速开发出应用程序 <br />
                        <br />
                        　　用phpDocumentor给所有的基础类生成文档 <br />
                        <br />
                        　　类的层次看起来会像这样： <br />
                        <br />
                        　　-FR_Object将会提供基础的功能以供其他所有对象使用（包括logging，一般的setFrom()，toArray()）<br />
                        <br />
                        　　-FR_Object_DB是一个小层面，给子类提供数据库链接等功能<br />
                        <br />
                        　　-FR_Module是所有应用（又称模块、模型等等）的底层类<br />
                        <br />
                        　　-FR_Auth是所有验证机制的底层类<br />
                        <br />
                        　　　·FR_Auth_User是一个验证类，用来验证所有需要验证用户是否登陆的模块<br />
                        <br />
                        　　　·FR_Auth_No是所有不需要验证的模块的&ldquo;假验证类&rdquo;<br />
                        <br />
                        　　-FR_Presenter是所有用来处理载入和显示应用的底层类<br />
                        <br />
                        　　-FR_Presenter_Smarty是包含了载入不同驱动器能力的显示层。Smarty是一个非常好的模板类，它拥有内建的缓存机制以及一个活跃的开发团体（译者注：这分明就是打广告嘛～）<br />
                        <br />
                        　　　·FR_Presenter_debug是调试部分的显示层。依靠它，开发者能够调试应用程序并给他们除错<br />
                        <br />
                        　　　·FR_Presenter_rest是一个可以让开发者能够以XML方式输出应用程序的REST显示层<br />
                        <br />
                        　　从以上的基础类结构上，你应该可以看到这个MVC框架的不同部分。FR_Module提供所有模块所需要的东西，而FR_Presenter则提供不同的显示方法。在此系列文章中的下一篇中，我将创建控制器将这上面所有的基础类结合在一块。 <br />
                        <br />
                        　　<strong>【代码标准】</strong><br />
                        <br />
                        　　在你正式编写代码之前，应该坐下来跟你的合伙人（或者你自己）好好讨论（或思考）一下代码标准。MVC编程的整体思想围绕着两点：代码的可再利用性（减少偶合）和代码的标准化。我推荐至少应该考虑到如下几点：<br />
                        <br />
                        　　首先要考虑的是变量命名和缩写标准。不要因为这个跟你的合作伙伴大吵一通，但是一旦定下来的标准，就要自始至终地遵从，尤其是写底层代码（基础类）的时候。 <br />
                        <br />
                        　　定制一个标准前缀，用在所有的函数、类和全局变量上。不走运的是，PHP不支持&ldquo;namespace（命名空间）&rdquo;。所以要想避免混淆变量名和发生的冲突，用一个前缀是个明智的做法。我在整篇文章中将使用&ldquo;FR_&rdquo;作为这样的前缀。 <br />
                        <br />
                        　　<strong>【编写底层】<br />
                        </strong><br />
                        　　文件层次规划很重要。基本的层次规划很简单且在一定程度上是严格定义的：<br />
                        <br />
                        <table bordercolor="#cccccc" width="90%" align="center" bgcolor="#e3e3e3" border="1">
                            <tbody>
                                <tr>
                                    <td>/ <br />
                                    config.php <br />
                                    index.php <br />
                                    includes/ <br />
                                    Auth.php <br />
                                    Auth/ <br />
                                    No.php <br />
                                    User.php <br />
                                    Module.php <br />
                                    Object.php <br />
                                    Object/ <br />
                                    DB.php <br />
                                    Presenter.php <br />
                                    Presenter/ <br />
                                    common.php <br />
                                    debug.php <br />
                                    smarty.php <br />
                                    Smarty/ <br />
                                    modules/ <br />
                                    example/ <br />
                                    config.php <br />
                                    example.php <br />
                                    tpl/ <br />
                                    example.tpl <br />
                                    tpl/ <br />
                                    default/ <br />
                                    cache/ <br />
                                    config/ <br />
                                    templates/ <br />
                                    templates_c/</td>
                                </tr>
                            </tbody>
                        </table>
                        <br />
                        　　你可能会想这样的文件层次肯定代表了很多的代码！没错，但是你能够完成它的。在整个系列结束后，你会发现你的编程将会变得更简单并且开发速度会得到很大的提升。<br />
                        <br />
                        　　在文件层次里面，所有的基础类都在includes文件夹内。每一个功能模块，都用一个配置文件，至少一个模块文件和一个模板文件。所有的模块包含在modules文件夹内。我已经习惯了将模板文件放在单独的外部文件夹内，也就是tpl文件夹。<br />
                        <br />
                        　　config.php－中枢配置文件，包含所有的全局配置变量。<br />
                        <br />
                        　　index.php－控制器，在接下来的一篇文章中会详细叙述。<br />
                        <br />
                        　　object.php－所有基础类的底层类，提供绝大部分类需要的功能。FR_Object_DB继承这个类并提供数据库链接。<br />
                        <br />
                        　　结构的基本概念就是，让所有的子类都继承一个中枢类以便它们都共享一些共同的特性。你完全可以把链接数据库的功能放进FR_Object，但是并不是所有类都需要这个功能的，所以FR_Object_DB就有了存在的理由，作者会稍后做出讨论它。<br />
                        <br />
                        <table bordercolor="#cccccc" width="90%" align="center" bgcolor="#e3e3e3" border="1">
                            <tbody>
                                <tr>
                                    <td>＜?php <br />
                                    　require_once('Log.php'); <br />
                                    <br />
                                    　/**<br />
                                    　* FR_Object<br />
                                    　*<br />
                                    　* The base object class for most of the classes that we use in our framework.<br />
                                    　* Provides basic logging and set/get functionality.<br />
                                    　*<br />
                                    　* @author Joe Stump ＜joe@joestump.net＞<br />
                                    　* @package Framework<br />
                                    　*/<br />
                                    <br />
                                    　abstract class FR_Object<br />
                                    　{<br />
                                    　　/**<br />
                                    　　* $log<br />
                                    　　*<br />
                                    　　* @var mixed $log Instance of PEAR Log <br />
                                    　　*/<br />
                                    <br />
                                    　　protected $log; <br />
                                    　　/**<br />
                                    　　* $me<br />
                                    　　*<br />
                                    　　* @var mixed $me Instance of ReflectionClass<br />
                                    　　*/<br />
                                    <br />
                                    　　protected $me; <br />
                                    　　/**<br />
                                    　　* __construct<br />
                                    　　* <br />
                                    　　* @author Joe Stump ＜joe@joestump.net＞<br />
                                    　　* @access public <br />
                                    　　*/<br />
                                    <br />
                                    　　public function __construct()<br />
                                    　　{<br />
                                    　　　$this-＞log = Log::factory('file',FR_LOG_FILE);<br />
                                    　　　$this-＞me = new ReflectionClass($this);<br />
                                    　　} <br />
                                    <br />
                                    　　/**<br />
                                    　　* setFrom<br />
                                    　　*<br />
                                    　　* @author Joe Stump ＜joe@joestump.net＞<br />
                                    　　* @access public<br />
                                    　　* @param mixed $data Array of variables to assign to instance<br />
                                    　　* @return void<br />
                                    　　*/<br />
                                    <br />
                                    　public function setFrom($data)<br />
                                    　{<br />
                                    　　if (is_array($data) && count($data)) {<br />
                                    　　　$valid = get_class_vars(get_class($this));<br />
                                    　　　foreach ($valid as $var =＞ $val) {<br />
                                    　　　　if (isset($data[$var])) {<br />
                                    　　　　　$this-＞$var = $data[$var];<br />
                                    　　　　}<br />
                                    　　　}<br />
                                    　　}<br />
                                    　} <br />
                                    <br />
                                    　/**<br />
                                    　* toArray<br />
                                    　*<br />
                                    　* @author Joe Stump ＜joe@joestump.net＞<br />
                                    　* @access public<br />
                                    　* @return mixed Array of member variables keyed by variable name<br />
                                    　*/<br />
                                    <br />
                                    　public function toArray()<br />
                                    　{<br />
                                    　　$defaults = $this-＞me-＞getDefaultProperties();<br />
                                    　　$return = array();<br />
                                    　　foreach ($defaults as $var =＞ $val) {<br />
                                    　　　if ($this-＞$var instanceof FR_Object) {<br />
                                    　　　　$return[$var] = $this-＞$var-＞toArray();<br />
                                    　　　} else {<br />
                                    　　　　$return[$var] = $this-＞$var;<br />
                                    　　　}<br />
                                    　　}<br />
                                    <br />
                                    　　return $return;<br />
                                    　} <br />
                                    <br />
                                    　/**<br />
                                    　* __destruct<br />
                                    　*<br />
                                    　* @author Joe Stump ＜joe@joestump.net＞<br />
                                    　* @access public<br />
                                    　* @return void<br />
                                    　*/<br />
                                    <br />
                                    　public function __destruct()<br />
                                    　{<br />
                                    　　if ($this-＞log instanceof Log) {<br />
                                    　　　$this-＞log-＞close();<br />
                                    　　}<br />
                                    　}<br />
                                    } <br />
                                    <br />
                                    ?＞</td>
                                </tr>
                            </tbody>
                        </table>
                        <br />
                        　　 auth.php－这是所有验证功能的底层类。它是从FR_Module里面延伸出来的，主要功能是定义一个基本的验证类如何工作。<br />
                        <br />
                        　　跟FR_Module的道理一样，有些类不需要链接到数据库，那么同理，FR_Auth_No就可以被创建应用到不需要验证功能的类上。<br />
                        <br />
                        <table bordercolor="#cccccc" width="90%" align="center" bgcolor="#e3e3e3" border="1">
                            <tbody>
                                <tr>
                                    <td>＜?php <br />
                                    　abstract class FR_Auth extends FR_Module<br />
                                    　{<br />
                                    　　// {{{ __construct()<br />
                                    　　function __construct()<br />
                                    　　{<br />
                                    　　　parent::__construct();<br />
                                    　　}<br />
                                    　　// }}}<br />
                                    　　// {{{ authenticate()<br />
                                    　　　abstract function authenticate();<br />
                                    　　// }}}<br />
                                    <br />
                                    　　// {{{ __destruct()<br />
                                    <br />
                                    　　　function __destruct()<br />
                                    　　　{<br />
                                    　　　　parent::__destruct();<br />
                                    　　　}<br />
                                    　　// }}}<br />
                                    　} <br />
                                    <br />
                                    ?＞ <br />
                                    <br />
                                    module.php－所有模块的心脏<br />
                                    <br />
                                    ＜?php <br />
                                    　abstract class FR_Module extends FR_Object_Web<br />
                                    　{<br />
                                    　　// {{{ properties<br />
                                    　　/**<br />
                                    　　* $presenter<br />
                                    　　*<br />
                                    　　* Used in FR_Presenter::factory() to determine which presentation (view)<br />
                                    　　* class should be used for the module.<br />
                                    　　*<br />
                                    　　* @author Joe Stump ＜joe@joestump.net＞<br />
                                    　　* @var string $presenter <br />
                                    　　* @see FR_Presenter, FR_Presenter_common, FR_Presenter_smarty<br />
                                    　　*/<br />
                                    　　public $presenter = 'smarty'; <br />
                                    　　/**<br />
                                    　　* $data<br />
                                    　　*<br />
                                    　　* Data set by the module that will eventually be passed to the view.<br />
                                    　　*<br />
                                    　　* @author Joe Stump ＜joe@joestump.net＞<br />
                                    　　* @var mixed $data Module data<br />
                                    　　* @see FR_Module::set(), FR_Module::getData()<br />
                                    　　*/<br />
                                    <br />
                                    　　protected $data = array(); <br />
                                    <br />
                                    　　/**<br />
                                    　　* $name<br />
                                    　　*<br />
                                    　　* @author Joe Stump ＜joe@joestump.net＞<br />
                                    　　* @var string $name Name of module class<br />
                                    　　*/<br />
                                    <br />
                                    　　public $name; <br />
                                    <br />
                                    　　/**<br />
                                    　　* $tplFile<br />
                                    　　*<br />
                                    　　* @author Joe Stump ＜joe@joestump.net＞<br />
                                    　　* @var string $tplFile Name of template file<br />
                                    　　* @see FR_Presenter_smarty<br />
                                    　　*/<br />
                                    <br />
                                    　　public $tplFile; <br />
                                    <br />
                                    　　/**<br />
                                    　　* $moduleName<br />
                                    　　*<br />
                                    　　* @author Joe Stump ＜joe@joestump.net＞<br />
                                    　　* @var string $moduleName Name of requested module<br />
                                    　　* @see FR_Presenter_smarty<br />
                                    　　*/<br />
                                    <br />
                                    　　public $moduleName = null; <br />
                                    　　/**<br />
                                    　　* $pageTemplateFile<br />
                                    　　*<br />
                                    　　* @author Joe Stump ＜joe@joestump.net＞<br />
                                    　　* @var string $pageTemplateFile Name of outer page template<br />
                                    　　*/<br />
                                    <br />
                                    　　public $pageTemplateFile = null;<br />
                                    　　// }}}<br />
                                    <br />
                                    　　// {{{ __construct()<br />
                                    　　/**<br />
                                    　　* __construct<br />
                                    　　* <br />
                                    　　* @author Joe Stump ＜joe@joestump.net＞<br />
                                    　　*/<br />
                                    <br />
                                    　　public function __construct()<br />
                                    　　{<br />
                                    　　　parent::__construct();<br />
                                    　　　$this-＞name = $this-＞me-＞getName();<br />
                                    　　　$this-＞tplFile = $this-＞name.'.tpl';<br />
                                    　　}<br />
                                    <br />
                                    　　// }}}<br />
                                    　　// {{{ __default()<br />
                                    <br />
                                    　　/**<br />
                                    　　* __default<br />
                                    　　*<br />
                                    　　* This function is ran by the controller if an event is not specified<br />
                                    　　* in the user's request.<br />
                                    　　*<br />
                                    　　* @author Joe Stump ＜joe@joestump.net＞<br />
                                    　　*/<br />
                                    <br />
                                    　　abstract public function __default();<br />
                                    　　// }}}<br />
                                    　　// {{{ set($var,$val)<br />
                                    <br />
                                    　　/**<br />
                                    　　* set<br />
                                    　　*<br />
                                    　　* Set data for your module. This will eventually be passed toe the<br />
                                    　　* presenter class via FR_Module::getData().<br />
                                    　　*<br />
                                    　　* @author Joe Stump ＜joe@joestump.net＞<br />
                                    　　* @param string $var Name of variable<br />
                                    　　* @param mixed $val Value of variable<br />
                                    　　* @return void<br />
                                    　　* @see FR_Module::getData()<br />
                                    　　*/<br />
                                    <br />
                                    　　protected function set($var,$val) {<br />
                                    　　　$this-＞data[$var] = $val; <br />
                                    　　}<br />
                                    　　// }}}<br />
                                    　　// {{{ getData()<br />
                                    <br />
                                    　　/**<br />
                                    　　* getData<br />
                                    　　*<br />
                                    　　* Returns module's data. <br />
                                    　　*<br />
                                    　　* @author Joe Stump ＜joe@joestump.net＞<br />
                                    　　* @return mixed<br />
                                    　　* @see FR_Presenter_common<br />
                                    　　*/<br />
                                    <br />
                                    　　public function getData()<br />
                                    　　{<br />
                                    　　　return $this-＞data;<br />
                                    　　}<br />
                                    　　// }}}<br />
                                    　　// {{{ isValid($module)<br />
                                    <br />
                                    　　/**<br />
                                    　　* isValid<br />
                                    　　*<br />
                                    　　* Determines if $module is a valid framework module. This is used by<br />
                                    　　* the controller to determine if the module fits into our framework's<br />
                                    　　* mold. If it extends from both FR_Module and FR_Auth then it should be<br />
                                    　　* good to run.<br />
                                    　　*<br />
                                    　　* @author Joe Stump ＜joe@joestump.net＞<br />
                                    　　* @static<br />
                                    　　* @param mixed $module<br />
                                    　　* @return bool<br />
                                    　　*/<br />
                                    <br />
                                    　　public static function isValid($module)<br />
                                    　　{<br />
                                    　　　return (is_object($module) && <br />
                                    　　　$module instanceof FR_Module && <br />
                                    　　　$module instanceof FR_Auth);<br />
                                    　　}<br />
                                    　　// }}}<br />
                                    　　// {{{ __destruct()<br />
                                    <br />
                                    　　public function __destruct()<br />
                                    　　{<br />
                                    　　　parent::__destruct();<br />
                                    　　}<br />
                                    　　// }}}<br />
                                    　} <br />
                                    ?＞ <br />
                                    <br />
                                    presenter.php－表述层的核心。<br />
                                    <br />
                                    ＜?php <br />
                                    　class FR_Presenter<br />
                                    　{<br />
                                    　　// {{{ factory($type,FR_Module $module)<br />
                                    　　/**<br />
                                    　　* factory　　<br />
                                    　　*<br />
                                    　　* @author Joe Stump ＜joe@joestump.net＞<br />
                                    　　* @access public<br />
                                    　　* @param string $type Presentation type (our view)<br />
                                    　　* @param mixed $module Our module, which the presenter will display<br />
                                    　　* @return mixed PEAR_Error on failure or a valid presenter<br />
                                    　　* @static<br />
                                    　　*/<br />
                                    <br />
                                    　　static public function factory($type,FR_Module $module)<br />
                                    　　{<br />
                                    　　　$file = FR_BASE_PATH.'/includes/Presenter/'.$type.'.php';<br />
                                    　　　if (include($file)) {<br />
                                    　　　　$class = 'FR_Presenter_'.$type;<br />
                                    　　　　if (class_exists($class)) {<br />
                                    　　　　　$presenter = new $class($module);<br />
                                    　　　　　if ($presenter instanceof FR_Presenter_common) {<br />
                                    　　　　　　return $presenter;<br />
                                    　　　　　} <br />
                                    　　　　　return PEAR::raiseError('Invalid presentation class: '.$type);<br />
                                    　　　　} <br />
                                    　　　　return PEAR::raiseError('Presentation class not found: '.$type);<br />
                                    　　　} <br />
                                    　　　return PEAR::raiseError('Presenter file not found: '.$type);<br />
                                    　　}<br />
                                    　　// }}}<br />
                                    　} <br />
                                    <br />
                                    ?＞</td>
                                </tr>
                            </tbody>
                        </table>
                        <br />
                        　　下一篇里，我将介绍控制器（MVC中的Controller，本文的index.php）的构造。第三篇里，我将介绍表述层（MVC里面的View）。第四篇里，我将用具体模块为例建立一个应用（MVC里面的Module或Model）。</td>
                    </tr>
                </tbody>
            </table>
            </td>
        </tr>
    </tbody>
</table></div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>94</wp:post_id>
		<wp:post_date><![CDATA[2007-05-11 20:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-05-11 20:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%90%86%e8%a7%a3php%e4%b8%ad%e7%9a%84mvc%e7%bc%96%e7%a8%8b%e4%b9%8bmvc%e6%a1%86%e6%9e%b6%e7%ae%80%e4%bb%8b]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[6795664688]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>魔术方法 __sleep 和 __wakeup</title>
		<link>http://blog.00rz.com/2007/05/%e9%ad%94%e6%9c%af%e6%96%b9%e6%b3%95-__sleep-%e5%92%8c-__wakeup.html</link>
		<pubDate>Tue, 08 May 2007 11:32:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=95</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><strong>__sleep 和 <var class="literal">__wakeup</var></strong> 
<p><a href="http://www.phpe.net/manual/function.serialize.php"><strong>serialize()</strong></a><strong> 检查类中是否有魔术名称 <var class="literal">__sleep</var> 的函数。如果这样，该函数将在任何序列化之前运行。它可以清除对象并应该返回一个包含有该对象中应被序列化的所有变量名的数组。 </strong></p>
<p><strong>使用 <var class="literal">__sleep</var> 的目的是关闭对象可能具有的任何数据库连接，提交等待中的数据或进行类似的清除任务。此外，如果有非常大的对象而并不需要完全储存下来时此函数也很有用。 </strong></p>
<p><strong>相反地，</strong><a href="http://www.phpe.net/manual/function.unserialize.php"><strong>unserialize()</strong></a><strong> 检查具有魔术名称 <var class="literal">__wakeup</var> 的函数的存在。如果存在，此函数可以重建对象可能具有的任何资源。 </strong></p>
<p><strong>使用 <var class="literal">__wakeup</var> 的目的是重建在序列化中可能丢失的任何数据库连接以及处理其它重新初始化的任务。</strong> </p></div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>95</wp:post_id>
		<wp:post_date><![CDATA[2007-05-08 11:32:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-05-08 11:32:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%ad%94%e6%9c%af%e6%96%b9%e6%b3%95-__sleep-%e5%92%8c-__wakeup]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>php 关于类的一些方法(魔术方法)</title>
		<link>http://blog.00rz.com/2007/05/php-%e5%85%b3%e4%ba%8e%e7%b1%bb%e7%9a%84%e4%b8%80%e4%ba%9b%e6%96%b9%e6%b3%95%e9%ad%94%e6%9c%af%e6%96%b9%e6%b3%95.html</link>
		<pubDate>Tue, 08 May 2007 11:28:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=96</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p><strong>1，__construct() 构造方法 当实例化一个对象的时候，这个对象的这个方法首先被调用。</strong></p>
<p><strong>2,__destruct()]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>96</wp:post_id>
		<wp:post_date><![CDATA[2007-05-08 11:28:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-05-08 11:28:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[php-%e5%85%b3%e4%ba%8e%e7%b1%bb%e7%9a%84%e4%b8%80%e4%ba%9b%e6%96%b9%e6%b3%95%e9%ad%94%e6%9c%af%e6%96%b9%e6%b3%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>当我在爱你的时候</title>
		<link>http://blog.00rz.com/2007/05/%e5%bd%93%e6%88%91%e5%9c%a8%e7%88%b1%e4%bd%a0%e7%9a%84%e6%97%b6%e5%80%99.html</link>
		<pubDate>Wed, 02 May 2007 10:56:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=97</guid>
		<description></description>
		<content:encoded><![CDATA[当我在爱上你的时候，
我不希望你自己一个人走，
陪在你的左右，牵着你的小手。

明亮的路灯是见证，
天上的星星也点头。
想你高高的鼻子，带着卷发的头。

剩下的路，
我陪你走。
不希望你皱眉，不希望你挠头
如果有危险
我在你左不是在你右。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>97</wp:post_id>
		<wp:post_date><![CDATA[2007-05-02 10:56:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-05-02 10:56:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%bd%93%e6%88%91%e5%9c%a8%e7%88%b1%e4%bd%a0%e7%9a%84%e6%97%b6%e5%80%99]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>[转]UML辅助网站规划和设计指南【二】</title>
		<link>http://blog.00rz.com/2007/04/%e8%bd%acuml%e8%be%85%e5%8a%a9%e7%bd%91%e7%ab%99%e8%a7%84%e5%88%92%e5%92%8c%e8%ae%be%e8%ae%a1%e6%8c%87%e5%8d%97%e3%80%90%e4%ba%8c%e3%80%91.html</link>
		<pubDate>Sat, 28 Apr 2007 14:58:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=98</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><strong>3.3 应用部署的规划</strong>
<p>　　正如本文前面&ldquo;工具选择&rdquo;部分所提到的，大多数<a target="_blank" href="http://dev.21tx.com/web/"><font color="#3366cc">Web</font></a><nobr><a class="iAs" style="color: #6600ff; border-bottom: #6600ff 0px dotted; background-color: transparent; text-decoration: underline" target="_blank"><font color="#6600ff">网站</font></a></nobr>的体系结构并不复杂。尽管如此，部署图（Deployment Diagram）在两个方面仍旧很有用：网站结构，文件组织。对于文件组织，前面讨论界面规划时已经提到它也可以用类建模工具进行规划。下面给出一个简单的构件图供参考，但根据网站的需要和复杂程度的不同，你可能不需要它。</p>
<p> </p>
<center><img src="http://image.21tx.com/image/20021203/10108.gif"><br />
<br />
图8：构件图 </center>
<p> </p>
　　<strong>3.4 设计原则</strong>
<p>　　<a target="_blank" href="http://dev.21tx.com/softengine/uml/"><font color="#3366cc">UML</font></a>只是一个工具。如果使用得法，UML能够帮助我们轻松地构造出更好的网站。然而，要<nobr><a class="iAs" style="color: #6600ff; border-bottom: #6600ff 1px dotted; background-color: transparent; text-decoration: underline" target="_blank"><font color="#6600ff">设计</font></a></nobr>出优秀的网站，关键仍在于要有一个好的设计原则或理念。</p>
<p>　　&ldquo;提高类的内聚力，减少不同类之间的联系&rdquo;这一点在谈到好的面向对象设计原则时经常被反复引用。一个内聚的类包含那些在目标和作用域上都紧密相关的行为和信息。它意味着你不应该把构造UI的代码和实现<nobr><a class="iAs" style="color: #6600ff; border-bottom: #6600ff 1px dotted; background-color: transparent; text-decoration: underline" target="_blank"><font color="#6600ff">数学</font></a></nobr>算法的代码混合到一起，你应该尽力把所有与用户紧密相关的信息封装到UserAccount类。内聚式设计是一个重要的设计原则，原因有很多：它有助于减少类之间的依赖关系，使得设计更直观、更容易理解，方便了向其他开发者介绍整个设计，减少了开发者同一时刻需要操作的类的数量，等等。例如，如果你要改变网站的用户身份验证机制，只修改单个文件中的一个类无疑要比修改多个文件、多个类更加方便。</p>
<p>　　&ldquo;减少不同类之间的联系&rdquo;意味着使类或者文件之间的交互减到最少。它不仅使得整个设计容易理解，而且也方便了代码的维护。请考虑下面这个例子：</p>
<p> </p>
<center><img src="http://image.21tx.com/image/20021203/10229.gif"><br />
<br />
图9：设计实例A </center>
<p> </p>
<p>　　除非深入了解了上述各个类的用途，要估计这些类的内聚程度是不可能的。然而，从这些类之间的关系可以看出，这个设计方案已经成功地减少了不同类之间的联系。类之间的交互被减到了最少，从而使得<nobr><a class="iAs" style="color: #6600ff; border-bottom: #6600ff 1px dotted; background-color: transparent; text-decoration: underline" target="_blank"><font color="#6600ff">系统</font></a></nobr>的行为很容易理解。更重要的是，修改任意一个类时受影响的类数量都减到了最少（例如，修改D类只直接影响B类）。另外，要访问D类中的功能，我们无需知道任何有关E、F或G类的情况。作为比较，请考虑下图：</p>
<p> </p>
<center><img src="http://image.21tx.com/image/20021203/10202.gif"><br />
<br />
图10 设计实例B </center>
<p> </p>
<p>　　显然，在这个设计实例中，类之间的联系是相当紧密的。一旦对D1类作了修改，为了检查这种修改对其他类的影响，我们必须对其他类进行广泛的测试。</p>
<p>　　只有在<nobr><a class="iAs" style="color: #6600ff; border-bottom: #6600ff 1px dotted; background-color: transparent; text-decoration: underline" target="_blank"><font color="#6600ff">实践</font></a></nobr>中不断锻炼才能避免出现过于复杂的设计，但注意以下几点有助于达到这一目标：</p>
<p> </p>
<ul>
    <li>提高类的内聚力。不要把密切相关的功能分散到多个文件和类之中。</li>
    <li>采用直观、有意义的名字。如果其他人不能了解类、函数或者变量的作用，不管类的结构是多么完美，整个设计仍缺乏直观性。过多地采用缩写词会影响设计的可理解性。</li>
    <li>不要害怕改写代码。有些时候，在几个类之间移动一些函数能够大大地简化代码。</li>
    <li>类应该保持紧凑、简洁。代码膨胀是类缺乏内聚力的一种征兆。过于庞大的类、模块或者文件往往缺乏明确的用途和目标。</li>
    <li>让其他人复查你的设计。其他人可能有新的想法，或者为你指出你以为显而易见但别人却不能明白的问题。</li>
    <li>在早期设计阶段不要考虑太多的性能问题。与一个笨拙的、为了昨天所出现的问题而优化的设计相比，一个简洁、经过精心调整的设计更容易进行性能优化。注意这并不是建议把性能问题抛到脑后，而是建议把细节优化问题留到工程后期考虑。</li>
</ul>
<p> </p>
　　<strong>四、UML工具 </strong>
<p>　　下面是一些值得考虑的UML建模工具：</p>
<p> </p>
<ul>
    <li>Microsoft Visio：Visio Professional 2000现在开始提供内建的UML支持。如果考虑Visio绘图工具的其他各种用途，这是一个相当有价值的工具。如果你使用2000以前的版本，你可以在这里找到Visio Stencil and Template for UML。</li>
    <li>Rational Rose：这是一个推荐使用的工具，但对于许多小型Web工程来说它显得很昂贵。有了Rational Rose这样的工具，改进和维护设计、从模型生成报表、在平行协作环境中与他人共同进行建模工作就很方便了。</li>
    <li>MagicDraw：一个基于<a target="_blank" href="http://dev.21tx.com/java/"><font color="#3366cc">Java</font></a>的廉价UML建模工具。</li>
    <li>Together：与C/<a target="_blank" href="http://dev.21tx.com/"><font color="#3366cc">C++</font></a>和Java联系密切，支持UML建模。</li>
    <li>Objecteering UML：一个免费的个人UML产品。</li>
    <li>System Architect：一个很受欢迎的高端UML建模工具，支持双向工程（Round-trip Engineering）。</li>
</ul>
<p> </p>
<strong>　　五、附录：常用UML符号和参考资源</strong>
<p>　　下面这个表格简要介绍了常用的UML符号和关系。要了解有关UML概念和各种面向对象术语的详细说明，请参见后面的参考资源。</p>
<p>
<table cellspacing="0" cols="2" bordercolordark="#ffffff" cellpadding="5" width="90%" align="center" bordercolorlight="#000000" border="1" rows="17">
    <tbody>
        <tr align="center">
            <td bgcolor="#dbdbdb">符号</td>
            <td bgcolor="#dbdbdb">说明</td>
        </tr>
        <tr>
            <td align="center"><img height="47" width="71" src="http://image.21tx.com/image/20021203/10187.gif"></td>
            <td>Package<br />
            包。用来聚集和组织<nobr><a class="iAs" style="color: #6600ff; border-bottom: #6600ff 1px dotted; background-color: transparent; text-decoration: underline" target="_blank"><font color="#6600ff">模型</font></a></nobr>中的一个部分（Use Case，类，等等）。</td>
        </tr>
        <tr>
            <td align="center"><img height="65" width="43" src="http://image.21tx.com/image/20021203/10103.gif"></td>
            <td>Actor<br />
            参与者。它代表一个用户或者其他外部的激励器。</td>
        </tr>
        <tr>
            <td align="center"><img height="153" width="108" src="http://image.21tx.com/image/20021203/10178.gif"></td>
            <td>Use Case<br />
            用例。Use Case描述了系统某一部分的行为。一般地，Use Case记录对某个系统功能的需求，而这个功能由对动作或者事件的应答示范。</td>
        </tr>
        <tr>
            <td align="center"><img height="141" width="94" src="http://image.21tx.com/image/20021203/10170.gif"></td>
            <td><<include></include>> Relationship<br />
            包含关系。标注为<<include></include>>关系的Use Case关系能够引入其他Use Case的功能。这是一种方便的分割Use Case、避免单个Use Case过于庞大的方法。</td>
        </tr>
        <tr>
            <td align="center"><img height="153" width="94" src="http://image.21tx.com/image/20021203/10162.gif"></td>
            <td><<extend></extend>> Relationship<br />
            扩充关系。标注为<<extend></extend>>关系的Use Case关系能够在不重复现有Use Case的各种描述和需求的情况下，使现有Use Case的行为特殊化。</td>
        </tr>
        <tr>
            <td align="center"><img height="119" width="72" src="http://image.21tx.com/image/20021203/10181.gif"></td>
            <td>Dependency<br />
            依赖。正如其字面意义，它表示一个事物依赖另一个事物。这意味着一个事物了解另一个事物，并需要另外一个事物才能发挥功能。</td>
        </tr>
        <tr>
            <td align="center"><img height="160" width="106" src="http://image.21tx.com/image/20021203/10241.gif"></td>
            <td>Note<br />
            注解。在UML图中提供注解的目的是以简短的说明阐明图表的内容。</td>
        </tr>
        <tr>
            <td align="center"><img height="48" width="107" src="http://image.21tx.com/image/20021203/10234.gif"></td>
            <td>Component<br />
            构件。构件一般代表一个<nobr><a class="iAs" style="color: #6600ff; border-bottom: #6600ff 1px dotted; background-color: transparent; text-decoration: underline" target="_blank"><font color="#6600ff">软件</font></a></nobr>单元，它可能是一个DLL、一个执行文件，或者是一个<a target="_blank" href="http://dev.21tx.com/database/"><font color="#3366cc">数据库</font></a>。</td>
        </tr>
        <tr>
            <td align="center"><img height="101" width="136" src="http://image.21tx.com/image/20021203/10116.gif"></td>
            <td>Node<br />
            节点。节点一般代表一台机器，这台机器具有运行一个或者多个系统构件的能力。</td>
        </tr>
        <tr>
            <td align="center"><img height="95" width="118" src="http://image.21tx.com/image/20021203/10120.gif"></td>
            <td>Class<br />
            类。UML中的类与面向对象编程中的类一样，即它定义并封装了一组行为和属性。类在运行时被实例化从而创建出对象。</td>
        </tr>
        <tr>
            <td align="center"><img height="48" width="95" src="http://image.21tx.com/image/20021203/10190.gif"></td>
            <td>Object<br />
            对象。对象是类的实例。例如，&ldquo;MyClass myObj = new MyClass; &rdquo;创建了一个myObj对象。</td>
        </tr>
        <tr>
            <td align="center"><img height="171" width="147" src="http://image.21tx.com/image/20021203/10184.gif"></td>
            <td>Generalization<br />
            泛化。父类能够派生出（或称为特殊化）具有更多特殊行为的子类，此时父类即为子类的超类（或子类的泛化版本）。</td>
        </tr>
        <tr>
            <td align="center"><img height="133" width="135" src="http://image.21tx.com/image/20021203/10136.gif"></td>
            <td>Interface<br />
            接口。接口定义了一组可以从外部访问的行为。类、库、执行文件、<nobr><a class="iAs" style="color: #6600ff; border-bottom: #6600ff 1px dotted; background-color: transparent; text-decoration: underline" target="_blank"><font color="#6600ff">数据</font></a></nobr>文件都可以由接口来描述。接口本身并不实现任何功能，它只是和声明实现该接口的对象订立了一个必须实现哪些行为的契约。</td>
        </tr>
        <tr>
            <td align="center"><img height="48" width="95" src="http://image.21tx.com/image/20021203/10219.gif"></td>
            <td>Abstract Class<br />
            抽象类。抽象类不能直接实例化，但允许派生出具体的、有实际功能的类。</td>
        </tr>
        <tr>
            <td align="center"><img height="129" width="94" src="http://image.21tx.com/image/20021203/10098.gif"></td>
            <td>Association<br />
            关联。关联就是把两个或以上的类连接起来。你可以为两个类之间的这种关系提供更具体的信息。关联是两个或多个特定类元之间的关系，它描述了这些类元的实例的联系。在一个关联中同一个类可以出现在多个位置上。</td>
        </tr>
        <tr>
            <td align="center"><img height="141" width="94" src="http://image.21tx.com/image/20021203/10224.gif"></td>
            <td>Aggregation<br />
            聚合。聚合关系表示某个对象属于其他对象所有。</td>
        </tr>
    </tbody>
</table>
</p>
<p> </p>
<p>　　参考资源：</p>
<ul>
    <li><a target="_blank" href="http://www.omg.org/cgi-bin/doc?ad/99-06-08"><font color="#3366cc">UML 1.3 Specification</font></a>：UML规范，来自omg.org</li>
    <li><a target="_blank" href="http://www.omg.com/technology/uml/index.htm"><font color="#3366cc">UML Resource Page</font></a>：OMG维护的UML资源</li>
    <li><a target="_blank" href="http://www.cyberdyne-object-sys.com/oofaq2/"><font color="#3366cc">Object Oriented FAQ</font></a>：一个面向对象术语和概念的介绍</li>
    <li><a target="_blank" href="http://www.togethersoft.com/services/UMLShortCourse/"><font color="#3366cc">Practical UML Guide</font></a></li>
    <li><a target="_blank" href="http://www.cetus-links.org/oo_uml.html"><font color="#3366cc">Cetus UML Links</font></a></li>
    <li><a target="_blank" href="http://www.rational.com/products/whitepapers/100462.jsp"><font color="#3366cc">Modeling Web Application Design with UML</font></a> - Rational Rose白皮书</li>
</ul></div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>98</wp:post_id>
		<wp:post_date><![CDATA[2007-04-28 14:58:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-04-28 14:58:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%bd%acuml%e8%be%85%e5%8a%a9%e7%bd%91%e7%ab%99%e8%a7%84%e5%88%92%e5%92%8c%e8%ae%be%e8%ae%a1%e6%8c%87%e5%8d%97%e3%80%90%e4%ba%8c%e3%80%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>[转]UML辅助网站规划和设计指南一</title>
		<link>http://blog.00rz.com/2007/04/%e8%bd%acuml%e8%be%85%e5%8a%a9%e7%bd%91%e7%ab%99%e8%a7%84%e5%88%92%e5%92%8c%e8%ae%be%e8%ae%a1%e6%8c%87%e5%8d%97%e4%b8%80.html</link>
		<pubDate>Sat, 28 Apr 2007 14:58:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=99</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><strong>一、概述</strong>
<p>　　<a target="_blank" href="http://dev.21tx.com/web/"><font color="#3366cc">Web</font></a><nobr><a class="iAs" style="color: #6600ff; border-bottom: #6600ff 0px dotted; background-color: transparent; text-decoration: underline" target="_blank"><font color="#6600ff">网站</font></a></nobr>往往具有复杂与高度动态的特点。为了让Web应用在短时间之内开始运作，开发周期应该尽量地短。许多时候，开发者直接进入编写代码这一阶段，却不去仔细考虑自己想要构造的是什么样的网站以及准备如何构造：<a target="_blank" href="http://www.21tx.com/server/"><font color="#3366cc">服务器</font></a>端代码往往是毫无准备的即兴式编写，<a target="_blank" href="http://dev.21tx.com/database/"><font color="#3366cc">数据库</font></a>表也是随需随加，整个应用的体系有时候呈现一种无规划状态。然而，只要我们运用一些建模技术和<a target="_blank" href="http://dev.21tx.com/softengine/"><font color="#3366cc">软件工程</font></a>技术，就能够让开发过程更加流畅，确保Web应用将来更容易维护。</p>
<p>　　<a target="_blank" href="http://dev.21tx.com/softengine/uml/"><font color="#3366cc">UML</font></a>（Unified Modeling Language，统一建模语言）是一种通用的可视化建模语言，用于对<nobr><a class="iAs" style="color: #6600ff; border-bottom: #6600ff 1px dotted; background-color: transparent; text-decoration: underline" target="_blank"><font color="#6600ff">软件</font></a></nobr>进行描述、可视化处理、构造和建立软件系统的文档。UML适用于各种<a target="_blank" href="http://dev.21tx.com/"><font color="#3366cc">软件开发</font></a>方法、软件生命周期的各个阶段、各种应用领域以及各种开发工具。UML能够描述系统的静态结构和动态行为：静态结构定义了系统中重要对象的属性和操作以及这些对象之间的相互关系；动态行为定义了对象的时间特性和对象为完成目标任务而相互进行<a target="_blank" href="http://news.21tx.com/telcom/"><font color="#3366cc">通信</font></a>的机制。UML不是一种程序<nobr><a class="iAs" style="color: #6600ff; border-bottom: #6600ff 1px dotted; background-color: transparent; text-decoration: underline" target="_blank"><font color="#6600ff">设计</font></a></nobr>语言，但我们可以用代码生成器将UML模型转换为多种程序设计语言代码，或使用反向生成器工具将程序源代码转换为UML模型。</p>
<p>　　本文介绍用UML为Web网站建模的一些方法。全面采用UML技术是一个复杂的过程，但UML的某些部分很容易使用，而且它能够帮助你用更少的时间构造出更好的<nobr><a class="iAs" style="color: #6600ff; border-bottom: #6600ff 1px dotted; background-color: transparent; text-decoration: underline" target="_blank"><font color="#6600ff">系统</font></a></nobr>。</p>
<p>　　为了示范UML在网站建设中的应用，本文将构造一个支持无线用户、提供各个地区天气报表和<nobr><a class="iAs" style="color: #6600ff; border-bottom: #6600ff 1px dotted; background-color: transparent; text-decoration: underline" target="_blank"><font color="#6600ff">交通</font></a></nobr>流量报表的网站。本文不准备详细介绍UML本身。但为了方便起见，附录中简要介绍了常见的UML符号和术语。要了解更多有关UML的信息，请参见文章最后的参考资源。</p>
<strong>　　二、规划阶段</strong>
<p>　　不论你是从头开始构造网站、移植网站还是增加某个重要的功能，为了确保设计决策的最优化，进行一些先期<nobr><a class="iAs" style="color: #6600ff; border-bottom: #6600ff 1px dotted; background-color: transparent; text-decoration: underline" target="_blank"><font color="#6600ff">规划</font></a></nobr>是必要的。如果你和其他人协作完成一项工程，就工作总量及其分配达成明确的共识具有不可估量的作用。在规划期间，你应该努力对系统的以下方面形成正确的认识：</p>
<p> </p>
<ul>
    <li>用户和角色。</li>
    <li>应用需求。</li>
    <li>各个界面之间的转换流程。</li>
    <li>要用到的工具和技术。</li>
</ul>
<p> </p>
<h4>　　<strong>2.1 用户</strong></h4>
<p>　　了解使用系统的用户是很重要的。不仅系统分析要求你接触一些用户（通过问卷调查、email，或者面对面交谈），而且你经常还要让系统能够控制不同的用户角色和权限。通过对用户进行分类并了解他们的需求，你就可以找出线索来确定数据库的安全机制、功能限制方法、用户界面分组、<nobr><a class="iAs" style="color: #6600ff; border-bottom: #6600ff 1px dotted; background-color: transparent; text-decoration: underline" target="_blank"><font color="#6600ff">培训</font></a></nobr>和帮助需求、对具体内容的需求，甚至还可以从侧面了解到潜在广告客户的分布。</p>
<p> </p>
<center><img height="192" width="186" src="http://image.21tx.com/image/20021203/10208.gif"><br />
<br />
图1：参与者/角色 层次图 </center>
<p> </p>
<p>　　上图显示了几组不同的网站用户（在UML中称为Actor，即参与者）。在这里，最普通的用户类型（&ldquo;Site User&rdquo;）位于图的顶端，实线箭头表示generalization关系（&ldquo;泛化&rdquo;关系，参见本文附录说明，下同），它表示Site User又可以具体分成两类用户：Guest，Re<a target="_blank" href="http://dev.21tx.com/corp/gis/"><font color="#3366cc">GIS</font></a>tered User。这两类用户共有的特征在&ldquo;Site User&rdquo;参与者中说明，而Guest和Registered User各自私有的特征则在对应的参与者中说明。通常，你可以直接为参与者加上说明文档，无需单独编写说明用户的文档，但具体与你所用的UML工具有关。在本例中，Registered User又可以细分为Wireless User和Administrator两种类型，系统对这些用户的处理方式应有所不同。</p>
<p>2.2 定义需求</p>
<p>　　在正式开始编写代码之前，你应该对准备构造一个怎样的系统有一个清晰的认识。虽然在编写代码的同时也可以逐步完成这一工作，而且这种做法也很有吸引力，但借助图形和文字资料事先集体进行讨论效率要高得多。为<nobr><a class="iAs" style="color: #6600ff; border-bottom: #6600ff 1px dotted; background-color: transparent; text-decoration: underline" target="_blank"><font color="#6600ff">网站</font></a></nobr>编写详细的需求说明往往不那么合算，但你应该有时间画出几个草图、写下几段注解去说明网站准备提供的服务。这就要用到Use Case图（用例图）。Use Case可以看成一组功能&mdash;&mdash;它可能对应网站上的一个页面、一个必须编写的程序，或者网站上可能发生的一个动作（比如，验证用户登录，改变用户的配置文件，清除过期的帐号，等等）。下面就是一个能够帮助你<nobr><a class="iAs" style="color: #6600ff; border-bottom: #6600ff 1px dotted; background-color: transparent; text-decoration: underline" target="_blank"><font color="#6600ff">规划</font></a></nobr>网站的Use Case图。注意，该图并没有显示出网站的所有Use Case，通常我们需要多个Use Case图才能描述完整的网站功能。</p>
<p> </p>
<center><img src="http://image.21tx.com/image/20021203/10145.gif"><br />
<br />
图2：Use Case图 </center>
<p> </p>
<p>　　即使是在这样一个<nobr><a class="iAs" style="color: #6600ff; border-bottom: #6600ff 1px dotted; background-color: transparent; text-decoration: underline" target="_blank"><font color="#6600ff">简单</font></a></nobr>的Use Case图中，我们也能够轻松地表达出大量的信息。例如，include关系说明两个Use Case包含同样的身份验证功能；extend关系说明天气页面可能以WML或者HTML格式显示；generalization关系说明各个具体的表现过程将遵从&ldquo;Render HTML Page&rdquo;或者&ldquo;Render WML Page&rdquo;所描述的基本行为规则以达到维持统一的风格<nobr><a class="iAs" style="color: #6600ff; border-bottom: #6600ff 1px dotted; background-color: transparent; text-decoration: underline" target="_blank"><font color="#6600ff">效果</font></a></nobr>和统一宏观行为模式的目的。</p>
<p>　　上图也显示出无线用户能够访问网站中其他用户不能访问的某些区域。在这个Use Case图中，只有无线用户能够访问<nobr><a class="iAs" style="color: #6600ff; border-bottom: #6600ff 1px dotted; background-color: transparent; text-decoration: underline" target="_blank"><font color="#6600ff">交通</font></a></nobr>流量报表。这是因为我们已经得知只有在旅途中的移动用户才需要交通流量报表，而且不想再花时间把交通流量报表制作成其他标记语言形式。由此，&ldquo;Get Traffic Report&rdquo;Use Case不需要分成WML和HTML两种显示形式，它可以直接包含&ldquo;Render WML Traffic Report&rdquo;这个Use Case。</p>
<p>　　一般地，你应该为这些Use Case加上简单的说明。具体地说，你应该描述每一个Use Case里将要发生什么，谁可以使用它，它如何启动、如何停止，以及某些时候可能发生的特殊事件（称为variation，即变化）。</p>
<h4>　　<strong>2.3 用户界面组织</strong></h4>
<p>　　在制作Use Case的过程中，你会得到一些指示网站需要哪些用户界面的线索。也许你早就有了<nobr><a class="iAs" style="color: #6600ff; border-bottom: #6600ff 1px dotted; background-color: transparent; text-decoration: underline" target="_blank"><font color="#6600ff">设计</font></a></nobr>某些页面的绝妙主意，但Use Case帮助我们从另外一个角度来看问题。用户是否确实需要那么多的界面？某个页面是否过于复杂？网站的导航设施是否简单易用，即从主页访问常用服务是否很方便？在勾画界面草图、制作网站原型之前，你应该先在Use Case图中解决这些问题。</p>
<p>　　当Use Case逐渐清晰时，我们就可以开始勾画出网站的大致结构。有些人会强调说页面和文件应该用相应的构件图（Component Diagram）建模，其实类图（Class Diagram）工具也很方便。请参见下图：</p>
<p> </p>
<center><img width="550" src="http://image.21tx.com/image/20021203/10127.gif"><br />
<br />
图3：用户界面及其布局 </center>
<p> </p>
<p>　　在上图中，各种网站<nobr><a class="iAs" style="color: #6600ff; border-bottom: #6600ff 1px dotted; background-color: transparent; text-decoration: underline" target="_blank"><font color="#6600ff">服务</font></a></nobr>被捆绑到了不同的网站区域：</p>
<p> </p>
<ul>
    <li>/ - 网站的根</li>
    <li>/common/ - 公用的图形、脚本、CSS文件等</li>
    <li>/maps/ - 地图数据</li>
    <li>/traffic/ - 交通流量报表</li>
    <li>/weather/ - 天气报表</li>
</ul>
<p> </p>
<p>　　该图还显示了在页面之间传递的参数。regionId是一个很重要的参数，它代表着用户感兴趣的地区（可能是一个国家、城市或者省份）。regionId在页面之间传递地区<nobr><a class="iAs" style="color: #6600ff; border-bottom: #6600ff 1px dotted; background-color: transparent; text-decoration: underline" target="_blank"><font color="#6600ff">信息</font></a></nobr>，使得用户能够从指定地区的天气报表跳转到交通流量信息。至于网站的common区域，你可以看到指针指向的是整个包（package）而不是区域中的单个文件，这是一种减少混乱的简化方法，因为所有其它的包都要用到大部分（如果不是全部的话）/common/区域中的文件。</p>
<p>　　用户界面布局图能够帮助你避免网站混乱，它对于规划网站是很有用的。而且，一旦确定了一种有效的网站结构组织方式，它还可以作为一个固定的模式在多个网站上应用。</p>
<p>2.4 工具选择</p>
<p>　　对于小型<nobr><a class="iAs" style="color: #6600ff; border-bottom: #6600ff 1px dotted; background-color: transparent; text-decoration: underline" target="_blank"><font color="#6600ff">网站</font></a></nobr>，选择工具和技术相当简单。特别是由于投资的原因，只有少数几种工具组合才具有现实意义&mdash;&mdash;Apache，<a target="_blank" href="http://dev.21tx.com/database/mysql/"><font color="#3366cc">MySQL</font></a>或者PostgreSQL，<a target="_blank" href="http://dev.21tx.com/web/php/"><font color="#3366cc">PHP</font></a>、<a target="_blank" href="http://dev.21tx.com/web/perl/"><font color="#3366cc">Perl</font></a>或<a target="_blank" href="http://dev.21tx.com/java/jsp/"><font color="#3366cc">JSP</font></a>/<a target="_blank" href="http://dev.21tx.com/java/jsp/"><font color="#3366cc">Servlet</font></a>。当前最流行的组合是Apache + PHP + MySQL，有许多低价位的<a target="_blank" href="http://dev.21tx.com/web/"><font color="#3366cc">Web</font></a>托管服务支持并主要集中在这种工具组合上。而对于规模较大的网站，在投资应用<nobr><a class="iAs" style="color: #6600ff; border-bottom: #6600ff 1px dotted; background-color: transparent; text-decoration: underline" target="_blank"><font color="#6600ff">软件</font></a></nobr>之前，它必须对各种工具进行更严格的评估和测试。下面是一个构件图的例子，它可以用来说明网站的体系结构。这个图形虽然简单，但它已经描述出了当前大多数网站的体系结构，对于你的网站，重新制作该图可能也没有必要，因为再也没有什么与众不同的内容值得加入这个图形了。</p>
<p> </p>
<center><img src="http://image.21tx.com/image/20021203/10214.gif"><br />
<br />
图4：网站体系结构图 </center>
<p> </p>
<p>　　讨论软件的整个生命周期已经超出了本文的范围，但应该指出的是，建立应用原型和界面模型应该在这个时候就开始。务必记下有关网站结构和页面布局的一些想法，因为最终你会想要为布局（菜单，导航条，页面整体布局等）编写一些公用的代码。另外，如果你正在转到新的工具和技术，建立原型的工作能够让你确保设计的可行性，确信已经就新工具的使用对开发组成员进行了足够的<nobr><a class="iAs" style="color: #6600ff; border-bottom: #6600ff 1px dotted; background-color: transparent; text-decoration: underline" target="_blank"><font color="#6600ff">培训</font></a></nobr>。</p>
<p><strong>　　<strong>三、设计阶段</strong> </strong></p>
<p>　　<nobr><a class="iAs" style="color: #6600ff; border-bottom: #6600ff 1px dotted; background-color: transparent; text-decoration: underline" target="_blank"><font color="#6600ff">设计</font></a></nobr>阶段应该与分析阶段交迭。一旦对自己所要构造的系统有了较多的认识，你就应该开始拟定设计思路。先100%地分析系统再进入设计阶段是没有意义的。需求总是不断地发展，而设计本身有时也会推动需求的发展（反之亦然）。所有的开发者都在进行某种类型的设计&mdash;&mdash;只不过有些开发者直接以编程代码的形式进行设计。虽然这也能够完成任务，但它使得<nobr><a class="iAs" style="color: #6600ff; border-bottom: #6600ff 1px dotted; background-color: transparent; text-decoration: underline" target="_blank"><font color="#6600ff">管理</font></a></nobr>复杂工程和在工作组之内分配任务变得非常困难。先花一点时间通过设计图构造系统模型，以后你将获得巨大的回报。</p>
<h4>　　<strong>3.1 为未来而设计</strong></h4>
<p>　　许多开发者花费在代码调试和改写上的时间超过了编写代码的时间，如果从一个以上网站的建设来看这个问题，情况就尤其严重了。好的网站设计能够以结构、组织方式和代码重用的形式应用到多个网站上。然而，如果代码只是匆匆忙忙堆砌而成，从现有代码长期获益的机会就减少了。要对网站进行设计<nobr><a class="iAs" style="color: #6600ff; border-bottom: #6600ff 1px dotted; background-color: transparent; text-decoration: underline" target="_blank"><font color="#6600ff">规划</font></a></nobr>，一种很有效的方法是画出类图（Class Diagram）。下图显示了类图通常要用到的许多重要关系。</p>
<p> </p>
<center><img width="600" src="http://image.21tx.com/image/20021203/10112.gif"><br />
<br />
图5：类图 </center>
<p> </p>
<p>　　说明如下：</p>
<p> </p>
<ul>
    <p> </p>
    <p> </p>
    <li>Renderer类是一个抽象类（用斜体字显示）。这意味着Renderer类不能直接使用，程序只能创建其子类的实例（即new Region()）。为了满足把页面内容显示到不同类型浏览器的需要，所有用来生成内容的页面都必须从Renderer类派生。
    <p> </p>
    <p> </p>
    </li>
    <li>WeatherReport类创建并拥有Region对象，这通过代表聚合关系（Aggregate Relationship）的黑色菱形显示出来，它表示一个对象拥有并创建其他对象。
    <p> </p>
    <p> </p>
    </li>
    <li>方法名字前面的加号（&ldquo;+&rdquo;）表示该方法是公用方法，可以被其他对象或者函数调用；减号（&ldquo;-&rdquo;）表示方法或者变量是私有的，只能由同一对象内部的成员函数访问。在PHP中方法和变量是公用的，但我们应该总是把变量看成私有，避免从对象外部直接访问变量。
    <p> </p>
    <p> </p>
    </li>
    <li>HTMLWeatherReport类依赖于HTMLUtils类。依赖关系（dependency）表示一个类要创建另一个类的实例或者调用另一个类的方法。
    <p> </p>
    <p> </p>
    </li>
    <li>类图中的每一个类应该注明：所有的方法（以及所有的变量，如有的话），方法的访问属性（public，private或者protected），方法的返回值类型，方法的参数，变量的类型。函数写在前面，如果类有变量的话，则一般随后在一个分开的方框中列出。</li>
</ul>
<p> </p>
<p>　　即使你所构造的不是一个面向对象的<nobr><a class="iAs" style="color: #6600ff; border-bottom: #6600ff 1px dotted; background-color: transparent; text-decoration: underline" target="_blank"><font color="#6600ff">系统</font></a></nobr>，你仍就可以用类图建立系统的模型。类能够方便地描述出各种包含关系和你所编写的函数文件。虽然此时类图不再显示继承、构成/聚合等面向对象系统特有的关系，但它可以用依赖关系描述出文件之间的调用关系。</p>
<h4>　　<strong>3.2 运行时的系统模型</strong></h4>
<p>　　有些时候，我们需要显示出应用的各个部件如何在运行时协作完成任务。前面的类图显示了类之间的关系，但它没有显示出调用出现的次序，也没有显示出来自一个函数的结果可能决定下一次调用的目标。为了在更动态的层面上描述系统，<a target="_blank" href="http://dev.21tx.com/softengine/uml/"><font color="#3366cc">UML</font></a>提供了许多其他类型的图。对于Web网站设计来说，情节图（Scenario Diagram）特别有用。情节图分成两种：协作图（Collaboration Diagram），序列图（Sequence Diagram）。一般地，我们不会建立系统所有交互过程的<nobr><a class="iAs" style="color: #6600ff; border-bottom: #6600ff 1px dotted; background-color: transparent; text-decoration: underline" target="_blank"><font color="#6600ff">模型</font></a></nobr>，情节图只用来描述系统最复杂的部分，或用来概括出代码的一般调用模式。例如，我们可能要示范特定的页面如何与验证用户身份的代码协作，或者要显示页面如何调用公用代码（工具性的框架代码）以保持统一的外观和风格。</p>
<p>　　协作图和序列图分别举例如下。</p>
<p> </p>
<center><img src="http://image.21tx.com/image/20021203/10154.gif"><br />
<br />
图6：协作图 </center>
<p> </p>
<p>　　上面的协作图显示了从Web网站获取天气报表的一般过程。注意该图忽略了一些不重要的方法，因为我们只对处理过程中的关键步骤感兴趣。你可以根据编号&ldquo;1&rdquo;到&ldquo;1.3.3.4&rdquo;找出各个函数的执行次序。一些人喜欢以&ldquo;1，2，3，……&rdquo;形式对执行步骤编号，但一般而言，用&ldquo;1，1.1，1.2，2，2.1，……&rdquo;的形式显示出调用栈的深度是一种更好的选择，这种编号方式能够更清楚地显示出程序的控制转换过程。例如，上图显示出report()方法调用了WMLUtil以及Region对象中的许多方法：在通过一系列的查询和内容生成函数为指定地区生成报表之前，我们调用了WMLUtil中的buildHeader(...)函数；最后我们调用的是WMLUtil模块的buildFooter(...)，然后返回report()方法，最后返回getPage()。你可以为协作图加上更多的细节说明，比如返回值、约束、条件等。</p>
<p> </p>
<center><img src="http://image.21tx.com/image/20021203/10196.gif"><br />
<br />
图7：序列图 </center>
<p> </p>
<p>　　就图形所传达的信息而言，次序图和协作图非常相似。事实上，许多UML建模工具能够从协作图生成次序图，或者相反。次序图与协作图的主要不同之处在于：在次序图上，事件的发生次序一目了然，非常直观。另外，次序图中还可以加入生存周期和时间方面的详细信息，比如延迟、线程并发、对象的构造和删除等。</p>
<p>　　在决定选用次序图还是协作图的时候，考虑以下几点有助于你作出最合适的选择：</p>
<p> </p>
<ul>
    <li>如果要显示代码中与时间或线程密切相关的问题，选择次序图。</li>
    <li>如果要显示对象之间的交互模式，选择协作图。</li>
    <li>如果要显示几个或者大量对象之间的交互过程，选择次序图。</li>
    <li>如果要显示少量对象之间的大量消息传递或交互过程，选择协作图。</li>
</ul></div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>99</wp:post_id>
		<wp:post_date><![CDATA[2007-04-28 14:58:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-04-28 14:58:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%bd%acuml%e8%be%85%e5%8a%a9%e7%bd%91%e7%ab%99%e8%a7%84%e5%88%92%e5%92%8c%e8%ae%be%e8%ae%a1%e6%8c%87%e5%8d%97%e4%b8%80]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543640938]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>关于extern c</title>
		<link>http://blog.00rz.com/2007/04/%e5%85%b3%e4%ba%8eextern-c.html</link>
		<pubDate>Sat, 28 Apr 2007 10:23:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=100</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  >extern "C"表示编译生成的内部符号名使用C约定 <br />
例如： <br />
int Fun(int i,int j) <br />
C：_Fun <br />
C++：_Fun_int_int <br />
具体生成什么可能与编译器有关 <br />
由于C++支持重载，而重载是在编译期确定的，所以C++必须在内部符号名上区分各重载函数，所以就将参数类型加在函数名后。</div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>100</wp:post_id>
		<wp:post_date><![CDATA[2007-04-28 10:23:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-04-28 10:23:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%85%b3%e4%ba%8eextern-c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>续b+树</title>
		<link>http://blog.00rz.com/2007/04/%e7%bb%adb%e6%a0%91.html</link>
		<pubDate>Fri, 27 Apr 2007 19:25:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=101</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p>呵呵 没完 要想看的话到 原来的地址上看吧</p>
<p> </p></div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>101</wp:post_id>
		<wp:post_date><![CDATA[2007-04-27 19:25:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-04-27 19:25:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%bb%adb%e6%a0%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>[转]B+树的结构和实现代码</title>
		<link>http://blog.00rz.com/2007/04/%e8%bd%acb%e6%a0%91%e7%9a%84%e7%bb%93%e6%9e%84%e5%92%8c%e5%ae%9e%e7%8e%b0%e4%bb%a3%e7%a0%81.html</link>
		<pubDate>Fri, 27 Apr 2007 19:19:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=102</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><div class="postTitle"> </div>
<div class="postText">
<p> </p>
<p><strong><font size="3">B+树实现代码</font></strong></p>
<p>来源：<a href="http://supercyber.139.com/article/253784.html">http://supercyber.139.com/article/253784.html</a></p>
<p>这个结构一般用于数据库的索引，综合效率非常高，像 Berkerly DB , sqlite , mysql 数据库都使用了这个算法处理索引。 <br />
如果想自己做个小型数据库，可能参考一下这个算法的实现，可能会对你有所帮助。</p>
<p>其中的注册很详细，不用再多说了。</p>
<div style="border-right: windowtext 0.5pt solid; padding-right: 5.4pt; border-top: windowtext 0.5pt solid; padding-left: 5.4pt; background: #e6e6e6; padding-bottom: 4px; border-left: windowtext 0.5pt solid; width: 95%; word-break: break-all; padding-top: 4px; border-bottom: windowtext 0.5pt solid">
<div><span style="color: #008000">/*</span><span style="color: #008000"> btrees.h </span><span style="color: #008000">*/</span><span style="color: #000000"> <br />
</span><span style="color: #008000">/*</span><span style="color: #008000"> <br />
* 平衡多路树的一种重要方案。 <br />
* 在 1970 年由 R. Bayer 和 E. McCreight 发明。 <br />
</span><span style="color: #008000">*/</span><span style="color: #000000"> <br />
</span><span style="color: #0000ff">#define</span><span style="color: #000000"> M 1 </span><span style="color: #000000"><br />
</span><span style="color: #008000">/*</span><span style="color: #008000"> B 树的阶，即非根节点中键的最小数目。 <br />
* 有些人把阶定义为非根节点中子树的最大数目。 <br />
</span><span style="color: #008000">*/</span><span style="color: #000000"> <br />
typedef </span><span style="color: #0000ff">int</span><span style="color: #000000"> typekey; <br />
typedef </span><span style="color: #0000ff">struct</span><span style="color: #000000"> btnode { </span><span style="color: #008000">/*</span><span style="color: #008000"> B-Tree 节点 </span><span style="color: #008000">*/</span><span style="color: #000000"> <br />
</span><span style="color: #0000ff">int</span><span style="color: #000000"> d; </span><span style="color: #008000">/*</span><span style="color: #008000"> 节点中键的数目 </span><span style="color: #008000">*/</span><span style="color: #000000"> <br />
typekey k[</span><span style="color: #000000">2</span><span style="color: #000000">*</span><span style="color: #000000">M]; </span><span style="color: #008000">/*</span><span style="color: #008000"> 键 </span><span style="color: #008000">*/</span><span style="color: #000000"> <br />
</span><span style="color: #0000ff">char</span><span style="color: #000000"> </span><span style="color: #000000">*</span><span style="color: #000000">v[</span><span style="color: #000000">2</span><span style="color: #000000">*</span><span style="color: #000000">M]; </span><span style="color: #008000">/*</span><span style="color: #008000"> 值 </span><span style="color: #008000">*/</span><span style="color: #000000"> <br />
</span><span style="color: #0000ff">struct</span><span style="color: #000000"> btnode </span><span style="color: #000000">*</span><span style="color: #000000">p[</span><span style="color: #000000">2</span><span style="color: #000000">*</span><span style="color: #000000">M</span><span style="color: #000000">+</span><span style="color: #000000">1</span><span style="color: #000000">]; </span><span style="color: #008000">/*</span><span style="color: #008000"> 指向子树的指针 </span><span style="color: #008000">*/</span><span style="color: #000000"> <br />
} node, </span><span style="color: #000000">*</span><span style="color: #000000">btree; <br />
</span><span style="color: #008000">/*</span><span style="color: #008000"> <br />
* 每个键的左子树中的所有的键都小于这个键， <br />
* 每个键的右子树中的所有的键都大于等于这个键。 <br />
* 叶子节点中的每个键都没有子树。 <br />
</span><span style="color: #008000">*/</span><span style="color: #000000"> <br />
<br />
</span><span style="color: #008000">/*</span><span style="color: #008000"> 当 M 等于 1 时也称为 2-3 树 <br />
* +----+----+ <br />
* | k0 | k1 | <br />
* +-+----+----+--- <br />
* | p0 | p1 | p2 | <br />
* +----+----+----+ <br />
</span><span style="color: #008000">*/</span><span style="color: #000000"> <br />
</span><span style="color: #0000ff">extern</span><span style="color: #000000"> </span><span style="color: #0000ff">int</span><span style="color: #000000"> btree_disp; </span><span style="color: #008000">/*</span><span style="color: #008000"> 查找时找到的键在节点中的位置 </span><span style="color: #008000">*/</span><span style="color: #000000"> <br />
</span><span style="color: #0000ff">extern</span><span style="color: #000000"> </span><span style="color: #0000ff">char</span><span style="color: #000000"> </span><span style="color: #000000">*</span><span style="color: #000000"> InsValue; </span><span style="color: #008000">/*</span><span style="color: #008000"> 与要插的键相对应的值 </span><span style="color: #008000">*/</span><span style="color: #000000"> <br />
<br />
</span><span style="color: #0000ff">extern</span><span style="color: #000000"> btree search(typekey, btree); <br />
</span><span style="color: #0000ff">extern</span><span style="color: #000000"> btree insert(typekey,btree); <br />
</span><span style="color: #0000ff">extern</span><span style="color: #000000"> btree delete(typekey,btree); <br />
</span><span style="color: #0000ff">extern</span><span style="color: #000000"> </span><span style="color: #0000ff">int</span><span style="color: #000000"> height(btree); <br />
</span><span style="color: #0000ff">extern</span><span style="color: #000000"> </span><span style="color: #0000ff">int</span><span style="color: #000000"> count(btree); <br />
</span><span style="color: #0000ff">extern</span><span style="color: #000000"> </span><span style="color: #0000ff">double</span><span style="color: #000000"> payload(btree); <br />
</span><span style="color: #0000ff">extern</span><span style="color: #000000"> btree deltree(btree); <br />
</span><span style="color: #008000">/*</span><span style="color: #008000"> end of btrees.h </span><span style="color: #008000">*/</span><span style="color: #000000"> <br />
<br />
</span><span style="color: #008000">/*</span><span style="color: #008000">*****************************************************</span><span style="color: #008000">*/</span><span style="color: #000000"> <br />
</span></div>
</div>
<p> </p>
<p> </p>
</div></div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>102</wp:post_id>
		<wp:post_date><![CDATA[2007-04-27 19:19:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-04-27 19:19:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%bd%acb%e6%a0%91%e7%9a%84%e7%bb%93%e6%9e%84%e5%92%8c%e5%ae%9e%e7%8e%b0%e4%bb%a3%e7%a0%81]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543640944]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>php + clucene extension的安装[转]</title>
		<link>http://blog.00rz.com/2007/04/php-clucene-extension%e7%9a%84%e5%ae%89%e8%a3%85%e8%bd%ac.html</link>
		<pubDate>Sun, 22 Apr 2007 14:37:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=103</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><div><a href="http://clucene.sourceforge.net/" target="_blank"><font color="#800080">CLucene</font></a>是<a href="http://www.sf.net/" target="_blank">SF</a>上面的一个对<a href="http://lucene.apache.org/" target="_blank">Lucene</a>(一个用Java写的全文检索引擎工具包)的移植,做为Lucene的C++的重新实现，以带来更快的检索速度,但是一直还不stable.这里仅仅是尝试php+<a href="http://pecl.php.net/package/clucene"><font color="#800080">clucene扩展</font></a>的安装,具体应用先不管.</div>
<div>安装环境:<br />
Freebsd 6.0 + apache 2.2 + php 5.1.2</div>
<div><a href="http://www.ooso.net/article/html/install.htm" target="_blank">apache+php的安装</a>就不说了,网上一抓一大把,注意clucene扩展必须在php5以上才能安装.</div>
<ul>
<li>首先安装clucene </li>
</ul>
    <div>1.下载clucene<br />
直奔它的首页–<a href="http://clucene.sourceforge.net/" target="_blank"><font color="#800080">clucene.sourceforge.net</font></a>,下载clucene 0.9.10<br />
2.编译clucene</div>
<blockquote>
<div>tar xzvf clucene-0.9.10.tar.gz<br />
cd clucene-0.9.10<br />
./autogen.sh<br />
./configure<br />
make</div>
</blockquote>
<div>这样clucene就安装好了,为了让其它程序可以调用clucene,这里把编译好的lib放到系统lib目录下</div>
<blockquote>
<div>cp src/.libs/libclucene.* /usr/local/lib<br />
cp src/CLucene.h /usr/local/include/<br />
cp -r src/CLucene /usr/local/include/</div>
</blockquote>
<ul>
<li>安装clucene php extension </li>
</ul>
    <div>1.下载clucene php extension<br />
在pecl.php.net有下载,拖回来就是<br />
<a href="http://pecl.php.net/package/clucene"><font color="#800080">http://pecl.php.net/package/clucene</font></a></div>
    <div>2.编译clucene php extension</div>
<blockquote>
<div>tar xzvf clucene-0.0.9.tgz<br />
cd clucene-0.0.9<br />
cp -r /usr/local/include/Clucene include/]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>103</wp:post_id>
		<wp:post_date><![CDATA[2007-04-22 14:37:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-04-22 14:37:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[php-clucene-extension%e7%9a%84%e5%ae%89%e8%a3%85%e8%bd%ac]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>MySQL Cluster(MySQL 集群) 配置指南</title>
		<link>http://blog.00rz.com/2007/04/mysql-clustermysql-%e9%9b%86%e7%be%a4-%e9%85%8d%e7%bd%ae%e6%8c%87%e5%8d%97.html</link>
		<pubDate>Thu, 19 Apr 2007 17:39:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=104</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p>转自 <a href="http://www.phpv.net/article.php/1521">http://www.phpv.net/article.php/1521</a></p>
<p>
<table cellspacing="1" cellpadding="4" width="100%" border="0">
    <tbody>
        <tr>
            <td valign="top">
            <div class="subhead"><strong>MySQL Cluster(MySQL 集群) 配置指南</strong></div>
            </td>
        </tr>
        <tr>
            <td valign="top">
            <div class="content">
            <p>MySQL Cluster 是MySQL适合于分布式计算环境的高实用、高冗余版本。它采用了NDB Cluster 存储引擎，允许在1个 Cluster 中运行多个MySQL服务器。在MyQL 5.0及以上的二进制版本中、以及与最新的Linux版本兼容的RPM中提供了该存储引擎。（注意，要想获得MySQL Cluster 的功能，必须安装 mysql-server 和 mysql-max RPM）。</p>
            <p><br />
            目前能够运行MySQL Cluster 的操作系统有Linux、Mac OS X和Solaris（一些用户通报成功地在FreeBSD上运行了MySQL Cluster ，但MySQL AB公司尚未正式支持该特性）。</p>
            <p><strong><font color="#ff0000">一、MySQL Cluster概述</font></strong></p>
            <p><br />
            MySQL Cluster 是一种技术，该技术允许在无共享的系统中部署&ldquo;内存中&rdquo;数据库的 Cluster 。通过无共享体系结构，系统能够使用廉价的硬件，而且对软硬件无特殊要求。此外，由于每个组件有自己的内存和磁盘，不存在单点故障。<br />
            MySQL Cluster 由一组计算机构成，每台计算机上均运行着多种进程，包括MySQL服务器，NDB Cluster 的数据节点，管理服务器，以及（可能）专门的数据访问程序。关于 Cluster 中这些组件的关系，请参见下图：<br />
            <img border="0" src="http://imysql.cn/files/pictures/cluster-components-1.png"></p>
            <p>所有的这些节点构成一个完成的MySQL集群体系。数据保存在&ldquo;NDB存储服务器&rdquo;的存储引擎中，表（结构）则保存在&ldquo;MySQL服务器&rdquo;中。应用程序通过&ldquo;MySQL服务器&rdquo;访问这些数据表，集群管理服务器通过管理工具(ndb_mgmd)来管理&ldquo;NDB存储服务器&rdquo;。<br />
            通过将MySQL Cluster 引入开放源码世界，MySQL为所有需要它的人员提供了具有高可用性、高性能和可缩放性的 Cluster 数据管理。</p>
            <p><strong><font color="#ff0000">二、MySQL Cluster 基本概念</font></strong></p>
            <p><br />
            &ldquo;NDB&rdquo; 是一种&ldquo;内存中&rdquo;的存储引擎，它具有可用性高和数据一致性好的特点。<br />
            MySQL Cluster 能够使用多种故障切换和负载平衡选项配置NDB存储引擎，但在 Cluster 级别上的存储引擎上做这个最简单。MySQL Cluster的NDB存储引擎包含完整的数据集，仅取决于 Cluster本身内的其他数据。<br />
            目前，MySQL Cluster的 Cluster部分可独立于MySQL服务器进行配置。在MySQL Cluster中， Cluster的每个部分被视为1个节点。</p>
            <ul>
                <li>管理(MGM)节点：这类节点的作用是管理MySQL Cluster内的其他节点，如提供配置数据、启动并停止节点、运行备份等。由于这类节点负责管理其他节点的配置，应在启动其他节点之前首先启动这类节点。MGM节点是用命令&ldquo;ndb_mgmd&rdquo;启动的。</li>
                <li>数据节点：这类节点用于保存 Cluster的数据。数据节点的数目与副本的数目相关，是片段的倍数。例如，对于两个副本，每个副本有两个片段，那么就有4个数据节点。不过没有必要设置多个副本。数据节点是用命令&ldquo;ndbd&rdquo;启动的。</li>
                <li>SQL节点：这是用来访问 Cluster数据的节点。对于MySQL Cluster，客户端节点是使用NDB Cluster存储引擎的传统MySQL服务器。通常，SQL节点是使用命令&ldquo;mysqld &ndash;ndbcluster&rdquo;启动的，或将&ldquo;ndbcluster&rdquo;添加到&ldquo;my.cnf&rdquo;后使用&ldquo;mysqld&rdquo;启动。
                <p>注释：在很多情况下，术语&ldquo;节点&rdquo;用于指计算机，但在讨论MySQL Cluster时，它表示的是进程。在单台计算机上可以有任意数目的节点，为此，我们采用术语&ldquo; Cluster主机&rdquo;。</p>
                </li>
            </ul>
            <p>管理服务器(MGM节点)负责管理 Cluster配置文件和 Cluster日志。 Cluster中的每个节点从管理服务器检索配置数据，并请求确定管理服务器所在位置的方式。当数据节点内出现新的事件时，节点将关于这类事件的信息传输到管理服务器，然后，将这类信息写入 Cluster日志。<br />
            此外，可以有任意数目的 Cluster客户端进程或应用程序。它们分为两种类型：</p>
            <ul>
                <li>标准MySQL客户端：对于MySQL Cluster，它们与标准的（非 Cluster类）MySQL没有区别。换句话讲，能够从用PHP、Perl、C、C++、Java、Python、Ruby等编写的现有MySQL应用程序访问MySQL Cluster。</li>
                <li>管理客户端：这类客户端与管理服务器相连，并提供了启动和停止节点、启动和停止消息跟踪（仅调试版本）、显示节点版本和状态、启动和停止备份等的命令。</li>
            </ul>
            <p><font color="#ff0000"><strong>三、开始准备</strong></font></p>
            <p><br />
            1、准备服务器<br />
            现在，我们计划建立有5个节点的MySQL CLuster体系，因此需要用到5台机器，分别做如下用途：</p>
            <pre>节点(用途)  IP地址(主机名)
  管理节点(MGM)  192.168.0.1(db1)
  SQL节点1(SQL1)  192.168.0.2(db2)
  SQL节点2(SQL2)  192.168.0.3(db3)
  数据节点1(NDBD1) 192.168.0.4(db4)
  数据节点2(NDBD2) 192.168.0.4(db5)</pre>
            <p>2、注意事项及其他<br />
            每个节点的操作系统都是Linux，下面的描述中将使用主机名，不再使用IP地址来表示。由于MySQL Cluster采用TCP/IP方式连接，并且节点之间的数据传输没有加密，因此这个体系最好只在单独的子网中运行，并且考虑到传输的速率，强烈建议不要跨越公网使用这个体系。所需的MySQL软件请事先在 http://dev.mysql.com/downloads 下载。<br />
            实际上整个体系可以在一个单独的实体计算机上运行成功，当然了，必须设定不同的目录以及端口等，只能作为测试时使用。</p>
            <p><font color="#ff0000"><strong>四、开始安装</strong></font></p>
            <p><br />
            1、假定条件<br />
            在每个节点计算机上都采用 nobody 用户来运行Cluster，因此执行如下命令添加相关用户（如果已经存在则略过，且用root用户执行）：</p>
            <pre>root# /usr/sbin/groupadd nobody
 root# /usr/sbin/useradd nobody -g nobody</pre>
            <p>假设已经下载了mysql可直接使用的二进制安装包，且放在 /tmp 下了。</p>
            <p>2、SQL节点和存储节点(NDB节点)安装(即4个机器重复执行以下步骤)</p>
            <pre>root# cd /tmp/
 root# tar zxf mysql-max-5.0.24-linux-i686.tar.gz
 root# mv mysql-max-5.0.24-linux-i686 /usr/local/mysql/
 root# cd /usr/local/mysql/
 root# ./configure --prefix=/usr/local/mysql
 root# ./scripts/mysql_install_db
 root# chown -R nobody:nobody /usr/local/mysql/</pre>
            <p>3、配置SQL节点</p>
            <pre>root# vi /usr/local/mysql/my.cnf</pre>
            <p>然后输入如下内容：</p>
            <pre>[mysqld]
basedir]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>104</wp:post_id>
		<wp:post_date><![CDATA[2007-04-19 17:39:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-04-19 17:39:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mysql-clustermysql-%e9%9b%86%e7%be%a4-%e9%85%8d%e7%bd%ae%e6%8c%87%e5%8d%97]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>linux 下 php 的 memcache 扩展</title>
		<link>http://blog.00rz.com/2007/04/linux-%e4%b8%8b-php-%e7%9a%84-memcache-%e6%89%a9%e5%b1%95.html</link>
		<pubDate>Wed, 18 Apr 2007 18:35:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=105</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p>首先到 pecl.php.net下载memcahe的库</p>
<p>tar xzvf memcache-2.1.2.tgz</p>
<p>cd memcache-2.1.2.</p>
<p>$ phpize<br />
$ ./configure]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>105</wp:post_id>
		<wp:post_date><![CDATA[2007-04-18 18:35:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-04-18 18:35:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[linux-%e4%b8%8b-php-%e7%9a%84-memcache-%e6%89%a9%e5%b1%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>RSS 2.0 规范</title>
		<link>http://blog.00rz.com/2007/04/rss-2-0-%e8%a7%84%e8%8c%83.html</link>
		<pubDate>Tue, 17 Apr 2007 19:08:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=106</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p>RSS 2.0 Specification [ RSS 2.0 规范]<br />
Contents [目录]<br />
What is RSS? [ RSS 是什么? ] <br />
Sample files [ 示例文件 ] <br />
About this document [ 关于本文档 ] <br />
Required channel elements [ channel 的必要子元素 ] <br />
Optional channel elements [ channel 的可选子元素 ] <br />
Elements of <item > [ <item> 子元素 ] <br />
Comments [ 补充说明 ] <br />
Extending RSS [ RSS 扩展 ] <br />
Roadmap [ 展望 ] <br />
License and authorship [ 许可及原著者 ] <br />
What is RSS? [ RSS 是什么? ]<br />
</p>
<p>RSS 是一种网络内容联合格式.<br />
它的名字来自 Really Simple Syndication (真正简单的联合,简单信息聚合)的首字母缩写.<br />
RSS 是 XML 的分支.所有 RSS 文件都得符合 World Wide Web Consortium (W3C) 网站上发布的 XML 1.0 </p>
<p>规范.<br />
RSS 版本历史概要.<br />
RSS 文档的最顶层是 <rss> 元素(element),有一个强制性的属性 version ,明确说明该文档所遵循的 </p>
<p>RSS 版本.如果遵循本规范,那它的 version 属性肯定是 2.0 .<br />
从属于 <rss> 元素的是单个的 <channel> 元素, 包含了该频道(元数据)的信息及内容. </p>
<p>Sample files [ 示例文件 ]<br />
这里有一些 RSS 0.91, 0.92 和 2.0 的示例文件.<br />
注意,这些链接所指向的文档或服务可能已经不存在了. 0.91 版文档写完即可做 0.91 的示例.维持对示</p>
<p>例的跟踪看来是个好主意.(??) </p>
<p>About this document [ 关于本文档 ]<br />
 本文档描述 RSS 到2002年秋天 2.0.1 版时为止的状况.<br />
它合并了所有的修正和添补,基于 RSS 0.91 (2000年6月) 的基本规范,包括了 RSS 0.92 (2000年12月) </p>
<p>和 RSS 0.94 (2002年8月) 引进的新特性.<br />
修改记录在这里.<br />
首先我们介绍 <channel> 元素必要的及可选的子元素;然后说明 <item> 元素必要的及可选的子元素.在</p>
<p>最后部分回答最常问到的问题(FAQ),并提供未来进展的路标,和 RSS 的扩展的指导. </p>
<p>Required channel elements [ channel 的必要子元素 ]<br />
<br />
这里是 channel 必要子元素的一个列表,每个都带着一个简介,一个示例,以及一个到有效的更完整的描述</p>
<p>的指针.</p>
<p>Element 元素 Description 介绍 Example 示例 <br />
</p>
<p>频道(channel)名字.关乎人们怎样提起你的服务.如果你有一个和你的 RSS 文件包含相同信息的 HTML 网站,你的频道(channel)标题(title)应该和你的网站标题一样. GoUpstate.com News Headlines <br />
link The URL to the HTML website corresponding to the channel. <br />
该频道(channel)相应的 HTML 网站的 URL. <a href="http://www.goupstate.com/">http://www.goupstate.com/</a> <br />
<br />
描述该频道(channel)的短语或句子. The latest news from GoUpstate.com, a Spartanburg Herald-</p>
<p>Journal Web site. </p>
<p>Optional channel elements [ channel 的可选子元素 ]<br />
<br />
这是 channel 的可选子元素的一个列表.</p>
<p>Element 元素 Description 介绍 Example 示例 <br />
<br />
书写频道(channel)所用的语言.比如说,这使得聚合器(aggregator)可以在一个单页内集合所有的意大利</p>
<p>语站点.这里有 Netscape 提供的一份该属性的允许值的列表.你也可以用 W3C 定义的值 en-us <br />
copyright Copyright notice for content in the channel. <br />
频道(channel)内容的版权通告. Copyright 2002, Spartanburg Herald-Journal <br />
managingEditor Email address for person responsible for editorial content. <br />
内容编辑的责任人的 Email 地址. <a href="mailto:geo@herald.com">geo@herald.com</a> (George Matesky) <br />
webMaster Email address for person responsible for technical issues relating to channel. <br />
频道(channel)发布技术的责任人的 Email 地址. <a href="mailto:betty@herald.com">betty@herald.com</a> (Betty Guernsey) <br />
<br />
频道(channel)内容的出版日期.比如说,纽约时报每天出版一期,则其出版日期每24小时跳跃一次.频道</p>
<p>(channel)的 pubDate 就在那时改变. RSS 中的所有日期-时间格式都遵循 RFC 822 的日期和时间规格,</p>
<p>除了年份可以用2位数或4位数表示(4位为佳). Sat, 07 Sep 2002 00:00:01 GMT <br />
lastBuildDate The last time the content of the channel changed. <br />
频道(channel)内容最后修改的时间. Sat, 07 Sep 2002 09:42:31 GMT <br />
category Specify one or more categories that the channel belongs to. Follows the same rules </p>
<p>as the <item>-level category element. More info. <br />
指定频道(channel)所属于的一个或多个分类.与 <item> 级别的 category 元素遵循相同的规则.更多信</p>
<p>息. <category>Newspapers</category> <br />
标志生成频道(channel)所用的程序的一个字符串. MightyInHouse Content System v2.3 <br />
指向 RSS 文件所用格式的文档的 URL .很有可能是到本页面的一个指针(pointer).人们有可能在25年后的某个网络服务器上忽然发现一个 RSS 文件并想了解是什么东西. </p>
<p><a href="http://blogs.law.harvard.edu/tech/rss">http://blogs.law.harvard.edu/tech/rss</a> <br />
允许程序注册一个 cloud 以得到频道(channel)更新的通报,以实现 RSS feed 的轻量级的出版订阅协议.</p>
<p>更多信息见这里. <cloud domain="rpc.sys.com" port="80" path="/RPC2" </p>
<p>registerProcedure="pingMe" protocol="soap"/> <br />
ttl 表示 time to live (存活时间),以分钟为单位,指示说明从出处刷新前一个频道(channel)能在缓存</p>
<p>中存在多长时间.更多信息看这里. <ttl>60</ttl> <br />
image Specifies a GIF, JPEG or PNG image that can be displayed with the channel. More info </p>
<p>here. <br />
指定能和频道(channel)一起显示的一张 GIF, JPEG 或 PNG 图片.更多信息见这里.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>106</wp:post_id>
		<wp:post_date><![CDATA[2007-04-17 19:08:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-04-17 19:08:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[rss-2-0-%e8%a7%84%e8%8c%83]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543640921]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>root用户相同权限的用户</title>
		<link>http://blog.00rz.com/2007/08/root%e7%94%a8%e6%88%b7%e7%9b%b8%e5%90%8c%e6%9d%83%e9%99%90%e7%9a%84%e7%94%a8%e6%88%b7.html</link>
		<pubDate>Fri, 10 Aug 2007 11:12:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=67</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><font size="2">useradd -u 0 -o -g 0 username 使用-o参数可以允许建立<font color="#c60a00">相同</font>id的用户</font></div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>67</wp:post_id>
		<wp:post_date><![CDATA[2007-08-10 11:12:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-08-10 11:12:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[root%e7%94%a8%e6%88%b7%e7%9b%b8%e5%90%8c%e6%9d%83%e9%99%90%e7%9a%84%e7%94%a8%e6%88%b7]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543640947]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>lucene highlighter的使用</title>
		<link>http://blog.00rz.com/2007/08/lucene-highlighter%e7%9a%84%e4%bd%bf%e7%94%a8.html</link>
		<pubDate>Wed, 08 Aug 2007 19:22:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=68</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><pre>package org.apache.lucene.search.highlight;<br /><br />/**<br /> * Licensed to the Apache Software Foundation (ASF) under one or more<br /> * contributor license agreements.  See the NOTICE file distributed with<br /> * this work for additional information regarding copyright ownership.<br /> * The ASF licenses this file to You under the Apache License, Version 2.0<br /> * (the "License"); you may not use this file except in compliance with<br /> * the License.  You may obtain a copy of the License at<br /> *<br /> *     http://www.apache.org/licenses/LICENSE-2.0<br /> *<br /> * Unless required by applicable law or agreed to in writing, software<br /> * distributed under the License is distributed on an "AS IS" BASIS,<br /> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br /> * See the License for the specific language governing permissions and<br /> * limitations under the License.<br /> */<br /><br />import java.io.ByteArrayInputStream;<br />import java.io.IOException;<br />import java.io.Reader;<br />import java.io.StringReader;<br />import java.util.*;<br /><br />import javax.xml.parsers.DocumentBuilder;<br />import javax.xml.parsers.DocumentBuilderFactory;<br /><br />import junit.framework.TestCase;<br /><br />import org.apache.lucene.analysis.*;<br />import org.apache.lucene.analysis.standard.StandardAnalyzer;<br />import org.apache.lucene.document.Document;<br />import org.apache.lucene.document.Field;<br />import org.apache.lucene.index.IndexReader;<br />import org.apache.lucene.index.IndexWriter;<br />import org.apache.lucene.index.Term;<br />import org.apache.lucene.queryParser.ParseException;<br />import org.apache.lucene.queryParser.QueryParser;<br />import org.apache.lucene.search.FilteredQuery;<br />import org.apache.lucene.search.Hits;<br />import org.apache.lucene.search.IndexSearcher;<br />import org.apache.lucene.search.MultiSearcher;<br />import org.apache.lucene.search.PhraseQuery;<br />import org.apache.lucene.search.Query;<br />import org.apache.lucene.search.RangeFilter;<br />import org.apache.lucene.search.Searcher;<br />import org.apache.lucene.search.TermQuery;<br />import org.apache.lucene.search.spans.SpanNearQuery;<br />import org.apache.lucene.search.spans.SpanQuery;<br />import org.apache.lucene.search.spans.SpanTermQuery;<br />import org.apache.lucene.store.RAMDirectory;<br />import org.w3c.dom.Element;<br />import org.w3c.dom.NodeList;<br /><br />/**<br /> * JUnit Test for Highlighter class.<br /> * @author mark@searcharea.co.uk<br /> */<br />public class HighlighterTest extends TestCase implements Formatter<br />{<br /> private IndexReader reader;<br /> private static final String FIELD_NAME = "contents";<br /> private Query query;<br /> RAMDirectory ramDir;<br /> public Searcher searcher = null;<br /> public Hits hits = null;<br /> int numHighlights = 0;<br /> Analyzer analyzer=new StandardAnalyzer();<br /><br /> String texts[] =<br />  {<br />   "Hello this is a piece of text that is very long and contains too much preamble and the meat is really here which says kennedy has been shot",<br />   "This piece of text refers to Kennedy at the beginning then has a longer piece of text that is very long in the middle and finally ends with another reference to Kennedy",<br />   "JFK has been shot",<br />   "John Kennedy has been shot",<br />   "This text has a typo in referring to Keneddy" };<br /><br /> /**<br />  * Constructor for HighlightExtractorTest.<br />  * @param arg0<br />  */<br /> public HighlighterTest(String arg0)<br /> {<br />  super(arg0);<br /> }<br /><br /> public void testSimpleHighlighter() throws Exception<br /> {<br />  doSearching("Kennedy");<br />  Highlighter highlighter = new Highlighter(new QueryScorer(query));<br />  highlighter.setTextFragmenter(new SimpleFragmenter(40));<br />  int maxNumFragmentsRequired = 2;<br />  for (int i = 0; i < hits.length(); i++)<br />  {<br />   String text = hits.doc(i).get(FIELD_NAME);<br />   TokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));<br /><br />   String result =<br />    highlighter.getBestFragments(tokenStream,text,maxNumFragmentsRequired, "...");<br />   System.out.println("\t" + result);<br />  }<br />  //Not sure we can assert anything here - just running to check we dont throw any exceptions<br /> }<br /><br /><br /><br /> public void testGetBestFragmentsSimpleQuery() throws Exception<br /> {<br />  doSearching("Kennedy");<br />  doStandardHighlights();<br />  assertTrue("Failed to find correct number of highlights " + numHighlights + " found", numHighlights == 4);<br /> }<br /> public void testGetFuzzyFragments() throws Exception<br /> {<br />  doSearching("Kinnedy~");<br />  doStandardHighlights();<br />  assertTrue("Failed to find correct number of highlights " + numHighlights + " found", numHighlights == 5);<br /> }<br /><br /> public void testGetWildCardFragments() throws Exception<br /> {<br />  doSearching("K?nnedy");<br />  doStandardHighlights();<br />  assertTrue("Failed to find correct number of highlights " + numHighlights + " found", numHighlights == 4);<br /> }<br /> public void testGetMidWildCardFragments() throws Exception<br /> {<br />  doSearching("K*dy");<br />  doStandardHighlights();<br />  assertTrue("Failed to find correct number of highlights " + numHighlights + " found", numHighlights == 5);<br /> }<br /> public void testGetRangeFragments() throws Exception<br /> {<br />  String queryString=FIELD_NAME + ":[kannedy TO kznnedy]"; <br />  <br />  //Need to explicitly set the QueryParser property to use RangeQuery rather than RangeFilters<br />  QueryParser parser=new QueryParser(FIELD_NAME, new StandardAnalyzer());<br />  parser.setUseOldRangeQuery(true);<br />  query = parser.parse(queryString);<br />  doSearching(query);<br />  <br />  doStandardHighlights();<br />  assertTrue("Failed to find correct number of highlights " + numHighlights + " found", numHighlights == 5);<br /> }<br /><br /> public void testGetBestFragmentsPhrase() throws Exception<br /> {<br />  doSearching("\"John Kennedy\"");<br />  doStandardHighlights();<br />  //Currently highlights "John" and "Kennedy" separately<br />  assertTrue("Failed to find correct number of highlights " + numHighlights + " found", numHighlights == 2);<br /> }<br /> public void testGetBestFragmentsSpan() throws Exception<br /> {<br />  SpanQuery clauses[]={<br />   new SpanTermQuery(new Term("contents","john")),<br />   new SpanTermQuery(new Term("contents","kennedy")),<br />   }; <br />  <br />  SpanNearQuery snq=new SpanNearQuery(clauses,1,true);<br />  doSearching(snq);<br />  doStandardHighlights();<br />  //Currently highlights "John" and "Kennedy" separately<br />  assertTrue("Failed to find correct number of highlights " + numHighlights + " found", numHighlights == 2);<br /> }<br /><br /> public void testOffByOne() throws IOException <br /> {<br />     TermQuery query= new TermQuery( new Term( "data", "help" ));<br />     Highlighter hg = new Highlighter(new SimpleHTMLFormatter(), new QueryScorer( query ));<br />     hg.setTextFragmenter( new NullFragmenter() );<br /><br />     String match = null;<br />     match = hg.getBestFragment( new StandardAnalyzer(), "data", "help me [54-65]");<br />     assertEquals("<b>help</b> me [54-65]", match);<br /> }  <br /> public void testGetBestFragmentsFilteredQuery() throws Exception<br /> {<br />  RangeFilter rf=new RangeFilter("contents","john","john",true,true);<br />  SpanQuery clauses[]={<br />    new SpanTermQuery(new Term("contents","john")),<br />    new SpanTermQuery(new Term("contents","kennedy")),<br />    }; <br />  SpanNearQuery snq=new SpanNearQuery(clauses,1,true);<br />  FilteredQuery fq=new FilteredQuery(snq,rf);<br />  <br />  doSearching(fq);<br />  doStandardHighlights();<br />  //Currently highlights "John" and "Kennedy" separately<br />  assertTrue("Failed to find correct number of highlights " + numHighlights + " found", numHighlights == 2);<br /> }<br /> public void testGetBestFragmentsFilteredPhraseQuery() throws Exception<br /> {<br />  RangeFilter rf=new RangeFilter("contents","john","john",true,true);<br />  PhraseQuery pq=new PhraseQuery();<br />  pq.add(new Term("contents","john"));<br />  pq.add(new  Term("contents","kennedy"));<br />  FilteredQuery fq=new FilteredQuery(pq,rf);<br />  <br />  doSearching(fq);<br />  doStandardHighlights();<br />  //Currently highlights "John" and "Kennedy" separately<br />  assertTrue("Failed to find correct number of highlights " + numHighlights + " found", numHighlights == 2);<br /> }<br /><br /> public void testGetBestFragmentsMultiTerm() throws Exception<br /> {<br />  doSearching("John Kenn*");<br />  doStandardHighlights();<br />  assertTrue("Failed to find correct number of highlights " + numHighlights + " found", numHighlights == 5);<br /> }<br /> public void testGetBestFragmentsWithOr() throws Exception<br /> {<br />  doSearching("JFK OR Kennedy");<br />  doStandardHighlights();<br />  assertTrue("Failed to find correct number of highlights " + numHighlights + " found", numHighlights == 5);<br /> }<br /><br /> public void testGetBestSingleFragment() throws Exception<br /> {<br />  doSearching("Kennedy");<br />  Highlighter highlighter =new Highlighter(this,new QueryScorer(query));<br />  highlighter.setTextFragmenter(new SimpleFragmenter(40));<br /><br />  for (int i = 0; i < hits.length(); i++)<br />  {<br />   String text = hits.doc(i).get(FIELD_NAME);<br />   TokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));<br />   String result = highlighter.getBestFragment(tokenStream,text);<br />   System.out.println("\t" + result);<br />  }<br />  assertTrue("Failed to find correct number of highlights " + numHighlights + " found", numHighlights == 4);<br /><br />  numHighlights = 0;<br />  for (int i = 0; i < hits.length(); i++)<br />  {<br />      String text = hits.doc(i).get(FIELD_NAME);<br />      highlighter.getBestFragment(analyzer, FIELD_NAME,text);<br />  }<br />  assertTrue("Failed to find correct number of highlights " + numHighlights + " found", numHighlights == 4);<br /><br />  numHighlights = 0;<br />  for (int i = 0; i < hits.length(); i++)<br />  {<br />      String text = hits.doc(i).get(FIELD_NAME);<br />      highlighter.getBestFragments(analyzer,FIELD_NAME, text, 10);<br />  }<br />  assertTrue("Failed to find correct number of highlights " + numHighlights + " found", numHighlights == 4);<br /><br /> }<br /><br /> public void testGetBestSingleFragmentWithWeights() throws Exception<br /> {<br />  WeightedTerm[]wTerms=new WeightedTerm[2];<br />  wTerms[0]=new WeightedTerm(10f,"hello");<br />  wTerms[1]=new WeightedTerm(1f,"kennedy");<br />  Highlighter highlighter =new Highlighter(new QueryScorer(wTerms));<br />  TokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(texts[0]));<br />  highlighter.setTextFragmenter(new SimpleFragmenter(2));<br /><br />  String result = highlighter.getBestFragment(tokenStream,texts[0]).trim();<br />  assertTrue("Failed to find best section using weighted terms. Found: ["+result+"]"<br />   , "<b>Hello</b>".equals(result));<br /><br />  //readjust weights<br />  wTerms[1].setWeight(50f);<br />  tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(texts[0]));<br />  highlighter =new Highlighter(new QueryScorer(wTerms));<br />  highlighter.setTextFragmenter(new SimpleFragmenter(2));<br /><br />  result = highlighter.getBestFragment(tokenStream,texts[0]).trim();<br />  assertTrue("Failed to find best section using weighted terms. Found: "+result<br />   , "<b>kennedy</b>".equals(result));<br /> }<br /> <br /> <br /> // tests a "complex" analyzer that produces multiple <br /> // overlapping tokens <br /> public void testOverlapAnalyzer() throws Exception<br /> {<br />  HashMap synonyms = new HashMap();<br />  synonyms.put("football", "soccer,footie");<br />  Analyzer analyzer = new SynonymAnalyzer(synonyms);<br />  String srchkey = "football";<br /><br />  String s = "football-soccer in the euro 2004 footie competition";<br />  QueryParser parser=new QueryParser("bookid",analyzer);<br />  Query query = parser.parse(srchkey);<br /><br />  Highlighter highlighter = new Highlighter(new QueryScorer(query));<br />  TokenStream tokenStream =<br />   analyzer.tokenStream(null, new StringReader(s));<br />  // Get 3 best fragments and seperate with a "..."<br />  String result = highlighter.getBestFragments(tokenStream, s, 3, "...");<br />  String expectedResult="<b>football</b>-<b>soccer</b> in the euro 2004 <b>footie</b> competition";<br />  assertTrue("overlapping analyzer should handle highlights OK",expectedResult.equals(result));<br /> }<br /><br /><br /> public void testGetSimpleHighlight() throws Exception<br /> {<br />  doSearching("Kennedy");<br />  Highlighter highlighter =<br />   new Highlighter(this,new QueryScorer(query));<br /><br />  for (int i = 0; i < hits.length(); i++)<br />  {<br />   String text = hits.doc(i).get(FIELD_NAME);<br />   TokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));<br /><br />   String result = highlighter.getBestFragment(tokenStream,text);<br />   System.out.println("\t" + result);<br />  }<br />  assertTrue("Failed to find correct number of highlights " + numHighlights + " found", numHighlights == 4);<br /> }<br /><br /><br /> public void testGetTextFragments() throws Exception<br /> {<br />  doSearching("Kennedy");<br />  Highlighter highlighter =<br />   new Highlighter(this,new QueryScorer(query));<br />  highlighter.setTextFragmenter(new SimpleFragmenter(20));<br /><br />  for (int i = 0; i < hits.length(); i++)<br />  {<br />   String text = hits.doc(i).get(FIELD_NAME);<br />   TokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));<br /><br />   String stringResults[] = highlighter.getBestFragments(tokenStream,text,10);<br /><br />   tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));<br />   TextFragment fragmentResults[] = highlighter.getBestTextFragments(tokenStream,text,true,10);<br /><br />   assertTrue("Failed to find correct number of text Fragments: " + <br />    fragmentResults.length + " vs "+ stringResults.length, fragmentResults.length==stringResults.length);<br />   for (int j = 0; j < stringResults.length; j++) <br />   {<br />    System.out.println(fragmentResults[j]);<br />    assertTrue("Failed to find same text Fragments: " + <br />     fragmentResults[j] + " found", fragmentResults[j].toString().equals(stringResults[j]));<br />    <br />   }<br />   <br />  }<br /> }<br /><br /> public void testMaxSizeHighlight() throws Exception<br /> {<br />  doSearching("meat");<br />  Highlighter highlighter =<br />   new Highlighter(this,new QueryScorer(query));<br />  highlighter.setMaxDocBytesToAnalyze(30);<br />  TokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(texts[0]));<br />  highlighter.getBestFragment(tokenStream,texts[0]);<br />  assertTrue("Setting MaxDocBytesToAnalyze should have prevented " +<br />   "us from finding matches for this record: " + numHighlights +<br />    " found", numHighlights == 0);<br /> }<br /> public void testMaxSizeHighlightTruncates() throws IOException <br /> {<br />     String goodWord="goodtoken";<br />     String stopWords[]={"stoppedtoken"};<br />     <br />     TermQuery query= new TermQuery( new Term( "data", goodWord ));<br />     SimpleHTMLFormatter fm=new SimpleHTMLFormatter();<br />     Highlighter hg = new Highlighter(fm, new QueryScorer( query ));<br />     hg.setTextFragmenter( new NullFragmenter() );<br /><br />     String match = null;<br />     StringBuffer sb=new StringBuffer();<br />     sb.append(goodWord);<br />     for(int i=0;i<10000;i++)<br />     {<br />      sb.append(" ");<br />      sb.append(stopWords[0]);<br />     }<br />           <br />     hg.setMaxDocBytesToAnalyze(100);<br />     match = hg.getBestFragment( new StandardAnalyzer(stopWords), "data", sb.toString());<br />     assertTrue("Matched text should be no more than 100 chars in length ", <br />       match.length()<hg.getMaxDocBytesToAnalyze());<br />     <br />     //add another tokenized word to the overrall length - but set way beyond <br />     //the length of text under consideration (after a large slug of stop words + whitespace)<br />     sb.append(" ");<br />     sb.append(goodWord);<br />     match = hg.getBestFragment( new StandardAnalyzer(stopWords), "data", sb.toString());<br />     assertTrue("Matched text should be no more than 100 chars in length ", <br />       match.length()<hg.getMaxDocBytesToAnalyze());<br />     <br />     <br /> }  <br /><br /><br /><br /> public void testUnRewrittenQuery() throws IOException, ParseException<br /> {<br />  //test to show how rewritten query can still be used<br />  searcher = new IndexSearcher(ramDir);<br />  Analyzer analyzer=new StandardAnalyzer();<br /><br />  QueryParser parser=new QueryParser(FIELD_NAME,analyzer); <br />  Query query = parser.parse("JF? or Kenned*");<br />  System.out.println("Searching with primitive query");<br />  //forget to set this and...<br />  //query=query.rewrite(reader);<br />  Hits hits = searcher.search(query);<br /><br />  //create an instance of the highlighter with the tags used to surround highlighted text<br />//  QueryHighlightExtractor highlighter = new QueryHighlightExtractor(this, query, new StandardAnalyzer());<br />  Highlighter highlighter =<br />   new Highlighter(this,new QueryScorer(query));<br /><br />  highlighter.setTextFragmenter(new SimpleFragmenter(40));<br /><br />  int maxNumFragmentsRequired = 3;<br /><br />  for (int i = 0; i < hits.length(); i++)<br />  {<br />   String text = hits.doc(i).get(FIELD_NAME);<br />   TokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));<br /><br />   String highlightedText = highlighter.getBestFragments(tokenStream,text,maxNumFragmentsRequired,"...");<br />   System.out.println(highlightedText);<br />  }<br />  //We expect to have zero highlights if the query is multi-terms and is not rewritten!<br />  assertTrue("Failed to find correct number of highlights " + numHighlights + " found", numHighlights == 0);<br /> }<br /><br /> public void testNoFragments() throws Exception<br /> {<br />  doSearching("AnInvalidQueryWhichShouldYieldNoResults");<br />  Highlighter highlighter =<br />   new Highlighter(this,new QueryScorer(query));<br /><br />  for (int i = 0; i < texts.length; i++)<br />  {<br />   String text = texts[i];<br />   TokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));<br /><br />   String result = highlighter.getBestFragment(tokenStream,text);<br />   assertNull("The highlight result should be null for text with no query terms", result);<br />  }<br /> }<br /> <br /> /**<br />  * Demonstrates creation of an XHTML compliant doc using new encoding facilities.<br />  * @throws Exception<br />  */<br /> public void testEncoding() throws Exception<br />    {<br />        String rawDocContent = "\"Smith & sons' prices < 3 and >4\" claims article";<br />        //run the highlighter on the raw content (scorer does not score any tokens for <br />        // highlighting but scores a single fragment for selection<br />        Highlighter highlighter = new Highlighter(this,<br />                new SimpleHTMLEncoder(), new Scorer()<br />                {<br />                    public void startFragment(TextFragment newFragment)<br />                    {<br />                    }<br />                    public float getTokenScore(Token token)<br />                    {<br />                        return 0;<br />                    }<br />                    public float getFragmentScore()<br />                    {<br />                        return 1;<br />                    }<br />                });<br />        highlighter.setTextFragmenter(new SimpleFragmenter(2000));<br />        TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME,<br />                new StringReader(rawDocContent));<br /><br />        String encodedSnippet = highlighter.getBestFragments(tokenStream, rawDocContent,1,"");<br />        //An ugly bit of XML creation:<br />        String xhtml="<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"+<br />              "<!DOCTYPE html\n"+<br />              "PUBLIC \"//W3C//DTD XHTML 1.0 Transitional//EN\"\n"+<br />              "\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n"+<br />              "<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n"+<br />              "<head>\n"+<br />              "<title>My Test HTML Document</title>\n"+<br />              "</head>\n"+<br />              "<body>\n"+<br />              "<h2>"+encodedSnippet+"</h2>\n"+<br />              "</body>\n"+<br />              "</html>";<br />        //now an ugly built of XML parsing to test the snippet is encoded OK <br />    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();<br />    DocumentBuilder db = dbf.newDocumentBuilder();<br />    org.w3c.dom.Document doc = db.parse(new ByteArrayInputStream(xhtml.getBytes()));<br />    Element root=doc.getDocumentElement();    <br />    NodeList nodes=root.getElementsByTagName("body");<br />    Element body=(Element) nodes.item(0);<br />    nodes=body.getElementsByTagName("h2");<br />        Element h2=(Element) nodes.item(0); <br />        String decodedSnippet=h2.getFirstChild().getNodeValue();<br />        assertEquals("XHTML Encoding should have worked:", rawDocContent,decodedSnippet);<br />    }<br /><br /> public void testMultiSearcher() throws Exception<br /> {<br />  //setup index 1<br />  RAMDirectory ramDir1 = new RAMDirectory();<br />  IndexWriter writer1 = new IndexWriter(ramDir1, new StandardAnalyzer(), true);<br />  Document d = new Document();<br />  Field f = new Field(FIELD_NAME, "multiOne", Field.Store.YES, Field.Index.TOKENIZED);<br />  d.add(f);<br />  writer1.addDocument(d);<br />  writer1.optimize();<br />  writer1.close();<br />  IndexReader reader1 = IndexReader.open(ramDir1);<br /><br />  //setup index 2<br />  RAMDirectory ramDir2 = new RAMDirectory();<br />  IndexWriter writer2 = new IndexWriter(ramDir2, new StandardAnalyzer(), true);<br />  d = new Document();<br />  f = new Field(FIELD_NAME, "multiTwo", Field.Store.YES, Field.Index.TOKENIZED);<br />  d.add(f);<br />  writer2.addDocument(d);<br />  writer2.optimize();<br />  writer2.close();<br />  IndexReader reader2 = IndexReader.open(ramDir2);<br /><br /><br /><br />  IndexSearcher searchers[]=new IndexSearcher[2];<br />  searchers[0] = new IndexSearcher(ramDir1);<br />  searchers[1] = new IndexSearcher(ramDir2);<br />  MultiSearcher multiSearcher=new MultiSearcher(searchers);<br />  QueryParser parser=new QueryParser(FIELD_NAME, new StandardAnalyzer());<br />  query = parser.parse("multi*");<br />  System.out.println("Searching for: " + query.toString(FIELD_NAME));<br />  //at this point the multisearcher calls combine(query[])<br />  hits = multiSearcher.search(query);<br /><br />  //query = QueryParser.parse("multi*", FIELD_NAME, new StandardAnalyzer());<br />  Query expandedQueries[]=new Query[2];<br />  expandedQueries[0]=query.rewrite(reader1);<br />  expandedQueries[1]=query.rewrite(reader2);<br />  query=query.combine(expandedQueries);<br /><br /><br />  //create an instance of the highlighter with the tags used to surround highlighted text<br />  Highlighter highlighter =<br />   new Highlighter(this,new QueryScorer(query));<br /><br />  for (int i = 0; i < hits.length(); i++)<br />  {<br />   String text = hits.doc(i).get(FIELD_NAME);<br />   TokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));<br />   String highlightedText = highlighter.getBestFragment(tokenStream,text);<br />   System.out.println(highlightedText);<br />  }<br />  assertTrue("Failed to find correct number of highlights " + numHighlights + " found", numHighlights == 2);<br /><br /> }<br /> <br /> public void testFieldSpecificHighlighting() throws IOException, ParseException<br /> {<br />  String docMainText="fred is one of the people";<br />  QueryParser parser=new QueryParser(FIELD_NAME,analyzer);<br />  Query query=parser.parse("fred category:people");<br />  <br />  //highlighting respects fieldnames used in query<br />  QueryScorer fieldSpecificScorer=new QueryScorer(query, "contents");<br />  Highlighter fieldSpecificHighlighter =<br />   new Highlighter(new SimpleHTMLFormatter(),fieldSpecificScorer);<br />  fieldSpecificHighlighter.setTextFragmenter(new NullFragmenter());<br />  String result=fieldSpecificHighlighter.getBestFragment(analyzer,FIELD_NAME,docMainText);<br />  assertEquals("Should match",result,"<b>fred</b> is one of the people");<br />  <br />  //highlighting does not respect fieldnames used in query<br />  QueryScorer fieldInSpecificScorer=new QueryScorer(query);<br />  Highlighter fieldInSpecificHighlighter =<br />   new Highlighter(new SimpleHTMLFormatter(),fieldInSpecificScorer);<br />  fieldInSpecificHighlighter.setTextFragmenter(new NullFragmenter());<br />  result=fieldInSpecificHighlighter.getBestFragment(analyzer,FIELD_NAME,docMainText);<br />  assertEquals("Should match",result,"<b>fred</b> is one of the <b>people</b>");<br />  <br />  <br />  reader.close();<br />  <br /> }<br /><br />  protected TokenStream getTS2() {<br />    //String s = "Hi-Speed10 foo";<br />    return new TokenStream() {<br />      Iterator iter;<br />      List lst;<br />      {<br />        lst = new ArrayList();<br />        Token t;<br />        t = new Token("hi",0,2);<br />        lst.add(t);<br />        t = new Token("hispeed",0,8);<br />        lst.add(t);<br />        t = new Token("speed",3,8);<br />        t.setPositionIncrement(0);<br />        lst.add(t);<br />        t = new Token("10",8,10);<br />        lst.add(t);<br />        t = new Token("foo",11,14);<br />        lst.add(t);<br />        iter = lst.iterator();<br />      }<br />      public Token next() throws IOException {<br />        return iter.hasNext() ? (Token)iter.next() : null;<br />      }<br />    };<br />  }<br /><br />  // same token-stream as above, but the bigger token comes first this time<br />  protected TokenStream getTS2a() {<br />    //String s = "Hi-Speed10 foo";<br />    return new TokenStream() {<br />      Iterator iter;<br />      List lst;<br />      {<br />        lst = new ArrayList();<br />        Token t;<br />        t = new Token("hispeed",0,8);<br />        lst.add(t);<br />        t = new Token("hi",0,2);<br />        t.setPositionIncrement(0);<br />        lst.add(t);<br />        t = new Token("speed",3,8);<br />        lst.add(t);<br />        t = new Token("10",8,10);<br />        lst.add(t);<br />        t = new Token("foo",11,14);<br />        lst.add(t);<br />        iter = lst.iterator();<br />      }<br />      public Token next() throws IOException {<br />        return iter.hasNext() ? (Token)iter.next() : null;<br />      }<br />    };<br />  }<br /><br />  public void testOverlapAnalyzer2() throws Exception<br />  {<br /><br />    String s = "Hi-Speed10 foo";<br /><br />    Query query; Highlighter highlighter; String result;<br /><br />    query = new QueryParser("text",new WhitespaceAnalyzer()).parse("foo");<br />    highlighter = new Highlighter(new QueryScorer(query));<br />    result = highlighter.getBestFragments(getTS2(), s, 3, "...");<br />    assertEquals("Hi-Speed10 <b>foo</b>",result);<br /><br />    query = new QueryParser("text",new WhitespaceAnalyzer()).parse("10");<br />    highlighter = new Highlighter(new QueryScorer(query));<br />    result = highlighter.getBestFragments(getTS2(), s, 3, "...");<br />    assertEquals("Hi-Speed<b>10</b> foo",result);<br /><br />    query = new QueryParser("text",new WhitespaceAnalyzer()).parse("hi");<br />    highlighter = new Highlighter(new QueryScorer(query));<br />    result = highlighter.getBestFragments(getTS2(), s, 3, "...");<br />    assertEquals("<b>Hi</b>-Speed10 foo",result);<br /><br />    query = new QueryParser("text",new WhitespaceAnalyzer()).parse("speed");<br />    highlighter = new Highlighter(new QueryScorer(query));<br />    result = highlighter.getBestFragments(getTS2(), s, 3, "...");<br />    assertEquals("Hi-<b>Speed</b>10 foo",result);<br /><br />    query = new QueryParser("text",new WhitespaceAnalyzer()).parse("hispeed");<br />    highlighter = new Highlighter(new QueryScorer(query));<br />    result = highlighter.getBestFragments(getTS2(), s, 3, "...");<br />    assertEquals("<b>Hi-Speed</b>10 foo",result);<br /><br />    query = new QueryParser("text",new WhitespaceAnalyzer()).parse("hi speed");<br />    highlighter = new Highlighter(new QueryScorer(query));<br />    result = highlighter.getBestFragments(getTS2(), s, 3, "...");<br />    assertEquals("<b>Hi-Speed</b>10 foo",result);<br /><br />    /////////////////// same tests, just put the bigger overlapping token first<br />        query = new QueryParser("text",new WhitespaceAnalyzer()).parse("foo");<br />    highlighter = new Highlighter(new QueryScorer(query));<br />    result = highlighter.getBestFragments(getTS2a(), s, 3, "...");<br />    assertEquals("Hi-Speed10 <b>foo</b>",result);<br /><br />    query = new QueryParser("text",new WhitespaceAnalyzer()).parse("10");<br />    highlighter = new Highlighter(new QueryScorer(query));<br />    result = highlighter.getBestFragments(getTS2a(), s, 3, "...");<br />    assertEquals("Hi-Speed<b>10</b> foo",result);<br /><br />    query = new QueryParser("text",new WhitespaceAnalyzer()).parse("hi");<br />    highlighter = new Highlighter(new QueryScorer(query));<br />    result = highlighter.getBestFragments(getTS2a(), s, 3, "...");<br />    assertEquals("<b>Hi</b>-Speed10 foo",result);<br /><br />    query = new QueryParser("text",new WhitespaceAnalyzer()).parse("speed");<br />    highlighter = new Highlighter(new QueryScorer(query));<br />    result = highlighter.getBestFragments(getTS2a(), s, 3, "...");<br />    assertEquals("Hi-<b>Speed</b>10 foo",result);<br /><br />    query = new QueryParser("text",new WhitespaceAnalyzer()).parse("hispeed");<br />    highlighter = new Highlighter(new QueryScorer(query));<br />    result = highlighter.getBestFragments(getTS2a(), s, 3, "...");<br />    assertEquals("<b>Hi-Speed</b>10 foo",result);<br /><br />    query = new QueryParser("text",new WhitespaceAnalyzer()).parse("hi speed");<br />    highlighter = new Highlighter(new QueryScorer(query));<br />    result = highlighter.getBestFragments(getTS2a(), s, 3, "...");<br />    assertEquals("<b>Hi-Speed</b>10 foo",result);<br />  }<br /><br /><br />/*<br /><br /> public void testBigramAnalyzer() throws IOException, ParseException<br /> {<br />  //test to ensure analyzers with none-consecutive start/end offsets<br />  //dont double-highlight text<br />  //setup index 1<br />  RAMDirectory ramDir = new RAMDirectory();<br />  Analyzer bigramAnalyzer=new CJKAnalyzer();<br />  IndexWriter writer = new IndexWriter(ramDir,bigramAnalyzer , true);<br />  Document d = new Document();<br />  Field f = new Field(FIELD_NAME, "java abc def", true, true, true);<br />  d.add(f);<br />  writer.addDocument(d);<br />  writer.close();<br />  IndexReader reader = IndexReader.open(ramDir);<br /><br />  IndexSearcher searcher=new IndexSearcher(reader);<br />  query = QueryParser.parse("abc", FIELD_NAME, bigramAnalyzer);<br />  System.out.println("Searching for: " + query.toString(FIELD_NAME));<br />  hits = searcher.search(query);<br /><br />  Highlighter highlighter =<br />   new Highlighter(this,new QueryFragmentScorer(query));<br /><br />  for (int i = 0; i < hits.length(); i++)<br />  {<br />   String text = hits.doc(i).get(FIELD_NAME);<br />   TokenStream tokenStream=bigramAnalyzer.tokenStream(FIELD_NAME,new StringReader(text));<br />   String highlightedText = highlighter.getBestFragment(tokenStream,text);<br />   System.out.println(highlightedText);<br />  }<br /><br /> }<br />*/<br /><br /><br /> public String highlightTerm(String originalText , TokenGroup group)<br /> {<br />  if(group.getTotalScore()<=0)<br />  {<br />   return originalText;<br />  }<br />  numHighlights++; //update stats used in assertions<br />  return "<b>" + originalText + "</b>";<br /> }<br /> <br /> public void doSearching(String queryString) throws Exception<br /> {<br />  QueryParser parser=new QueryParser(FIELD_NAME, new StandardAnalyzer());<br />  query = parser.parse(queryString);<br />  doSearching(query);<br /> }<br /> public void doSearching(Query unReWrittenQuery) throws Exception<br /> {<br />  searcher = new IndexSearcher(ramDir);<br />  //for any multi-term queries to work (prefix, wildcard, range,fuzzy etc) you must use a rewritten query!<br />  query=unReWrittenQuery.rewrite(reader);<br />  System.out.println("Searching for: " + query.toString(FIELD_NAME));<br />  hits = searcher.search(query);<br /> } <br /><br /> void doStandardHighlights() throws Exception<br /> {<br />  Highlighter highlighter =new Highlighter(this,new QueryScorer(query));<br />  highlighter.setTextFragmenter(new SimpleFragmenter(20));<br />  for (int i = 0; i < hits.length(); i++)<br />  {<br />   String text = hits.doc(i).get(FIELD_NAME);<br />   int maxNumFragmentsRequired = 2;<br />   String fragmentSeparator = "...";<br />   TokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));<br /><br />   String result =<br />    highlighter.getBestFragments(<br />     tokenStream,<br />     text,<br />     maxNumFragmentsRequired,<br />     fragmentSeparator);<br />   System.out.println("\t" + result);<br />  }<br /> }<br /><br /> /*<br />  * @see TestCase#setUp()<br />  */<br /> protected void setUp() throws Exception<br /> {<br />  ramDir = new RAMDirectory();<br />  IndexWriter writer = new IndexWriter(ramDir, new StandardAnalyzer(), true);<br />  for (int i = 0; i < texts.length; i++)<br />  {<br />   addDoc(writer, texts[i]);<br />  }<br /><br />  writer.optimize();<br />  writer.close();<br />  reader = IndexReader.open(ramDir);<br />  numHighlights = 0;<br /> }<br /><br /> private void addDoc(IndexWriter writer, String text) throws IOException<br /> {<br />  Document d = new Document();<br />  Field f = new Field(FIELD_NAME, text,Field.Store.YES, Field.Index.TOKENIZED);<br />  d.add(f);<br />  writer.addDocument(d);<br /><br /> }<br /><br /> /*<br />  * @see TestCase#tearDown()<br />  */<br /> protected void tearDown() throws Exception<br /> {<br />  super.tearDown();<br /> }<br /><br />}<br /><br /><br />//===================================================================<br />//========== BEGIN TEST SUPPORTING CLASSES<br />//========== THESE LOOK LIKE, WITH SOME MORE EFFORT THESE COULD BE<br />//========== MADE MORE GENERALLY USEFUL.<br />// TODO - make synonyms all interchangeable with each other and produce<br />// a version that does hyponyms - the "is a specialised type of ...."<br />// so that car = audi, bmw and volkswagen but bmw != audi so different<br />// behaviour to synonyms<br />//===================================================================<br /><br />class SynonymAnalyzer extends Analyzer<br />{<br /> private Map synonyms;<br /><br /> public SynonymAnalyzer(Map synonyms)<br /> {<br />  this.synonyms = synonyms;<br /> }<br /><br /> /* (non-Javadoc)<br />  * @see org.apache.lucene.analysis.Analyzer#tokenStream(java.lang.String, java.io.Reader)<br />  */<br /> public TokenStream tokenStream(String arg0, Reader arg1)<br /> {<br />  return new SynonymTokenizer(new LowerCaseTokenizer(arg1), synonyms);<br /> }<br />}<br /><br />/**<br /> * Expands a token stream with synonyms (TODO - make the synonyms analyzed by choice of analyzer)<br /> * @author MAHarwood<br /> */<br />class SynonymTokenizer extends TokenStream<br />{<br /> private TokenStream realStream;<br /> private Token currentRealToken = null;<br /> private Map synonyms;<br /> StringTokenizer st = null;<br /> public SynonymTokenizer(TokenStream realStream, Map synonyms)<br /> {<br />  this.realStream = realStream;<br />  this.synonyms = synonyms;<br /> }<br /> public Token next() throws IOException<br /> {<br />  if (currentRealToken == null)<br />  {<br />   Token nextRealToken = realStream.next();<br />   if (nextRealToken == null)<br />   {<br />    return null;<br />   }<br />   String expansions = (String) synonyms.get(nextRealToken.termText());<br />   if (expansions == null)<br />   {<br />    return nextRealToken;<br />   }<br />   st = new StringTokenizer(expansions, ",");<br />   if (st.hasMoreTokens())<br />   {<br />    currentRealToken = nextRealToken;<br />   }<br />   return currentRealToken;<br />  }<br />  else<br />  {<br />   String nextExpandedValue = st.nextToken();<br />   Token expandedToken =<br />    new Token(<br />     nextExpandedValue,<br />     currentRealToken.startOffset(),<br />     currentRealToken.endOffset());<br />   expandedToken.setPositionIncrement(0);<br />   if (!st.hasMoreTokens())<br />   {<br />    currentRealToken = null;<br />    st = null;<br />   }<br />   return expandedToken;<br />  }<br /> }<br /><br />}</pre></div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>68</wp:post_id>
		<wp:post_date><![CDATA[2007-08-08 19:22:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-08-08 19:22:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[lucene-highlighter%e7%9a%84%e4%bd%bf%e7%94%a8]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>java 分页类[o]</title>
		<link>http://blog.00rz.com/2007/08/java-%e5%88%86%e9%a1%b5%e7%b1%bbo.html</link>
		<pubDate>Wed, 08 Aug 2007 17:09:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=69</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  >import java.util.ArrayList;<br />
import java.util.List;<br />
<br />
public class Pager {<br />
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>69</wp:post_id>
		<wp:post_date><![CDATA[2007-08-08 17:09:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-08-08 17:09:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[java-%e5%88%86%e9%a1%b5%e7%b1%bbo]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>过滤 脑残体中的控制字符</title>
		<link>http://blog.00rz.com/2007/08/%e8%bf%87%e6%bb%a4-%e8%84%91%e6%ae%8b%e4%bd%93%e4%b8%ad%e7%9a%84%e6%8e%a7%e5%88%b6%e5%ad%97%e7%ac%a6.html</link>
		<pubDate>Wed, 08 Aug 2007 10:05:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=70</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p><?php<br />
$mysql = mysqli_connect("localhost", "user", "password", "blog");<br />
$result = $mysql->query("SET NAMES gbk");<br />
$result = $mysql->query("SELECT * FROM blog_clip where deleted]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>70</wp:post_id>
		<wp:post_date><![CDATA[2007-08-08 10:05:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-08-08 10:05:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%bf%87%e6%bb%a4-%e8%84%91%e6%ae%8b%e4%bd%93%e4%b8%ad%e7%9a%84%e6%8e%a7%e5%88%b6%e5%ad%97%e7%ac%a6]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>PHP中GBK和UTF8编码处理[http://www.fulin.org/blog/2007/05/29/php-utf8-gbk/]</title>
		<link>http://blog.00rz.com/2007/08/php%e4%b8%adgbk%e5%92%8cutf8%e7%bc%96%e7%a0%81%e5%a4%84%e7%90%86httpwww-fulin-orgblog20070529php-utf8-gbk.html</link>
		<pubDate>Tue, 07 Aug 2007 10:41:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=71</guid>
		<description></description>
		<content:encoded><![CDATA[当我用java 解析带有特殊字符（同事称为 简体繁体 脑残体）(比如说\z)的时候就会保存
在网上看到这篇文章 记录下来 用做过滤非显示字符

一、编码范围1. GBK (GB2312/GB18030)
\x00-\xff GBK双字节编码范围
\x20-\x7f ASCII
\xa1-\xff 中文
\x80-\xff 中文

2. UTF-8 (Unicode)
\u4e00-\u9fa5 (中文)
\x3130-\x318F (韩文
\xAC00-\xD7A3 (韩文)
\u0800-\u4e00 (日文)
ps: 韩文是大于[\u9fa5]的字符
正则例子:
<pre lang="php">
preg_replace(”/([\x80-\xff])/”,”",$str);
preg_replace(”/([u4e00-u9fa5])/”,”",$str);
</pre>

二、代码例子
<pre lang="php">
//判断内容里有没有中文-GBK (PHP)
function check_is_chinese($s){
    return preg_match('/[\x80-\xff]./', $s);
}
//获取字符串长度-GBK (PHP)
function gb_strlen($str){
    $count = 0;
    for($i=0; $i<strlen($str); $i++){
        $s = substr($str, $i, 1);
        if (preg_match("/[\x80-\xff]/", $s)) ++$i;
          ++$count;
    }
    return $count;
}
//截取字符串字串-GBK (PHP)
function gb_substr($str, $len){
    $count = 0;
    for($i=0; $i<strlen($str); $i++){
        if($count == $len) break;
        if(preg_match("/[\x80-\xff]/", substr($str, $i, 1))) ++$i;
          ++$count;        
    }
    return substr($str, 0, $i);
}
//统计字符串长度-UTF8 (PHP)
function utf8_strlen($str) {
    $count = 0;
    for($i = 0; $i < strlen($str); $i++){
        $value = ord($str[$i]);
        if($value > 127) {
            $count++;
            if($value >= 192 && $value <= 223) $i++;
            elseif($value >= 224 && $value <= 239) $i = $i + 2;
            elseif($value >= 240 && $value <= 247) $i = $i + 3;
            else die('Not a UTF-8 compatible string');
        }
        $count++;
    }
    return $count;
}
//截取字符串-UTF8(PHP)
function utf8_substr($str,$position,$length){
    $start_position = strlen($str);
    $start_byte = 0;
    $end_position = strlen($str);
    $count = 0;
    for($i = 0; $i < strlen($str); $i++){
        if($count >= $position && $start_position > $i){
            $start_position = $i;
            $start_byte = $count;
        }
        if(($count-$start_byte)>=$length) {
            $end_position = $i;
            break;
        }    
        $value = ord($str[$i]);
        if($value > 127){
            $count++;
            if($value >= 192 && $value <= 223) $i++;
            elseif($value >= 224 && $value <= 239) $i = $i + 2;
            elseif($value >= 240 && $value <= 247) $i = $i + 3;
            else die('Not a UTF-8 compatible string');
        }
        $count++;
    }
    return(substr($str,$start_position,$end_position-$start_position));
}
</pre>
=============
<pre lang="javascript">
//判断是否是有韩文-UTF-8 (JavaScript)
function checkKoreaChar(str) {
    for(i=0; i<str.length; i++) {
        if(((str.charCodeAt(i) > 0x3130 && str.charCodeAt(i) < 0x318F) || (str.charCodeAt(i) >= 0xAC00 && str.charCodeAt(i) <= 0xD7A3))) {
            return true;
        }
    }
    return false;
}
//判断是否有中文字符-GBK (JavaScript)
function check_chinese_char(s){
    return (s.length != s.replace(/[^\x00-\xff]/g,"**").length);
}
</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>71</wp:post_id>
		<wp:post_date><![CDATA[2007-08-07 10:41:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-08-07 10:41:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[php%e4%b8%adgbk%e5%92%8cutf8%e7%bc%96%e7%a0%81%e5%a4%84%e7%90%86httpwww-fulin-orgblog20070529php-utf8-gbk]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543640955]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>用Lucene实现在检索结果中再检索[http://hi.baidu.com/injava/blog/item/8321960a5900cd3cb0351d1f.html]</title>
		<link>http://blog.00rz.com/2007/08/%e7%94%a8lucene%e5%ae%9e%e7%8e%b0%e5%9c%a8%e6%a3%80%e7%b4%a2%e7%bb%93%e6%9e%9c%e4%b8%ad%e5%86%8d%e6%a3%80%e7%b4%a2httphi-baidu-cominjavablogitem8321960a5900cd3cb0351d1f-html.html</link>
		<pubDate>Thu, 02 Aug 2007 15:07:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=72</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  >Lucene是可以做到的，利用lucene的Filter，具体可以查看lucene的api中的org.apache.lucene.search.CachingWrapperFilter，它可以缓存上次的搜索结果，从而实现在结果中的搜索。<br />
<br />
测试实例：<br />
package com.wsjava;<br />
import java.io.IOException;<br />
import org.apache.lucene.analysis.SimpleAnalyzer;<br />
import org.apache.lucene.document.Document;<br />
import org.apache.lucene.document.Field;<br />
import org.apache.lucene.index.IndexWriter;<br />
import org.apache.lucene.queryParser.ParseException;<br />
import org.apache.lucene.queryParser.QueryParser;<br />
import org.apache.lucene.search.CachingWrapperFilter;<br />
import org.apache.lucene.search.Filter;<br />
import org.apache.lucene.search.Hits;<br />
import org.apache.lucene.search.IndexSearcher;<br />
import org.apache.lucene.search.Query;<br />
import org.apache.lucene.search.QueryFilter;<br />
<br />
public class IndexTest {<br />
<br />
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>72</wp:post_id>
		<wp:post_date><![CDATA[2007-08-02 15:07:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-08-02 15:07:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%94%a8lucene%e5%ae%9e%e7%8e%b0%e5%9c%a8%e6%a3%80%e7%b4%a2%e7%bb%93%e6%9e%9c%e4%b8%ad%e5%86%8d%e6%a3%80%e7%b4%a2httphi-baidu-cominjavablogitem8321960a5900cd3cb0351d1f-html]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>文件 读取 加速</title>
		<link>http://blog.00rz.com/2007/08/%e6%96%87%e4%bb%b6-%e8%af%bb%e5%8f%96-%e5%8a%a0%e9%80%9f.html</link>
		<pubDate>Thu, 02 Aug 2007 13:15:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=73</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><h4 class="TextColor1" style="margin-bottom: 0px"> </h4>
<div class="bvMsg">
<div>最初，使用 RAMDisk 是通过在 ram 设备上建立文件系统并挂载来实现的。</div>
<div># mkdir /mnt/ramfs</div>
<div>然后把下面的指令加入 /etc/rc.local 。</div>
<div>/sbin/mkfs -t ext3 /dev/ram0<br />
/bin/mount /dev/ram0 /mnt/ramfs<br />
/bin/chmod -R 1777 /mnt/ramfs</div>
<div>RAMDisk 的默认大小是 8M （可以在编译内核时设定），如果要增加 RAMDisk 的大小，需要在系统启动时给内核传参数，在 grub.conf 的 kernel 行末加上 ramdisk_size=131072 ，这里不能是 128M 这样的写法，应该是 128*1024 。</div>
<div> </div>
<div>使用 ram 设备的灵活性不够，不方便。之后就使用 shm 了。</div>
<div>以 /tmp 绑定到 shm 为例，可以把下面的指令加入 /etc/rc.local 。</div>
<div>mkdir /dev/shm/tmp<br />
chmod 1777 /dev/shm/tmp<br />
mount --bind /dev/shm/tmp /tmp</div>
<div> </div>
<div>使用 shm 要稍微方便些了，不过还是不够，更方便的办法是通过 mount 使用 tmpfs 文件系统。</div>
<div># mkdir /mnt/tmpfs<br />
# mount -t tmpfs -o size=128m,mode=1777 tmpfs /mnt/tmpfs</div>
<div>这里的 128m 就是 128Mb 的意思。</div>
<div>卸载：# umount /mnt/tmpfs</div>
<div>可以添加相应的设置到 /etc/fstab 开机自动挂载。</div>
<div>Debian 系统在启动时会清空 /tmp 目录，让 /tmp 使用 tmpfs 再合适不过了，这样还可以提高系统性能。</div>
<div>编辑 /etc/fstab，加入或修改 /tmp 这行：</div>
<div>tmpfs]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>73</wp:post_id>
		<wp:post_date><![CDATA[2007-08-02 13:15:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-08-02 13:15:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%96%87%e4%bb%b6-%e8%af%bb%e5%8f%96-%e5%8a%a0%e9%80%9f]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>Linux的Shell编程之Shell程序设计的流程控制[转]</title>
		<link>http://blog.00rz.com/2007/07/linux%e7%9a%84shell%e7%bc%96%e7%a8%8b%e4%b9%8bshell%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1%e7%9a%84%e6%b5%81%e7%a8%8b%e6%8e%a7%e5%88%b6%e8%bd%ac.html</link>
		<pubDate>Fri, 27 Jul 2007 11:33:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=74</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><div class="cnt"><strong><br />
<br />
</strong><span class="tpc_content"><br />
<font size="2">和其他高级程序设计语言一样，Shell提供了用来控制程序执行流程的命令，包括条件分支和循环结构，用户可以用这些命令创建非常复杂的程序。<br />
<br />
　　与传统语言不同的是，Shell用于指定条件值的不是布尔运算式，而是命令和字串。<br />
<br />
　　1．测试命令<br />
<br />
　　test命令用于检查某个条件是否成立，它可以进行数值、字符和文件3个方面的测试，其测试符和相应的功能分别如下。<br />
<br />
　　（1）数值测试：<br />
<br />
　　-eq 等于则为真。<br />
<br />
　　-ne 不等于则为真。<br />
<br />
　　-gt 大于则为真。<br />
<br />
　　-ge 大于等于则为真。<br />
<br />
　　-lt 小于则为真。<br />
<br />
　　-le 小于等于则为真。<br />
<br />
　　（2）字串测试：<br />
<br />
　　= 等于则为真。<br />
<br />
　　!= 不相等则为真。<br />
<br />
　　-z字串 字串长度伪则为真。<br />
<br />
　　-n字串 字串长度不伪则为真。<br />
<br />
　　（3）文件测试：<br />
<br />
　　-e文件名 如果文件存在则为真。<br />
<br />
　　-r文件名 如果文件存在且可读则为真。<br />
<br />
　　-w文件名 如果文件存在且可写则为真。<br />
<br />
　　-x文件名 如果文件存在且可执行则为真。<br />
<br />
　　-s文件名 如果文件存在且至少有一个字符则为真。<br />
<br />
　　-d文件名 如果文件存在且为目录则为真。<br />
<br />
　　-f文件名 如果文件存在且为普通文件则为真。<br />
<br />
　　-c文件名 如果文件存在且为字符型特殊文件则为真。<br />
<br />
　　-b文件名 如果文件存在且为块特殊文件则为真。<br />
<br />
　　另外，Linux还提供了与（！）、或（-o）、非（-a）三个逻辑操作符，用于将测试条件连接起来，其优先顺序为：！最高，-a次之，-o最低。<br />
<br />
　　同时，bash也能完成简单的算术运算，格式如下：<br />
<br />
　　$[expression]<br />
<br />
　　例如：<br />
<br />
　　var1=2<br />
<br />
　　var2=$[var1*10+1]<br />
<br />
　　则var2的值为21。<br />
<br />
　　2．if条件语句<br />
<br />
　　Shell程序中的条件分支是通过if条件语句来实现的，其一般格式为：<br />
<br />
　　if 条件命令串<br />
<br />
　　then<br />
<br />
　　条件为真时的命令串<br />
<br />
　　else<br />
<br />
　　条件为假时的命令串<br />
<br />
　　fi<br />
<br />
　　3．for循环<br />
<br />
　　for循环对一个变量的可能的值都执行一个命令序列。赋给变量的几个数值既可以在程序内以数值列表的形式提供，也可以在程序以外以位置参数的形式提供。for循环的一般格式为：<br />
<br />
　　for变量名 　 　[in数值列表]<br />
<br />
　　do<br />
<br />
　　若干个命令行<br />
<br />
　　done<br />
<br />
　　变量名可以是用户选择的任何字串，如果变量名是var，则在in之后给出的数值将顺序替换循环命令列表中的$var。如果省略了in，则变量var的取值将是位置参数。对变量的每一个可能的赋值都将执行do和done之间的命令列表。<br />
<br />
　　4．while和until循环<br />
<br />
　　while和until命令都是用命令的返回状态值来控制循环的。While循环的一般格式为：<br />
<br />
　　while<br />
<br />
　　若干个命令行1<br />
<br />
　　do<br />
<br />
　　若干个命令行2<br />
<br />
　　done<br />
<br />
　　只要while的&ldquo;若干个命令行1&rdquo;中最后一个命令的返回状态为真，while循环就继续执行do...done之间的&ldquo;若干个命令行2&rdquo;。<br />
<br />
　　until命令是另一种循环结构，它和while命令相似，其格式如下：<br />
<br />
　　until<br />
<br />
　　 若干个命令行1<br />
<br />
　　do<br />
<br />
　　 若干个命令行2<br />
<br />
　　done<br />
<br />
　　until循环和while循环的区别在于：while循环在条件为真时继续执行循环，而until则是在条件为假时继续执行循环。<br />
<br />
　　Shell还提供了true和false两条命令用于创建无限循环结构，它们的返回状态分别是总为0或总为非0。<br />
<br />
　　5．case条件选择<br />
<br />
　　if条件语句用于在两个选项中选定一项，而case条件选择为用户提供了根据字串或变量的值从多个选项中选择一项的方法，其格式如下：<br />
<br />
　　case string in<br />
<br />
　　exp-1)<br />
<br />
　　若干个命令行1<br />
<br />
　　；；<br />
<br />
　　exp-2)<br />
<br />
　　 若干个命令行2<br />
<br />
　　；；<br />
<br />
　　……<br />
<br />
　　*)<br />
<br />
　　其他命令行<br />
<br />
　　esac<br />
<br />
　　Shell通过计算字串string的值，将其结果依次和运算式exp-1, exp-2等进行比较，直到找到一个匹配的运算式为止。如果找到了匹配项，则执行它下面的命令直到遇到一对分号(；；)为止。<br />
<br />
　　在case运算式中也可以使用Shell的通配符（&ldquo;*&rdquo;、&ldquo;？&rdquo;、&ldquo;[ ]&rdquo;）。通常用 * 作为case命令的最后运算式以便在前面找不到任何相应的匹配项时执行&ldquo;其他命令行&rdquo;的命令。<br />
<br />
　　6．无条件控制语句break和continue<br />
<br />
　　break用于立即终止当前循环的执行，而contiune用于不执行循环中后面的语句而立即开始下一个循环的执行。这两个语句只有放在do和done之间才有效。<br />
<br />
　　7．函数定义<br />
<br />
　　在Shell中还可以定义函数。函数实际上也是由若干条Shell命令组成的，因此它与Shell程序形式上是相似的，不同的是它不是一个单独的进程，而是Shell程序的一部分。函数定义的基本格式为：<br />
<br />
　　functionname<br />
<br />
　　{<br />
<br />
　　 若干命令行<br />
<br />
　　}<br />
<br />
　　调用函数的格式为：<br />
<br />
　　functionname param1 param2…<br />
<br />
　　Shell函数可以完成某些例行的工作，而且还可以有自己的退出状态，因此函数也可以作为if, while等控制结构的条件。<br />
<br />
　　在函数定义时不用带参数说明，但在调用函数时可以带有参数，此时Shell将把这些参数分别赋予相应的位置参数$1, $2, ...及$*。<br />
<br />
　　8．命令分组<br />
<br />
　　在Shell中有两种命令分组的方法：()和{}。前者当Shell执行()中的命令时将再创建一个新的子进程，然后这个子进程去执行圆括弧中的命令。当用户在执行某个命令时不想让命令运行时对状态集合（如位置参数、环境变量、当前工作目录等）的改变影响到下面语句的执行时，就应该把这些命令放在圆括弧中，这样就能保证所有的改变只对子进程产生影响，而父进程不受任何干扰。{}用于将顺序执行的命令的输出结果用于另一个命令的输入（管道方式）。当我们要真正使用圆括弧和花括弧时（如计算运算式的优先顺序），则需要在其前面加上转义符（\）以便让Shell知道它们不是用于命令执行的控制所用。<br />
<br />
　　9．信号<br />
<br />
　　trap命令用于在Shell程序中捕捉信号，之后可以有3种反应方式：<br />
<br />
　　（1）执行一段程序来处理这一信号。<br />
<br />
　　（2）接受信号的默认操作。<br />
<br />
　　（3）忽视这一信号。<br />
<br />
　　trap对上面3种方式提供了3种基本形式：<br />
<br />
　　第一种形式的trap命令在Shell接收到与signal list清单中数值相同的信号时，将执行双引号中的命令串。<br />
<br />
　　trap 'commands' signal-list<br />
<br />
　　trap "commands" signal-list<br />
<br />
　　为了恢复信号的默认操作，使用第二种形式的trap命令：<br />
<br />
　　trap signal-list<br />
<br />
　　第三种形式的trap命令允许忽略信号：<br />
<br />
　　trap " " signal-list<br />
<br />
　　注意：<br />
<br />
　　（1）对信号11（段违例）不能捕捉，因为Shell本身需要捕捉该信号去进行内存的转储。<br />
<br />
　　（2）在trap中可以定义对信号0的处理（实际上没有这个信号），Shell程序在其终止（如执行exit语句）时发出该信号。<br />
<br />
　　（3）在捕捉到signal-list中指定的信号并执行完相应的命令之后，如果这些命令没有将Shell程序终止的话，Shell程序将继续执行收到信号时所执行的命令后面的命令，这样将很容易导致Shell程序无法终止。<br />
<br />
　　另外，在trap语句中，单引号和双引号是不同的。当Shell程序第一次碰到trap语句时，将把commands中的命令扫描一遍。此时若commands是用单引号括起来的话，那么Shell不会对commands中的变量和命令进行替换，否则commands中的变量和命令将用当时具体的值来替换。</font><br />
</span></div></div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>74</wp:post_id>
		<wp:post_date><![CDATA[2007-07-27 11:33:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-07-27 11:33:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[linux%e7%9a%84shell%e7%bc%96%e7%a8%8b%e4%b9%8bshell%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1%e7%9a%84%e6%b5%81%e7%a8%8b%e6%8e%a7%e5%88%b6%e8%bd%ac]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543640962]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>http 状态代码  状态信息  含义</title>
		<link>http://blog.00rz.com/2007/07/http-%e7%8a%b6%e6%80%81%e4%bb%a3%e7%a0%81-%e7%8a%b6%e6%80%81%e4%bf%a1%e6%81%af-%e5%90%ab%e4%b9%89.html</link>
		<pubDate>Fri, 20 Jul 2007 14:51:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=75</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><div><strong><font style="font-size: 12px" color="#009999">下表显示了常见的HTTP 1.1状态代码以及它们对应的状态信息和含义。 <br />
应当谨慎地使用那些只有HTTP 1.1支持的状态代码，</font></strong></div>
<div><strong><font style="font-size: 12px" color="#009999">因为许多浏览器还只能够支持HTTP 1.0。</font></strong></div>
<div><strong><font style="font-size: 12px"><font color="#009999">如果你使用了HTTP 1.1特有的状态代码，最好能够检查一下请求的HTTP版本号。</font> </font></strong></div>
<strong><font style="font-size: 12px">
<div><br />
状态代码]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>75</wp:post_id>
		<wp:post_date><![CDATA[2007-07-20 14:51:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-07-20 14:51:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[http-%e7%8a%b6%e6%80%81%e4%bb%a3%e7%a0%81-%e7%8a%b6%e6%80%81%e4%bf%a1%e6%81%af-%e5%90%ab%e4%b9%89]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>Lighttpd+Squid+Apache搭建高效率Web服务器[转]</title>
		<link>http://blog.00rz.com/2007/07/lighttpdsquidapache%e6%90%ad%e5%bb%ba%e9%ab%98%e6%95%88%e7%8e%87web%e6%9c%8d%e5%8a%a1%e5%99%a8%e8%bd%ac.html</link>
		<pubDate>Tue, 17 Jul 2007 18:40:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=76</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><div class="cnt">
<div>
<h2>架构原理</h2>
<p>源: <a href="http://blog.sina.com.cn/u/4cbfbde50100093l">http://blog.sina.com.cn/u/4cbfbde50100093l</a></p>
<p><a href="http://www.apache.org/"><font color="#000033">Apache</font></a>通常是开源界的首选Web服务器，因为它的强大和可靠，已经具有了品牌效应，可以适用于绝大部分的应用场合。但是它的强大有时候却显得笨重，配置文件得让人望而生畏，高并发情况下效率不太高。而轻量级的Web服务器<a href="http://lighttpd.net/"><font color="#000033">Lighttpd</font></a>却 是后起之秀，其静态文件的响应能力远高于Apache，据说是Apache的2-3倍。Lighttpd的高性能和易用性，足以打动我们，在它能够胜任的 领域，尽量用它。Lighttpd对PHP的支持也很好，还可以通过Fastcgi方式支持其他的语言，比如Python。</p>
<p>毕竟Lighttpd是轻量级的服务器，功能上不能跟Apache比，某些应用无法胜任。比如Lighttpd还不支持缓存，而现在的绝大部分站点 都是用程序生成动态内容，没有缓存的话即使程序的效率再高也很难满足大访问量的需求，而且让程序不停的去做同一件事情也实在没有意义。首先，Web程序是 需要做缓存处理的，即把反复使用的数据做缓存。即使这样也还不够，单单是启动Web处理程序的代价就不少，缓存最后生成的静态页面是必不可少的。而做这个 是 <a href="http://www.squid-cache.org/"><font color="#000033">Squid</font></a>的强项，它本是做代理的，支持高效的缓存，可以用来给站点做反向代理加速。把Squid放在Apache或者Lighttpd的前端来缓存 Web服务器生成的动态内容，而Web应用程序只需要适当地设置页面实效时间即可。</p>
<p>即使是大部分内容动态生成的网站，仍免不了会有一些静态元素，比如图片、JS脚本、CSS等等，将Squid放在Apache或者Lighttp前 端后，反而会使性能下降，毕竟处理HTTP请求是Web服务器的强项。而且已经存在于文件系统中的静态内容再在Squid中缓存一下，浪费内存和硬盘空 间。因此可以考虑将Lighttpd再放在Squid的前面，构成 Lighttpd+Squid+Apache的一条处理链，Lighttpd在最前面，专门用来处理静态内容的请求，把动态内容请求通过proxy模块转 发给Squid，如果Squid中有该请求的内容且没有过期，则直接返回给Lighttpd。新请求或者过期的页面请求交由Apache中Web程序来处 理。经过Lighttpd和Squid的两级过滤，Apache需要处理的请求将大大减少，减少了Web应用程序的压力。同时这样的构架，便于把不同的处 理分散到多台计算机上进行，由Lighttpd在前面统一把关。</p>
<p>在这种架构下，每一级都是可以进行单独优化的，比如Lighttpd可以采用异步IO方式，Squid可以启用内存来缓存，Apache可以启用MPM 等，并且每一级都可以使用多台机器来均衡负载，伸缩性很好。</p>
<h2>实例讲解</h2>
<p>下面以daviesliu.net和rainbud.net域下面的几个站点为例来介绍一下此方案的具体做法。daviesliu.net域下有几个用 <a href="http://www.modpython.org/"><font color="#000033">mod_python</font></a>实现的<a href="http://blog.daviesliu.net/"><font color="#000033">blog站点</font></a>，几个php的站点，一个<a href="http://share.daviesliu.net/"><font color="#000033">mod_python的小程序</font></a>，以后可能还会架设几个PHP和<a href="http://www.djangoproject.com/"><font color="#000033">Django</font></a>的站点。而服务器非常弱，CPU为Celeron 500，内存为PC 100 384M，因此比较关注Web服务器的效率。这几个站点都是采用虚拟主机方式，开在同一台机器的同一个端口上。</p>
<p>Lighttpd服务于80端口，Squid运行在3128端口，Apache运行在81端口。</p>
<h3>Lighttpd的配置</h3>
<p>多个域名采用/var/www/domain/subdomain 的目录结构，用evhost模块配置document-root如下：</p>
<blockquote>evhost.path-pattern]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>76</wp:post_id>
		<wp:post_date><![CDATA[2007-07-17 18:40:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-07-17 18:40:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[lighttpdsquidapache%e6%90%ad%e5%bb%ba%e9%ab%98%e6%95%88%e7%8e%87web%e6%9c%8d%e5%8a%a1%e5%99%a8%e8%bd%ac]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>黄哥的经典解说</title>
		<link>http://blog.00rz.com/2007/06/%e9%bb%84%e5%93%a5%e7%9a%84%e7%bb%8f%e5%85%b8%e8%a7%a3%e8%af%b4.html</link>
		<pubDate>Fri, 29 Jun 2007 10:11:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=77</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="blog_text" class="cnt"  >格罗索…过他…好的…进去啦！ <br />
亚昆塔，哎，点球，点球，点球，格罗索立功啦，格罗索立功啦，不要给澳大利亚人任何的机会！ <br />
伟大的意大利的左后卫，他继承了意大利的光荣的传统，法切蒂、卡布里迪、马尔蒂尼在这一刻灵魂附体！格罗索一个人，他代表了意大利足球的悠久的历史和传统，在这一刻，他不是一个人在战斗，他不是一个人！ <br />
托蒂，托蒂面对这个点球，他面对的是全世界意大利球迷的目光和期待。 <br />
施瓦泽曾经在附加赛当中，世界杯决赛的附加赛当中扑出过两个点球，托蒂肯定深知这一点，他还能够微笑着面对他面前的这个人吗？十秒钟以后，他会是怎样的表情？ <br />
球进啦，比赛结束啦，意大利队获得了胜利，淘汰了澳大利亚队。他们没有再一次倒在希丁克的球队面前，伟大的意大利，伟大的意大利的左后卫，马尔蒂尼今天生日快乐！意大利万岁！ <br />
他不辜负全意大利人的期望，这个点球一个绝对理论上的死…绝杀，绝对的死角！ <br />
意大利队进入了八强！ <br />
胜利属于意大利，属于格罗索，属于卡纳瓦罗，属于赞布罗塔，属于布冯，属于马尔蒂尼，属于所有热爱意大利足球的人！ <br />
澳大利亚队也许会后悔的，希丁克他在下半场多打一个人的情况下，他打得太保守，太沉稳啦！他失去了自己的勇气，面对意大利足球悠久历史和传统，他没有再拿出小组赛那样儿的猛扑猛打的作风，他终于自食其果。 <br />
他们该回家了，他们不用回遥远的澳大利亚，他们大多数都在欧洲生活，再见！</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>77</wp:post_id>
		<wp:post_date><![CDATA[2007-06-29 10:11:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-06-29 10:11:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%bb%84%e5%93%a5%e7%9a%84%e7%bb%8f%e5%85%b8%e8%a7%a3%e8%af%b4]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543640967]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>简单的rss类(pw的)</title>
		<link>http://blog.00rz.com/2007/06/%e7%ae%80%e5%8d%95%e7%9a%84rss%e7%b1%bbpw%e7%9a%84.html</link>
		<pubDate>Tue, 26 Jun 2007 15:55:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=78</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p><?php<br />
class Rss{</p>
<p>var $rssHeader;<br />
var $rssChannel;<br />
var $rssImage;<br />
var $rssItem;</p>
<p>function Rss($Rss=array('xml'=>"1.0",'rss'=>"2.0",'encoding'=>"gb2312")){</p>
<p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>78</wp:post_id>
		<wp:post_date><![CDATA[2007-06-26 15:55:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-06-26 15:55:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%ae%80%e5%8d%95%e7%9a%84rss%e7%b1%bbpw%e7%9a%84]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[7578625785]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>回来的第二天</title>
		<link>http://blog.00rz.com/2007/06/%e5%9b%9e%e6%9d%a5%e7%9a%84%e7%ac%ac%e4%ba%8c%e5%a4%a9.html</link>
		<pubDate>Tue, 26 Jun 2007 15:15:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=79</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p>这两天就学习牛人们的控制器了</p>
<p>学别人的东西 真是痛苦，</p>
<p>等我有时间自己写的 。 </p>
<p>哼哼</p></div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>79</wp:post_id>
		<wp:post_date><![CDATA[2007-06-26 15:15:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-06-26 15:15:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%9b%9e%e6%9d%a5%e7%9a%84%e7%ac%ac%e4%ba%8c%e5%a4%a9]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>转载：水木社区VIM版版友推荐插件列表（06年12月）</title>
		<link>http://blog.00rz.com/2007/05/%e8%bd%ac%e8%bd%bd%ef%bc%9a%e6%b0%b4%e6%9c%a8%e7%a4%be%e5%8c%bavim%e7%89%88%e7%89%88%e5%8f%8b%e6%8e%a8%e8%8d%90%e6%8f%92%e4%bb%b6%e5%88%97%e8%a1%a8%ef%bc%8806%e5%b9%b412%e6%9c%88%ef%bc%89.html</link>
		<pubDate>Tue, 29 May 2007 17:12:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=80</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  >转载：水木社区VIM版版友推荐插件列表（06年12月）<br />
<a href="http://www.newsmth.net/bbscon.php?bid=731&id=24898&ftype=11"> http://www.newsmth.net/bbscon.php?bid=731&id=24898&ftype=11</a><br />
-----------------------------------------------------------------------<br />
BufExplorer]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>80</wp:post_id>
		<wp:post_date><![CDATA[2007-05-29 17:12:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-05-29 17:12:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%bd%ac%e8%bd%bd%ef%bc%9a%e6%b0%b4%e6%9c%a8%e7%a4%be%e5%8c%bavim%e7%89%88%e7%89%88%e5%8f%8b%e6%8e%a8%e8%8d%90%e6%8f%92%e4%bb%b6%e5%88%97%e8%a1%a8%ef%bc%8806%e5%b9%b412%e6%9c%88%ef%bc%89]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543640973]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>:: vs -&#062;    self vs $this</title>
		<link>http://blog.00rz.com/2007/05/vs-self-vs-this.html</link>
		<pubDate>Fri, 18 May 2007 11:10:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=81</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><span style="font-weight: bold; text-decoration: underline">:: vs ->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>81</wp:post_id>
		<wp:post_date><![CDATA[2007-05-18 11:10:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-05-18 11:10:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[vs-self-vs-this]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>The Model-View-Controller Pattern —— MVC 模式[转]</title>
		<link>http://blog.00rz.com/2007/05/the-model-view-controller-pattern-%e2%80%94%e2%80%94-mvc-%e6%a8%a1%e5%bc%8f%e8%bd%ac.html</link>
		<pubDate>Thu, 17 May 2007 19:17:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=82</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><h3 class="entry-header"> </h3>
<div class="entry-content">
<div class="entry-body">
<p>web 应用程序变化很大，而且，这种变化会引起大量的混乱，对于架构一个特定的应用程序，哪个或哪些模式是最好的。虽说如此，那么有没有一种&ldquo;最好的&rdquo;web 应用程序架构呢？</p>
</div>
<div class="entry-more">
<h3 class="docSection1Title">问题</h3>
<p class="docText">你能不能部署一个单一 web 站点结构体系以适应每个常见的 web 应用程序，包括常见的表现元素、身份验证、表单验证，等等？</p>
<h3 class="docSection1Title">解决方案</h3>
<p class="docText">Model-View-Controller(模型-视图-控制器，MVC) 模式将你的软件组织并分解成三个截然不同的角色：</p>
<ul class="docList">
    <li>
    <p class="docText"><span class="docEmphasis">Model</span> 封装了你的应用数据、应用流程和业务逻辑。</p>
    </li>
    <li>
    <p class="docText"><span class="docEmphasis">View</span> 从 Model 获取数据并格式化数据以进行显示。</p>
    </li>
    <li>
    <p class="docText"><span class="docEmphasis">Controller</span> 控制程序流程，接收输入，并把它们传递给 Model 和 View。</p>
    </li>
</ul>
<div class="docNote">
<p class="docNoteTitle">MVC 的起源</p>
<p class="docNoteText">Model-View-Controller 模式是由 Trygve Reenskaug 于七十年代后期在施乐公司的 Palo Alto 研究中心(Xerox's Palo Alto Research Center，PARC)最初设计的。最初的参考实现是用 Smalltalk-80 写的，其最初的目的是设计来解决应用程序中的 GUI 交互问题。</p>
</div>
<p class="docText">只要你与 MVC 模式打过交道，你就会对它的实用性心存感激，尤其对于图形用户界面(Graphical User Interface，GUI)应用程序。此外，MVC 对 web 应用程序也很有用，虽然通过一连串无状态 web 连接访问一个服务器应用程序的不连续性会存在一些独特的挑战(也可以说是一种机会)。</p>
<p class="docText">如果你翻阅本章，寻找&ldquo;一种真正的方法&rdquo;来为 web 应用程序实现 MVC，我希望你不会对这里的答案太失望。根本就不存在什么完美的解决方案，但是有很多&ldquo;最优实践&rdquo;以及相关模式，它们的确可以帮助你有效地实现 MVC。希望这里介绍的观点可以为你的代码视为一个跳板，并引导你进行更多的研究。</p>
<h4 class="docSection2Title">The Model-View-Controller(模型-视图-控制器)</h4>
<p class="docText">与其它设计模式不同，MVC 模式并没有直接反映一个你能够编写或配置的类结构。相反，MVC 更像一个概念上的指导原则或范型。</p>
<p class="docText">概念上的 MVC 模式被描述为三个对象 &mdash;&mdash; Model、View 和 Controller &mdash;&mdash; 之间的关系。由于 View 和 Controller 都可以从 Model 请求数据，所以 Controller 和 View 都依赖 Model。任何输入都通过 Controller 进入你的系统，然后 Controller 选择一个 View 来发出结果。对你，一个 PHP 开发人员，更具体的来说，Controller 处理每个进入的 HTTP 请求，而 View 则生成 HTTP 响应。</p>
<p class="docText">下面是一个概念上的 MVC 模式的图形描述：</p>
<p class="docText"> </p>
<center><img height="286" width="237" src="http://www.wujianrong.com/photo/ch17sec02No.01.gif"></center>
<p class="docText">在这个理想的 MVC 环境中，通信是单向的，如这个序列图所示：</p>
<p class="docText"> </p>
<p class="docText"><img height="249" width="430" src="http://www.wujianrong.com/photo/ch17sec02No.10.gif"></p>
<p class="docText">当然，具体到细节上就有些麻烦了。当在一个 web 应用程序中实现 MVC 时，Modle、View 和 Controller 从来不会在单一的类中出现，而是被实现为紧密相关的对象群体，在那里，每一组执行一个特定的 MVC 任务。Controller 可能由几个类组成，它们被组合到一起，用于分析 HTTP 响应并确定应用程序所需的动作。Model 几乎可以确定由多个类组成。而 View 在 web 应用程序中通常是某种模板系统，而且也很可能由几个对象组成。</p>
<p class="docText">在接下来的几节，我们稍微深入&ldquo;MVC 三元组&rdquo;的每个部分，了解每个部分都包含哪些模式，或哪些设计模式可以帮助实现每个部分，以及这些模式是如何帮助你组织你的代码的。</p>
<h5 class="docSection3Title">模型</h5>
<p class="docText">Model 包含了你的应用逻辑和数据，在你的应用程序中，它很可能是主要的值驱动器。Model 没有任何与表现层相关的特性，而且也和 HTTP 请求处理职责中完全无关。(作为一个经验方法，PHP Model 中决不要出现 HTML 标签或 <tt><font face="新宋体">$_GET</font></tt> 超全局变量)</p>
<h6 class="docSection4Title">领域模型</h6>
<p class="docText">Domain Model 是一个对象层，是对现实世界逻辑、数据和你应用程序所处理的问题的抽象。Domain Model 可分为两大类：Simple Domain Model 和 Rich Domain Model。</p>
<p class="docText">Simple Domain Model 往往是业务对象和数据库表之间一对一的通信。你已经见过的几种模式 &mdash;&mdash; Active Record、Table Data Gateway，以及 Data Mapper，所有这些与数据库相关的设计模式 &mdash;&mdash; 可以帮助你把与数据库相关的逻辑组织成一个 Domain Model(为了使本书例子合理、简单、易懂，所选素材都没有超出简单 Domain Model 的一对一的通信 &mdash;&mdash; 同构映射）。</p>
<p class="docText">Rich Domain Model 包含复杂的，使用继承机制紧密联系在一起的对象网络，在本书和 GoF 一书中介绍的众多模式起着杠杆作用。Rich Domain Models 往往是柔性的，精心测试过的，不断重构的，而且与它们所表达的领域所需的业务逻辑紧密耦合。</p>
<p class="docText">采用哪种 Domain Model 类型取决于你的应用环境。如果你正在建立的是一个非常简单的表单处理 web 应用，没必要建立 Rich Domain Model。然而，如果你正在编写一个价值数百万的企业内联网架构的核心库，那么努力开发一个 Rich Domain Model 就是值得的，它可以为你提供一个准确表达业务过程的平台，并可以让你快速传输数据。</p>
<p class="docText">Martin Fowler 在 PoEAA 中同时简要介绍了两种 Domain Model。而 Eric Evans 的 Domain Driven Design 一书，则完全专注于 Rich Domain Model 的实践应用和开发过程。</p>
<h5 class="docSection3Title">视图</h5>
<p class="docText">View 用于处理所有表现层方面的问题。View 从 Model 获取数据，并可以把它格式化成用于 web 页的 HTML，用于 web 服务的 XML，或用于 email 的文本。</p>
<p class="docText">鉴别你是否已经把你的代码成功地分离成了明确定义的角色的一个好方法就是，试着去取代(至少从概念上)另一个产生完全不同输出的 View。举例来说，如果你有一个 web 应用程序，要让程序使用 PHP CLI 在命令行方式下运行，你将必须做何更改？</p>
<p class="docText">尽管 View 有权访问 Model，但是让 View 调用 Model 的方法来改变它的状态是一种很不好的方式 &mdash;&mdash; 更新只应该由 Controller 来执行。View 调用的 Model 方法应该是没有副作用的只读数据检索方法。</p>
<p class="docText">有两种设计模式经常在 Views 中使用：Template View 和 Transform View。</p>
<h6 class="docSection4Title">Template View</h6>
<p class="docText">Template View 是在 web 应用程序的 View 中使用的主要模式。这个模式使用一个包含特殊标记的模板文件(通常是 HTML)，当 Template View 被执行的时候，这些标记会被 Model 中的数据所替换。</p>
<p class="docText">PHP 本身就是一个特殊的 Template View 的例子，叫做服务器页面。Savant 就是一个基于使用 PHP 作为模板本身的模板系统(<a class="docLink" target="_blank" href="http://www.phpsavant.com/">http://www.phpsavant.com/</a>)。</p>
<p class="docText">下面是一个使用 <tt><font face="新宋体">Savant</font></tt> 的例子：</p>
<pre>// PHP4<br />require_once 'Savant2.php';<br /><br />$tpl =& new Savant2();<br />$tpl->assign('title', 'Colors of the Rainbow');<br />$tpl->assign('colors', array('red',<br />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>82</wp:post_id>
		<wp:post_date><![CDATA[2007-05-17 19:17:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-05-17 19:17:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[the-model-view-controller-pattern-%e2%80%94%e2%80%94-mvc-%e6%a8%a1%e5%bc%8f%e8%bd%ac]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4920867950]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>PHP 5.2 自带的 Filter[转]</title>
		<link>http://blog.00rz.com/2007/05/php-5-2-%e8%87%aa%e5%b8%a6%e7%9a%84-filter%e8%bd%ac.html</link>
		<pubDate>Thu, 17 May 2007 19:12:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=83</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><h2> </h2>
<div class="entrytext">
<p>今天看了 PHPWomen 的一篇 BLOG －－<a href="http://www.phpwomen.org/wordpress/2006/11/03/filter-in-and-php-52/">Filter and PHP 5.2</a> 才知道 PHP 已经自带有 Filter 了，之前是需要自己手动安装扩展，现在是默认就提供了。手册中也已经提供了 <a href="http://www.php.net/filter">Filter 函数库</a>的相关函数说明。Zend Developer Zone 上也已经有了一篇相关的教程－－<a href="http://devzone.zend.com/node/view/id/1113">PHP Built in Input filtering</a>。</p>
<p>用法其实很简单，只需要知道一些常量就可以了，例如：</p>
<pre class="code" style="padding-bottom: 20px; width: 500px"><code><span style="color: #000000">
<span style="color: #0000bb"><?php
$age </span><span style="color: #007700">= </span><span style="color: #0000bb">filter_input</span><span style="color: #007700">(</span><span style="color: #0000bb">INPUT_POST</span><span style="color: #007700">, </span><span style="color: #dd0000">'age'</span><span style="color: #007700">, </span><span style="color: #0000bb">FILTER_VALIDATE_INT</span><span style="color: #007700">);
if (</span><span style="color: #0000bb">is_null</span><span style="color: #007700">(</span><span style="color: #0000bb">$age</span><span style="color: #007700">)) {
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>83</wp:post_id>
		<wp:post_date><![CDATA[2007-05-17 19:12:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-05-17 19:12:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[php-5-2-%e8%87%aa%e5%b8%a6%e7%9a%84-filter%e8%bd%ac]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>Mysql的error while loading shared libraries解决方法</title>
		<link>http://blog.00rz.com/2007/05/mysql%e7%9a%84error-while-loading-shared-libraries%e8%a7%a3%e5%86%b3%e6%96%b9%e6%b3%95.html</link>
		<pubDate>Thu, 17 May 2007 16:09:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=84</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="blog_text" class="cnt"  ><br />
<br />
<div style="font-size: 12px">找不到mysql的动态链接库，解决方法更新动态链接库文件如下<br />
编辑/etc/profile</div>
<div style="font-size: 12px">加入export MYSQL_PATH=/usr/local/mysql</div>
<div style="font-size: 12px">在shell下执行<br />
<pre lang="shell">
echo '$MYSQL_PATH/lib/mysql' >> /etc/ld.so.conf
ldconfig
</pre>
</div></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>84</wp:post_id>
		<wp:post_date><![CDATA[2007-05-17 16:09:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-05-17 16:09:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mysql%e7%9a%84error-while-loading-shared-libraries%e8%a7%a3%e5%86%b3%e6%96%b9%e6%b3%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>在Linux下使用mysql[转]</title>
		<link>http://blog.00rz.com/2007/05/%e5%9c%a8linux%e4%b8%8b%e4%bd%bf%e7%94%a8mysql%e8%bd%ac.html</link>
		<pubDate>Thu, 17 May 2007 15:54:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=85</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><div class="date"> </div>
<table style="table-layout: fixed">
    <tbody>
        <tr>
            <td>
            <div class="cnt">]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>85</wp:post_id>
		<wp:post_date><![CDATA[2007-05-17 15:54:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-05-17 15:54:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%9c%a8linux%e4%b8%8b%e4%bd%bf%e7%94%a8mysql%e8%bd%ac]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>迅雷下载原理 [转]http://blog.zhku.com/read.php?1109</title>
		<link>http://blog.00rz.com/2007/05/%e8%bf%85%e9%9b%b7%e4%b8%8b%e8%bd%bd%e5%8e%9f%e7%90%86-%e8%bd%achttpblog-zhku-comread-php1109.html</link>
		<pubDate>Thu, 17 May 2007 14:01:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=86</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><div class="textbox-fontsize"></div>
<div class="textbox-content" >1迅雷是什么？<br />
迅雷是基于P2SP的一款下载软件，能够大大增强下载速度，可谓迅雷不及掩耳盗铃之势<br />
如破竹。<br />
P2SP的道理不复杂，就是指：如果多个服务器上有某个相同的文件，当某个用户下载其<br />
中一个服务器上的这一文件时，迅雷会自动查找到另外的几个服务器，同时下载这一文<br />
件，达到提速的目的。<br />
迅雷比较流氓，在用户没有得到任何提示毫不知情的情况下，偷偷上传用户的本地文件<br />
,在所有网络流量的统计中排到了第7位。(注：CERNET上似乎可以进三强)<br />
迅雷比较小气，不说源代码不是公开的，连原理也不公开。<br />
迅雷比较聪明，她的架构让人佩服啊佩服，佩服啊佩服，佩服啊佩服……<br />
2下载原理<br />
还记得百度的mp3搜索么？你到mp3.baidu.com上搜索一个mp3，百度会给你列出她知道的<br />
所有服务器列表（这些服务器都是别人的），你可以在百度上点击该连接下载mp3，而不<br />
用登陆真正的服务器。<br />
迅雷就是把这个过程自动化了，并且增加了判断文件唯一性的功能，画个图简单说明一<br />
下：<br />
1．用户点击1.2.3.4上的QQ_1.exe文件的连接<br />
2．用户客户机上的迅雷得到该文件的唯一的校验值。<br />
3．迅雷自动向自己的资源服务器上搜索，查找到存放同一文件的其他的服务器列表<br />
4．得到文件在该服务器上的目录和文件名（红色部分，有可能和原始连接中的文件名不<br />
相同），<a href="ftp://1.2.3.5/QQ_2.exe" target="_blank">ftp://1.2.3.5/QQ_2.exe</a>，<a href="http://1.2.3.6/QQ_3.exe" target="_blank">http://1.2.3.6/QQ_3.exe</a>，以及公网用户1.2.3.7<br />
有QQ.exe<br />
5．迅雷自动向1.2.3.5和1.2.3.6上下载该文件的不同文件块，以达到加速下载的目的（<br />
紫色部分）。<br />
6．用户向公网用户1.2.3.7发送一个UDP资源请求<br />
7．1.2.3.7回应一个资源请求说：偶这儿有你要的文件<br />
8．用户向公网用户1.2.3.7的3077端口发起请求，并传输数据。<br />
9．下载完毕后，如果迅雷资源服务器上，该文件的服务器列表中没有目前用户点击下载<br />
的服务器1.2.3.4，则将这个新的服务器地址加入到该文件的服务器列表（蓝色部分）。<br />
<br />
注：<br />
1．上述过程中的6、7、8步骤中隐含了一个过程：判断用户是否是公网用户。<br />
如果是公网用户，则该用户的IP地址和提供下载服务的端口也将记录在迅雷的资源服务<br />
器中，后续用户可以从该用户处下载；第三节有这个过程的说明。<br />
2．迅雷如何区分不同的文件？很多文件名字不同但是内容相同，很多文件名字相同但是<br />
内容不同。搜索迅雷的相关信息只是得到了几句无关痛痒的废话：迅雷还使用了独创的<br />
文件校验机制,保证了用户下载文件的正确性和完整。至于什么方法不得而知<br />
3．我们如何查看迅雷搜索到的资源列表？<br />
在迅雷搜索到一系列的资源列表并且任务没有完成时，会在相同下载目录下建立一个临<br />
时文件，里面有搜索到的资源信息，其中peer就是搜索到的包含要下载文件的公网用户<br />
。<br />
3协议解析<br />
分析第二节原理图中的下载过程，第1、2、5步和正常的下载是一模一样的，我们无法根<br />
本无法区分。那好，我们就在3、4、6上做文章。<br />
除了上述用户下载一个具体文件的过程的各个报文外，还有交换资源信息报文，用户和<br />
用户之间的文件块传输报文、判断用户是否是公网用户的报文等。<br />
1．资源请求报文<br />
每次迅雷都会向219.134.132.47的tcp端口3076发出资源请求，该地址是写死在迅雷软件<br />
中的，并非依靠DNS请求得到。<br />
如果该地址不可用，则会切换到另外两个可替换的地址219.134.132.42、219.134.132.<br />
86。<br />
Web迅雷则使用219.134.132.46。<br />
过滤掉这个报文，那么迅雷客户端就无法完成资源请求，无法从多点下载。用TP过滤掉<br />
报文后迅雷只能从原始连接下载，如下图：<br />
协议报文特征如下：<br />
2．资源搜索回应报文<br />
过滤掉这个报文，那么迅雷客户端就无法得到资源列表，无法从多点下载。<br />
协议报文特征如下：<br />
3．用户之间的文件传输（握手报文）<br />
用户之间是可以传送文件块的，下面的报文就是传送文件块开始之前的握手报文，<br />
3077端口为客户端的监听端口，用来把本地的文件传输给别人。（如果3077不能用,会<br />
转到其他端口）.<br />
4．用户之间资源信息交换报文<br />
5．提交新的资源信息报文<br />
6．连接NAT测试服务器报文<br />
迅雷每过几分钟就会向statnat1.sandai.net发送NAT测试报文，也就是告诉迅雷的资源<br />
服<br />
务器，自己是否是公网IP.<br />
该报文由于无返回报文，所以猜想采用的办法是采用STUN的方法：<br />
将本机的IP地址放在UDP的payload里，如果迅雷的服务器收到报文发现IP层的源地址<br />
和payload里的IP地址一致，那么就是公网地址，否则就是处于防火墙后面或者需要经<br />
NAT才能上公网。<br />
协议报文如下：<br />
注：<br />
sandai.net是xunlei旗下的一个网站，很少单独抛头露面，多出现在迅雷软件检索关联<br />
<br />
信息、显示广告的DNS请求报文中。<br />
4TP过滤<br />
如果TP武断的对迅雷进行过滤，只需要设定一个traffic management，把目的地址为21<br />
9.134.132.0/24网段，目的端口为3076的报文全部过滤就可以防止迅雷下载，但是有可<br />
能会误报。下面的规则更详细一点，可以减少误报。<br />
1．针对用户向服务器资源请求报文和资源回应报文的过滤<br />
由于迅雷的服务器IP地址比较容易更换，所以建议过滤的DV：<br />
协议：tcp<br />
源端口/目的端口：3076<br />
开始的四个字节：0x29000000<br />
2．针对用户之间的资源信息交互报文的过滤<br />
协议UDP<br />
端口3076<br />
前四个字节0x32000000<br />
3．针对用户之间的文件传输（握手报文）的过滤<br />
协议tcp<br />
源端口或者目的端口可以为3077、3078<br />
前四个字节为0x29000000<br />
4．提交新的资源信息的报文的过滤<br />
协议TCP<br />
目的端口3076<br />
前四个字节0x29000000<br />
5．针对连接NAT测试服务器的报文的过滤<br />
协议UDP<br />
目的端口3076<br />
前四个字节0x00000101 </div></div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>86</wp:post_id>
		<wp:post_date><![CDATA[2007-05-17 14:01:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-05-17 14:01:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%bf%85%e9%9b%b7%e4%b8%8b%e8%bd%bd%e5%8e%9f%e7%90%86-%e8%bd%achttpblog-zhku-comread-php1109]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543640923]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>统计字数</title>
		<link>http://blog.00rz.com/2007/11/%e7%bb%9f%e8%ae%a1%e5%ad%97%e6%95%b0.html</link>
		<pubDate>Thu, 22 Nov 2007 09:15:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=47</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  >function count(content){<br />
 var regx = new Array(<br />
 /&nbsp;/gi, '',<br />
//其他的一些 实体 <br />
 /<img.*?>/gi,'a',<br />
 /<.*?>/gi,''<br />
 ); <br />
 var length = regx.length;<br />
 for(var i=0;i<regx.length;i++){<br />
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>47</wp:post_id>
		<wp:post_date><![CDATA[2007-11-22 09:15:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-11-22 09:15:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%bb%9f%e8%ae%a1%e5%ad%97%e6%95%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>js 对象 扩展[http://www.nt114.com.cn/html/jskf/JavaScript/2006/0613/34856.html]</title>
		<link>http://blog.00rz.com/2007/11/js-%e5%af%b9%e8%b1%a1-%e6%89%a9%e5%b1%95httpwww-nt114-com-cnhtmljskfjavascript2006061334856-html.html</link>
		<pubDate>Wed, 21 Nov 2007 08:33:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=48</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p><html><br />
<head><br />
<title> New Document </title><br />
<meta http-equiv="Content-Type" content="text/html; charset=gb2312"><br />
<meta NAME="Generator" CONTENT="Wawa Editor 1.0"><br />
<meta NAME="Author" CONTENT="javascript equals"><br />
<meta NAME="Keywords" CONTENT="Javascript,Java,XML,XSLT,ASP,VBScript,ASP .net,C#,C++,Database"><br />
<meta NAME="Description" CONTENT="不及格的程序员,无所不在"><br />
</head></p>
<p><body><br />
<script LANGUAGE="JavaScript"><br />
<!--<br />
function Object.prototype.equals(obj){<br />
if(this == obj)return true;<br />
if(typeof(obj)=="undefined"||obj==null||typeof(obj)!="object")return false;<br />
var length = 0; var length1=0;<br />
for(var ele in this) length++;for(var ele in obj) length1++;<br />
if(length!=length1) return false;<br />
if(obj.constructor==this.constructor){<br />
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>48</wp:post_id>
		<wp:post_date><![CDATA[2007-11-21 08:33:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-11-21 08:33:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[js-%e5%af%b9%e8%b1%a1-%e6%89%a9%e5%b1%95httpwww-nt114-com-cnhtmljskfjavascript2006061334856-html]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>js 队列</title>
		<link>http://blog.00rz.com/2007/11/js-%e9%98%9f%e5%88%97.html</link>
		<pubDate>Sat, 17 Nov 2007 10:08:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=49</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p>function Queue(){<br />
 var aElement = new Array(); <br />
 Queue.prototype.EnQueue = function (vElement) {<br />
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>49</wp:post_id>
		<wp:post_date><![CDATA[2007-11-17 10:08:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-11-17 10:08:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[js-%e9%98%9f%e5%88%97]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>iframe designMode=&#034;on&#034; 的时候的事件绑定</title>
		<link>http://blog.00rz.com/2007/11/iframe-designmodeon-%e7%9a%84%e6%97%b6%e5%80%99%e7%9a%84%e4%ba%8b%e4%bb%b6%e7%bb%91%e5%ae%9a.html</link>
		<pubDate>Wed, 14 Nov 2007 18:21:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=50</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p><!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "<a href="http://www.w3.org/TR/html4/loose.dtd">http://www.w3.org/TR/html4/loose.dtd</a>"><br />
<html lang="en"><head></p>
<p> </p>
<p> </p>
<p><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"><title>Example page with editable iframe where key events are handled</title></p>
<p> </p>
<p><script type="text/javascript"></p>
<p>function keyPressHandler (evt) {</p>
<p>evt = evt || window.event;</p>
<p>if (evt) {</p>
<p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>50</wp:post_id>
		<wp:post_date><![CDATA[2007-11-14 18:21:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-11-14 18:21:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[iframe-designmodeon-%e7%9a%84%e6%97%b6%e5%80%99%e7%9a%84%e4%ba%8b%e4%bb%b6%e7%bb%91%e5%ae%9a]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>crontab</title>
		<link>http://blog.00rz.com/2007/10/crontab.html</link>
		<pubDate>Tue, 30 Oct 2007 18:11:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=51</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p>基本格式 :<br />
*　　*　　*　　*　　*　　command<br />
分　时　日　月　周　命令</p>
<p>第1列表示分钟1～59 每分钟用*或者 */1表示<br />
第2列表示小时1～23（0表示0点）<br />
第3列表示日期1～31<br />
第4列表示月份1～12<br />
第5列标识号星期0～6（0表示星期天）<br />
第6列要运行的命令</p>
<p>crontab文件的一些例子：</p>
<p>30 21 * * * /usr/local/etc/rc.d/lighttpd restart<br />
上面的例子表示每晚的21:30重启lighttpd 。</p>
<p>45 4 1,10,22 * * /usr/local/etc/rc.d/lighttpd restart<br />
上面的例子表示每月1、10、22日的4 : 45重启lighttpd 。</p>
<p>10 1 * * 6,0 /usr/local/etc/rc.d/lighttpd restart<br />
上面的例子表示每周六、周日的1 : 10重启lighttpd 。</p>
<p>0,30 18-23 * * * /usr/local/etc/rc.d/lighttpd restart<br />
上面的例子表示在每天18 : 00至23 : 00之间每隔30分钟重启lighttpd 。</p>
<p>0 23 * * 6 /usr/local/etc/rc.d/lighttpd restart<br />
上面的例子表示每星期六的11 : 00 pm重启lighttpd 。</p>
<p>* */1 * * * /usr/local/etc/rc.d/lighttpd restart<br />
每一小时重启lighttpd </p>
<p>* 23-7/1 * * * /usr/local/etc/rc.d/lighttpd restart<br />
晚上11点到早上7点之间，每隔一小时重启lighttpd </p>
<p>0 11 4 * mon-wed /usr/local/etc/rc.d/lighttpd restart<br />
每月的4号与每周一到周三的11点重启lighttpd </p>
<p>0 4 1 jan * /usr/local/etc/rc.d/lighttpd restart<br />
一月一号的4点重启lighttpd </p></div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>51</wp:post_id>
		<wp:post_date><![CDATA[2007-10-30 18:11:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-10-30 18:11:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[crontab]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543640987]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>滕王阁序 　　　　　　　　　　　　（唐）王勃</title>
		<link>http://blog.00rz.com/2007/10/%e6%bb%95%e7%8e%8b%e9%98%81%e5%ba%8f-%e3%80%80%e3%80%80%e3%80%80%e3%80%80%e3%80%80%e3%80%80%e3%80%80%e3%80%80%e3%80%80%e3%80%80%e3%80%80%e3%80%80%ef%bc%88%e5%94%90%ef%bc%89%e7%8e%8b%e5%8b%83.html</link>
		<pubDate>Sun, 07 Oct 2007 15:20:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=52</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><br />
<br />
<br />
豫章故郡， 
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">洪都新府。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">星分翼轸， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">地接衡庐。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">襟三江而带五湖， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">控蛮荆而引瓯越。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">物华天宝， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">龙光射牛斗之墟； </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">人杰地灵， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">徐孺下陈蕃之榻。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">雄州雾列， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">俊采星驰， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">台隍枕夷夏之交， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">宾主尽东南之美。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">都督阎公之雅望， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">棨戟遥临； </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">宇文新州之懿范， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">襜帷暂驻。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">十旬休假， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">胜友如云； </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">千里逢迎， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">高朋满座。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">腾蛟起凤， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">孟学士之词宗； </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">紫电青霜， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">王将军之武库。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">家君作宰， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">路出名区； </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">童子何知， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">躬逢胜饯。<br />
<br />
时维九月， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">序属三秋。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">潦水尽而寒潭清， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">烟光凝而暮山紫。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">俨骖騑于上路， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">访风景于崇阿。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">临帝子之长洲， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">得仙人之旧馆。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">层台耸翠， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">上出重霄； </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">飞阁流丹， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">下临无地。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">鹤汀凫渚， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">穷岛屿之萦回； </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">桂殿兰宫， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">列冈峦之体势。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">披绣闼， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">俯雕甍， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">山原旷其盈视， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">川泽盱其骇瞩。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">闾阎扑地， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">钟鸣鼎食之家； </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">舸舰迷津， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">青雀黄龙之轴。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">虹销雨霁， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">彩彻区明。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%"><font color="#ff0000">落霞与孤鹜齐飞，</font> </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%"><font color="#ff0000">秋水共长天一色</font>。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">渔舟唱晚， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">响穷彭蠡之滨； </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">雁阵惊寒， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">声断衡阳之浦。<br />
<br />
遥襟俯畅， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">逸兴遄飞。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">爽籁发而清风生， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">纤歌凝而白云遏。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">睢园绿竹， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">气凌彭泽之樽； </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">邺水朱华， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">光照临川之笔。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">四美具， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">二难并。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">穷睇眄于中天， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">极娱游于暇日。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">天高地迥， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">觉宇宙之无穷； </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">兴尽悲来， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">识盈虚之有数。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">望长安于日下， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">指吴会于云间。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">地势极而南溟深， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">天柱高而北辰远。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">关山难越， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">谁悲失路之人？ </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">萍水相逢， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">尽是他乡之客。<br />
怀帝阍而不见， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">奉宣室以何年？<br />
<br />
嗟乎！ </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">时运不济， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">命运多舛。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">冯唐易老， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">李广难封。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">屈贾谊于长沙， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">非无圣主； </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">窜梁鸿于海曲， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">岂乏明时。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">所赖君子安贫， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">达人知命。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">老当益壮， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">宁移白首之心？ </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">穷且益坚， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">不坠青云之志。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">酌贪泉而觉爽， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">处涸辙以犹欢。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">北海虽赊， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">扶摇可接； </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">东隅已逝， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">桑榆非晚。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">孟尝高洁， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">空怀报国之心； </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">阮藉猖狂， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">岂效穷途之哭！<br />
<br />
勃三尺微命， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">一介书生。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">无路请缨， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">等终军之弱冠； </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">有怀投笔， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">慕宗悫之长风。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">舍簪笏于百龄， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">奉晨昏于万里。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">非谢家之宝树， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">接孟氏之芳邻。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">他日趋庭， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">叨陪鲤对； </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">今晨捧袂， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">喜托龙门。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">杨意不逢， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">抚凌云而自惜； </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">钟期既遇， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">奏流水以何惭？<br />
<br />
鸣呼！ </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">胜地不常， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">盛筵难再。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">兰亭已矣， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">梓泽丘墟。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">临别赠言， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">幸承恩于伟饯； </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">登高作赋， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">是所望于群公。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">敢竭鄙诚， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">恭疏短引。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">一言均赋， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">四韵俱成。 </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">请洒潘江， </p>
<p style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 200%">各倾陆海云尔。</p></div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>52</wp:post_id>
		<wp:post_date><![CDATA[2007-10-07 15:20:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-10-07 15:20:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%bb%95%e7%8e%8b%e9%98%81%e5%ba%8f-%e3%80%80%e3%80%80%e3%80%80%e3%80%80%e3%80%80%e3%80%80%e3%80%80%e3%80%80%e3%80%80%e3%80%80%e3%80%80%e3%80%80%ef%bc%88%e5%94%90%ef%bc%89%e7%8e%8b%e5%8b%83]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>用C语言进行CGI程序设计[http://colding.bokee.com/5277097.html]</title>
		<link>http://blog.00rz.com/2007/09/%e7%94%a8c%e8%af%ad%e8%a8%80%e8%bf%9b%e8%a1%8ccgi%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1httpcolding-bokee-com5277097-html.html</link>
		<pubDate>Wed, 26 Sep 2007 13:15:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=53</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><h2 class="diaryTitle">]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>53</wp:post_id>
		<wp:post_date><![CDATA[2007-09-26 13:15:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-09-26 13:15:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%94%a8c%e8%af%ad%e8%a8%80%e8%bf%9b%e8%a1%8ccgi%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1httpcolding-bokee-com5277097-html]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543640989]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>linux下C语言多线程编程实例[转]</title>
		<link>http://blog.00rz.com/2007/09/linux%e4%b8%8bc%e8%af%ad%e8%a8%80%e5%a4%9a%e7%ba%bf%e7%a8%8b%e7%bc%96%e7%a8%8b%e5%ae%9e%e4%be%8b%e8%bd%ac.html</link>
		<pubDate>Wed, 26 Sep 2007 12:57:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=54</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p>作者: infobillows]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>54</wp:post_id>
		<wp:post_date><![CDATA[2007-09-26 12:57:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-09-26 12:57:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[linux%e4%b8%8bc%e8%af%ad%e8%a8%80%e5%a4%9a%e7%ba%bf%e7%a8%8b%e7%bc%96%e7%a8%8b%e5%ae%9e%e4%be%8b%e8%bd%ac]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>awk 命令</title>
		<link>http://blog.00rz.com/2007/09/awk-%e5%91%bd%e4%bb%a4.html</link>
		<pubDate>Tue, 25 Sep 2007 12:06:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=55</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  >什么是awk?<br />
你可能对UNIX比较熟悉，但你可能对awk很陌生，这一点也不奇怪，的确，与其优秀的功能相比，awk还远没达到它应有的知名度。awk是什么？与其它大多数UNIX命令不同的是，从名字上看，我们不可能知道awk的功能：它既不是具有独立意义的英文单词，也不是几个相关单词的缩写。事实上，awk是三个人名的缩写，他们是：Aho、(Peter)Weinberg和(Brain)Kernighan。正是这三个人创造了awk---一个优秀的样式扫描与处理工具。 <br />
<br />
AWK的功能是什么？与sed和grep很相似，awk是一种样式扫描与处理工具。但其功能却大大强于sed和grep。awk提供了极其强大的功能：它几乎可以完成grep和sed所能完成的全部工作，同时，它还可以可以进行样式装入、流控制、数学运算符、进程控制语句甚至于内置的变量和函数。它具备了一个完整的语言所应具有的几乎所有精美特性。实际上，awk的确拥有自己的语言：awk程序设计语言，awk的三位创建者已将它正式定义为：样式扫描和处理语言。 <br />
<br />
为什么使用awk?<br />
<br />
即使如此，你也许仍然会问，我为什么要使用awk?<br />
<br />
使用awk的第一个理由是基于文本的样式扫描和处理是我们经常做的工作，awk所做的工作有些象数据库，但与数据库不同的是，它处理的是文本文件，这些文件没有专门的存储格式，普通的人们就能编辑、阅读、理解和处理它们。而数据库文件往往具有特殊的存储格式，这使得它们必须用数据库处理程序来处理它们。既然这种类似于数据库的处理工作我们经常会遇到，我们就应当找到处理它们的简便易行的方法，UNIX有很多这方面的工具，例如sed 、grep、sort以及find等等，awk是其中十分优秀的一种。<br />
<br />
使用awk的第二个理由是awk是一个简单的工具，当然这是相对于其强大的功能来说的。的确，UNIX有许多优秀的工具，例如UNIX天然的开发工具C语言及其延续C++就非常的优秀。但相对于它们来说，awk完成同样的功能要方便和简捷得多。这首先是因为awk提供了适应多种需要的解决方案：从解决简单问题的awk命令行到复杂而精巧的awk程序设计语言，这样做的好处是，你可以不必用复杂的方法去解决本来很简单的问题。例如，你可以用一个命令行解决简单的问题，而C不行，即使一个再简单的程序，C语言也必须经过编写、编译的全过程。其次，awk本身是解释执行的，这就使得awk程序不必经过编译的过程，同时，这也使得它与shell script程序能够很好的契合。最后，awk本身较C语言简单，虽然awk吸收了C语言很多优秀的成分，熟悉C语言会对学习awk有很大的帮助，但awk本身不须要会使用C语言——一种功能强大但需要大量时间学习才能掌握其技巧的开发工具。<br />
<br />
使用awk的第三个理由是awk是一个容易获得的工具。与C和C++语言不同，awk只有一个文件(/bin/awk)，而且几乎每个版本的UNIX都提供各自版本的awk，你完全不必费心去想如何获得awk。但C语言却不是这样，虽然C语言是UNIX天然的开发工具，但这个开发工具却是单独发行的，换言之，你必须为你的UNIX版本的C语言开发工具单独付费（当然使用D版者除外），获得并安装它，然后你才可以使用它。<br />
<br />
基于以上理由，再加上awk强大的功能，我们有理由说，如果你要处理与文本样式扫描相关的工作，awk应该是你的第一选择。在这里有一个可遵循的一般原则：如果你用普通的shell工具或shell script有困难的话，试试awk,如果awk仍不能解决问题，则便用C语言，如果C语言仍然失败，则移至C++。<br />
<br />
awk的调用方式<br />
<br />
前面曾经说过，awk提供了适应多种需要的不同解决方案，它们是：<br />
<br />
一、awk命令行，你可以象使用普通UNIX命令一样使用awk，在命令行中你也可以使用awk程序设计语言，虽然awk支持多行的录入，但是录入长长的命令行并保证其正确无误却是一件令人头疼的事，因此，这种方法一般只用于解决简单的问题。当然，你也可以在shell script程序中引用awk命令行甚至awk程序脚本。<br />
<br />
二、使用-f选项调用awk程序。awk允许将一段awk程序写入一个文本文件，然后在awk命令行中用-f选项调用并执行这段程序。具体的方法我们将在后面的awk语法中讲到。<br />
<br />
三、利用命令解释器调用awk程序：利用UNIX支持的命令解释器功能，我们可以将一段awk程序写入文本文件，然后在它的第一行加上:<br />
#!/bin/awk -f<br />
并赋予这个文本文件以执行的权限。这样做之后，你就可以在命令行中用类似于下面这样的方式调用并执行这段awk程序了。<br />
<br />
$awk脚本文本名 待处理文件<br />
<br />
awk的语法： <br />
<br />
与其它UNIX命令一样，awk拥有自己的语法：<br />
<br />
awk [ -F re] [parameter...] ['prog'] [-f progfile][in_file...] <br />
<br />
参数说明：<br />
<br />
-F re:允许awk更改其字段分隔符。<br />
<br />
parameter: 该参数帮助为不同的变量赋值。<br />
<br />
'prog': awk的程序语句段。这个语句段必须用单拓号：'和'括起，以防被shell解释。这个程序语句段的标准形式为：<br />
<br />
'pattern {action}'<br />
<br />
其中pattern参数可以是egrep正则表达式中的任何一个，它可以使用语法/re/再加上一些样式匹配技巧构成。与sed类似，你也可以使用","分开两样式以选择某个范围。关于匹配的细节，你可以参考附录，如果仍不懂的话，找本UNIX书学学grep和sed（本人是在学习ed时掌握匹配技术的）。action参数总是被大括号包围，它由一系统awk语句组成，各语句之间用";"分隔。awk解释它们，并在pattern给定的样式匹配的记录上执行其操作。与shell类似，你也可以使用“#”作为注释符，它使“#”到行尾的内容成为注释，在解释执行时，它们将被忽略。你可以省略pattern和action之一，但不能两者同时省略，当省略pattern时没有样式匹配，表示对所有行（记录）均执行操作，省略action时执行缺省的操作——在标准输出上显示。 <br />
<br />
-f progfile:允许awk调用并执行progfile指定有程序文件。progfile是一个文本文件，他必须符合awk的语法。 <br />
<br />
in_file:awk的输入文件，awk允许对多个输入文件进行处理。值得注意的是awk不修改输入文件。如果未指定输入文件，awk将接受标准输入，并将结果显示在标准输出上。awk支持输入输出重定向。 <br />
<br />
awk的记录、字段与内置变量：<br />
<br />
前面说过，awk处理的工作与数据库的处理方式有相同之处，其相同处之一就是awk支持对记录和字段的处理，其中对字段的处理是grep和sed不能实现的，这也是awk优于二者的原因之一。在awk中，缺省的情况下总是将文本文件中的一行视为一个记录，而将一行中的某一部分作为记录中的一个字段。为了操作这些不同的字段，awk借用shell的方法，用$1,$2,$3...这样的方式来顺序地表示行（记录）中的不同字段。特殊地，awk用$0表示整个行（记录）。不同的字段之间是用称作分隔符的字符分隔开的。系统默认的分隔符是空格。awk允许在命令行中用-F re的形式来改变这个分隔符。事实上，awk用一个内置的变量FS来记忆这个分隔符。awk中有好几个这样的内置变量，例如，记录分隔符变量RS、当前工作的记录数NR等等，本文后面的附表列出了全部的内置变量。这些内置的变量可以在awk程序中引用或修改，例如，你可以利用NR变量在模式匹配中指定工作范围，也可以通过修改记录分隔符RS让一个特殊字符而不是换行符作为记录的分隔符。<br />
<br />
例:显示文本文件myfile中第七行到第十五行中以字符%分隔的第一字段，第三字段和第七字段：<br />
<br />
awk -F % 'NR==7,NR==15 {printf $1 $3 $7}' <br />
<br />
awk的内置函数<br />
<br />
awk之所以成为一种优秀的程序设计语言的原因之一是它吸收了某些优秀的程序设计语言（例如C）语言的许多优点。这些优点之一就是内置函数的使用，awk定义并支持了一系列的内置函数，由于这些函数的使用，使得awk提供的功能更为完善和强大，例如，awk使用了一系列的字符串处理内置函数(这些函数看起来与C语言的字符串处理函数相似，其使用方式与C语言中的函数也相差无几)，正是由于这些内置函数的使用，使awk处理字符串的功能更加强大。本文后面的附录中列有一般的awk所提供的内置函数，这些内置函数也许与你的awk版本有些出入，因此，在使用之前，最好参考一下你的系统中的联机帮助。<br />
<br />
作为内置函数的一个例子，我们将在这里介绍awk的printf函数，这个函数使得awk与c语言的输出相一致。实际上，awk中有许多引用形式都是从C语言借用过来的。如果你熟悉C语言，你也许会记得其中的printf函数，它提供的强大格式输出功能曾经带我们许多的方便。幸运的是，我们在awk中又和它重逢了。awk中printf几乎与C语言中一模一样，如果你熟悉C语言的话，你完全可以照C语言的模式使用awk中的printf。因此在这里，我们只给出一个例子，如果你不熟悉的话，请随便找一本C语言的入门书翻翻。<br />
<br />
例:显示文件myfile中的行号和第3字段：<br />
<br />
$awk '{printf"%03d%s\n",NR,$1}' myfile<br />
<br />
在命令行使用awk<br />
<br />
按照顺序，我们应当讲解awk程序设计的内容了，但在讲解之前，我们将用一些例子来对前面的知识进行回顾，这些例子都是在命令行中使用的，由此我们可以知道在命令行中使用awk是多么的方便。这样做的原因一方面是为下面的内容作铺垫，另一方面是介绍一些解决简单问题的方法，我们完全没有必要用复杂的方法来解决简单的问题----既然awk提供了较为简单的方法的话。<br />
<br />
例：显示文本文件mydoc匹配（含有）字符串"sun"的所有行。<br />
<br />
$awk '/sun/{print}' mydoc <br />
<br />
由于显示整个记录（全行）是awk的缺省动作，因此可以省略action项。<br />
<br />
$awk '/sun/' mydoc <br />
<br />
例：下面是一个较为复杂的匹配的示例：<br />
<br />
$awk '/[Ss]un/,/[Mm]oon/ {print}' myfile<br />
<br />
它将显示第一个匹配Sun或sun的行与第一个匹配Moon或moon的行之间的行，并显示到标准输出上。 <br />
<br />
例：下面的示例显示了内置变量和内置函数length（）的使用：<br />
<br />
$awk 'length($0)>;80 {print NR}' myfile <br />
<br />
该命令行将显示文本myfile中所有超过80个字符的行号，在这里，用$0表示整个记录（行），同时，内置变量NR不使用标志符'$'。 <br />
<br />
例：作为一个较为实际的例子，我们假设要对UNIX中的用户进行安全性检查，方法是考察/etc下的passwd文件，检查其中的passwd字段（第二字段）是否为"*"，如不为"*"，则表示该用户没有设置密码，显示出这些用户名（第一字段）。我们可以用如下语句实现：<br />
<br />
#awk -F: '$2=="" {printf("%s no password!\n",$1' /etc/passwd<br />
<br />
在这个示例中，passwd文件的字段分隔符是“：”，因此，必须用-F：来更改默认的字段分隔符，这个示例中也涉及到了内置函数printf的使用。 <br />
<br />
awk的变量<br />
<br />
如同其它程序设计语言一样，awk允许在程序语言中设置变量，事实上，提供变量的功能是程序设计语言的其本要求，不提供变量的程序设计语言本人还从未见过。<br />
<br />
awk提供两种变量，一种是awk内置的变量，这前面我们已经讲过，需要着重指出的是，与后面提到的其它变量不同的是，在awk程序中引用内置变量不需要使用标志符"$"（回忆一下前面讲过的NR的使用）。awk提供的另一种变量是自定义变量。awk允许用户在awk程序语句中定义并调用自已的变量。当然这种变量不能与内置变量及其它awk保留字相同，在awk中引用自定义变量必须在它前面加上标志符"$"。与C语言不同的是，awk中不需要对变量进行初始化，awk根据其在awk中第一次出现的形式和上下文确定其具体的数据类型。当变量类型不确定时，awk默认其为字符串类型。这里有一个技巧：如果你要让你的awk程序知道你所使用的变量的明确类型，你应当在在程序中给它赋初值。在后面的实例中，我们将用到这一技巧。 <br />
<br />
运算与判断：<br />
<br />
作为一种程序设计语言所应具有的特点之一，awk支持多种运算，这些运算与C语言提供的几本相同：如+、-、*、/、%等等，同时，awk也支持C语言中类似++、--、+=、-=、=+、=-之类的功能，这给熟悉C语言的使用者编写awk程序带来了极大的方便。作为对运算功能的一种扩展，awk还提供了一系列内置的运算函数（如log、sqr、cos、sin等等）和一些用于对字符串进行操作（运算）的函数（如length、substr等等）。这些函数的引用大大的提高了awk的运算功能。 <br />
<br />
作为对条件转移指令的一部分，关系判断是每种程序设计语言都具备的功能，awk也不例外。awk中允许进行多种测试，如常用的==（等于）、！=（不等于）、>;（大于）、<（小于）、>;=（大于等于）、>;=（小于等于）等等，同时，作为样式匹配，还提供了~（匹配于）和！~（不匹配于）判断。<br />
<br />
作为对测试的一种扩充，awk也支持用逻辑运算符:!(非)、&&（与）、||（或）和括号（）进行多重判断，这大大增强了awk的功能。本文的附录中列出了awk所允许的运算、判断以及操作符的优先级。<br />
<br />
awk的流程控制<br />
<br />
流程控制语句是任何程序设计语言都不能缺少的部分。任何好的语言都有一些执行流程控制的语句。awk提供的完备的流程控制语句类似于C语言，这给我们编程带来了极大的方便。<br />
<br />
1、BEGIN和END:<br />
<br />
在awk中两个特别的表达式，BEGIN和END，这两者都可用于pattern中（参考前面的awk语法），提供BEGIN和END的作用是给程序赋予初始状态和在程序结束之后执行一些扫尾的工作。任何在BEGIN之后列出的操作（在{}内）将在awk开始扫描输入之前执行，而END之后列出的操作将在扫描完全部的输入之后执行。因此，通常使用BEGIN来显示变量和预置（初始化）变量，使用END来输出最终结果。<br />
<br />
例：累计销售文件xs中的销售金额（假设销售金额在记录的第三字段）：<br />
<br />
$awk<br />
>;'BEGIN { FS=":";print "统计销售金额";total=0}<br />
>;{print $3;total=total+$3;}<br />
>;END {printf "销售金额总计：%.2f",total}' sx<br />
（注：>;是shell提供的第二提示符，如要在shell程序awk语句和awk语言中换行，则需在行尾加反斜杠\）<br />
<br />
在这里，BEGIN预置了内部变量FS（字段分隔符）和自定义变量total,同时在扫描之前显示出输出行头。而END则在扫描完成后打印出总合计。<br />
<br />
2、流程控制语句<br />
awk提供了完备的流程控制语句，其用法与C语言类似。下面我们一一加以说明：<br />
<br />
2.1、if...else语句:<br />
<br />
格式：<br />
if(表达式)<br />
语句1<br />
else<br />
语句2<br />
<br />
格式中"语句1"可以是多个语句，如果你为了方便awk判断也方便你自已阅读，你最好将多个语句用{}括起来。awk分枝结构允许嵌套，其格式为：<br />
<br />
if(表达式1）<br />
{if(表达式2）<br />
语句1<br />
else<br />
语句2<br />
}<br />
语句3<br />
else {if(表达式3)<br />
语句4<br />
else<br />
语句5<br />
}<br />
语句6<br />
<br />
当然实际操作过程中你可能不会用到如此复杂的分枝结构，这里只是为了给出其样式罢了。<br />
<br />
2.2、while语句<br />
<br />
格式为:<br />
<br />
while(表达式)<br />
语句<br />
<br />
2.3、do-while语句<br />
<br />
格式为:<br />
<br />
do<br />
{<br />
语句<br />
}while(条件判断语句）<br />
<br />
2.4、for语句<br />
<br />
格式为：<br />
<br />
for(初始表达式;终止条件;步长表达式)<br />
{语句}<br />
<br />
在awk的 while、do-while和for语句中允许使用break,continue语句来控制流程走向，也允许使用exit这样的语句来退出。break中断当前正在执行的循环并跳到循环外执行下一条语句。continue从当前位置跳到循环开始处执行。对于exit的执行有两种情况：当exit语句不在END中时，任何操作中的exit命令表现得如同到了文件尾，所有模式或操作执行将停止，END模式中的操作被执行。而出现在END中的exit将导致程序终止。<br />
<br />
例：为了 <br />
<br />
awk中的自定义函数<br />
<br />
定义和调用用户自己的函数是几乎每个高级语言都具有的功能，awk也不例外，但原始的awk并不提供函数功能，只有在nawk或较新的awk版本中才可以增加函数。<br />
<br />
函数的使用包含两部分：函数的定义与函数调用。其中函数定义又包括要执行的代码（函数本身）和从主程序代码传递到该函数的临时调用。 <br />
<br />
awk函数的定义方法如下： <br />
<br />
function 函数名(参数表){<br />
函数体<br />
}<br />
<br />
在gawk中允许将function省略为func，但其它版本的awk不允许。函数名必须是一个合法的标志符，参数表中可以不提供参数（但在调用函数时函数名后的一对括号仍然是不可缺少的），也可以提供一个或多个参数。与C语言相似，awk的参数也是通过值来传递的。<br />
<br />
在awk中调用函数比较简单，其方法与C语言相似，但awk比C语言更为灵活，它不执行参数有效性检查。换句话说，在你调用函数时，可以列出比函数预计（函数定义中规定）的多或少的参数，多余的参数会被awk所忽略，而不足的参数，awk将它们置为缺省值0或空字符串，具体置为何值，将取决于参数的使用方式。<br />
<br />
awk函数有两种返回方式：隐式返回和显式返回。当awk执行到函数的结尾时，它自动地返回到调用程序，这是函数是隐式返回的。如果需要在结束之前退出函数，可以明确地使用返回语句提前退出。方法是在函数中使用形如：return 返回值 格式的语句。 <br />
<br />
例：下面的例子演示了函数的使用。在这个示例中，定义了一个名为print_header的函数，该函数调用了两个参数FileName和PageNum，FileName参数传给函数当前使用的文件名，PageNum参数是当前页的页号。这个函数的功能是打印（显示）出当前文件的文件名，和当前页的页号。完成这个功能后，这个函数将返回下一页的页号。<br />
<br />
nawk <br />
>;'BEGIN{pageno=1;file=FILENAME <br />
>;pageno=print_header(file，pageno)；#调用函数print_header<br />
>;printf("当前页页号是：%d\n",pageno);<br />
>;}<br />
<br />
>;#定义函数print_header<br />
>;function print_header(FileName,PageNum){<br />
>;printf("%s %d\n",FileName,PageNum); ><img border="0" smilieid="9" src="http://bbs.chinaunix.net/images/smilies/titter.gif">ageNum++;return PageNUm; <br />
>;}<br />
>;}' myfile <br />
<br />
执行这个程序将显示如下内容：<br />
<br />
myfile 1<br />
当前页页号是：2<br />
<br />
awk高级输入输出<br />
<br />
1.读取下一条记录：<br />
<br />
awk的next语句导致awk读取下一个记录并完成模式匹配，然后立即执行相应的操作。通常它用匹配的模式执行操作中的代码。next导致这个记录的任何额外匹配模式被忽略。<br />
<br />
2.简单地读取一条记录<br />
<br />
awk的 getline语句用于简单地读取一条记录。如果用户有一个数据记录类似两个物理记录，那么getline将尤其有用。它完成一般字段的分离(设置字段变量$0 FNR NF NR)。如果成功则返回1，失败则返回0（到达文件尾）。如果需简单地读取一个文件，则可以编写以下代码：<br />
<br />
例：示例getline的使用<br />
<br />
{while(getline==1)<br />
{<br />
#process the inputted fields<br />
}<br />
}<br />
<br />
也可以使getline保存输入数据在一个字段中，而不是通过使用getline variable的形式处理一般字段。当使用这种方式时，NF被置成0，FNR和NR被增值。<br />
<br />
用户也可以使用getline<"filename"方式从一个给定的文件中输入数据，而不是从命令行所列内容输入数据。此时，getline将完成一般字段分离（设置字段变量$0和NF)。如果文件不存在，返回-1,成功，返回1,返回0表示失败。用户可以从给定文件中读取数据到一个变量中，也可以用stdin(标准输入设备）或一个包含这个文件名的变量代替filename。值得注意的是当使用这种方式时不修改FNR和NR。<br />
<br />
另一种使用getline语句的方法是从UNIX命令接受输入，例如下面的例子:<br />
<br />
例：示例从UNIX命令接受输入<br />
<br />
{while("who -u"|getline)<br />
{<br />
#process each line from the who command<br />
}<br />
}<br />
<br />
当然，也可以使用如下形式:<br />
<br />
"command" | getline variable<br />
<br />
3.关闭文件:<br />
<br />
awk中允许在程序中关闭一个输入或输出文件，方法是使用awk的close语句。<br />
<br />
close("filename"<img border="0" smilieid="60" src="http://bbs.chinaunix.net/images/smilies/icon_wink.gif"><br />
<br />
filename可以是getline打开的文件（也可以是stdin,包含文件名的变量或者getline使用的确切命令）。或一个输出文件（可以是stdout，包含文件名的变量或使用管道的确切命令）。<br />
<br />
4.输出到一个文件:<br />
<br />
awk中允许用如下方式将结果输出到一个文件：<br />
<br />
printf("hello word!\n"<img border="0" smilieid="60" src="http://bbs.chinaunix.net/images/smilies/icon_wink.gif">>;"datafile"<br />
或<br />
printf("hello word!\n"<img border="0" smilieid="60" src="http://bbs.chinaunix.net/images/smilies/icon_wink.gif">>;>;"datafile"<br />
<br />
5.输出到一个命令<br />
<br />
awk中允许用如下方式将结果输出到一个命令：<br />
<br />
printf("hello word!\n"<img border="0" smilieid="60" src="http://bbs.chinaunix.net/images/smilies/icon_wink.gif">|"sort-t','" <br />
<br />
awk与shell script混合编程<br />
<br />
因为awk可以作为一个shell命令使用，因此awk能与shell批处理程序很好的融合在一起，这给实现awk与shell程序的混合编程提供了可能。实现混合编程的关键是awk与shell script之间的对话，换言之，就是awk与shell script之间的信息交流:awk从shell script中获取所需的信息（通常是变量的值）、在awk中执行shell命令行、shell script将命令执行的结果送给awk处理以及shell script读取awk的执行结果等等。<br />
<br />
1.awk读取Shell script程序变量<br />
<br />
在awk中我们可以通过“'$变量名'”的方式读取sell scrpit程序中的变量。<br />
<br />
例：在下面的示例中，我们将读取sell scrpit程序中的变量Name，该变量存放的是文本myfile的撰写者，awk将打印出这个人名。<br />
<br />
$cat writename<br />
:<br />
# @(#)<br />
#<br />
.<br />
.<br />
.<br />
Name="张三" nawk 'BEGIN {name="'Name'";\ printf("\t%s\t撰写者%s\n",FILENAME,name"<img border="0" smilieid="60" src="http://bbs.chinaunix.net/images/smilies/icon_wink.gif">;}\<br />
{...}END{...}' myfile<br />
.<br />
.<br />
.<br />
<br />
2.将shell命令的执行结果送给awk处理<br />
<br />
作为信息传送的一种方法，我们可以将一条shell命令的结果通过管道线（|）传递给awk处理：<br />
<br />
例：示例awk处理shell命令的执行结果<br />
<br />
$who -u | awk '{printf("%s正在执行%s\n",$2,$1)}'<br />
<br />
该命令将打印出注册终端正在执行的程序名。<br />
<br />
3.shell script程序读awk的执行结果<br />
<br />
为了实现shell script程序读取awk执行的结果，我们可以采取一些特殊的方法，例如我们可以用变量名=`awk语句`的形式将awk执行的结果存放入一个shell script变量。当然也可以用管道线的方法将awk执行结果传递给shell script程序处理。 <br />
<br />
例：作为传送消息的机制之一，UNIX提供了一个向其所有用户传送消息的命令wall（意思是write to all写给所有用户），该命令允许向所有工作中的用户（终端）发送消息。为此，我们可以通过一段shell批处理程序wall.shell来模拟这一程序（事实上比较老的版本中wall就是一段shell批处理程序：<br />
<br />
$cat wall.shell<br />
:<br />
# @(#) wall.shell:发送消息给每个已注册终端<br />
#<br />
cat >;/tmp/$$<br />
#用户录入消息文本 who -u | awk '{print $2}' | while read tty<br />
do<br />
cat /tmp/$$>;$tty<br />
done<br />
<br />
在这个程序里，awk接受who -u命令的执行结果，该命令打印出所有已注册终端的信息，其中第二个字段是已注册终端的设备名，因此用awk命令析出该设备名，然后用while read tty语句循环读出这些文件名到变量（shell script变量）tty中，作为信息传送的终结地址。<br />
<br />
4.在awk中执行shell命令行----嵌入函数system()<br />
<br />
system()是一个不适合字符或数字类型的嵌入函数，该函数的功能是处理作为参数传递给它的字符串。system对这个参数的处理就是将其作为命令处理，也就是说将其当作命令行一样加以执行。这使得用户在自己的awk程序需要时可以灵活地执行命令或脚本。<br />
<br />
例：下面的程序将使用system嵌入函数打印用户编制好的报表文件，这个文件存放在名为myreport.txt的文件中。为简约起见，我们只列出了其END部分：<br />
<br />
.<br />
.<br />
.<br />
END {close("myreport.txt"<img border="0" smilieid="60" src="http://bbs.chinaunix.net/images/smilies/icon_wink.gif">;system("lp myreport.txt"<img border="0" smilieid="60" src="http://bbs.chinaunix.net/images/smilies/icon_wink.gif">;} <br />
<br />
在这个示例中，我们首先使用close语句关闭了文件myreport.txt文件，然后使用system嵌入函数将myreport.txt送入打印机打印。<br />
<br />
写到这里，我不得不跟朋友们说再见了，实在地说，这些内容仍然是awk的初步知识，电脑永远是前进的科学，awk也不例外，本篇所能做的只是在你前行的漫漫长途中铺平一段小小开端，剩下的路还得靠你自己去走。老实说，如果本文真能给你前行的路上带来些许的方便，那本人就知足了！<br />
<br />
附录：<br />
<br />
1.awk的常规表达式元字符<br />
<br />
\ 换码序列<br />
^ 在字符串的开头开始匹配<br />
$ 在字符串的结尾开始匹配<br />
. 与任何单个字符串匹配<br />
[ABC] 与[]内的任一字符匹配<br />
[A-Ca-c] 与A-C及a-c范围内的字符匹配（按字母表顺序）<br />
[^ABC] 与除[]内的所有字符以外的任一字符匹配<br />
Desk|Chair 与Desk和Chair中的任一个匹配<br />
[ABC][DEF] 关联。与A、B、C中的任一字符匹配，且其后要跟D、E、F中的任一个字符。<br />
* 与A、B或C中任一个出现0次或多次的字符相匹配 <br />
+ 与A、B或C中任何一个出现1次或多次的字符相匹配<br />
？ 与一个空串或A、B或C在任何一个字符相匹配<br />
（Blue|Black）berry 合并常规表达式，与Blueberry或Blackberry相匹配 <br />
<br />
2.awk算术运算符<br />
<br />
运算符 用途<br />
------------------<br />
x^y x的y次幂<br />
x**y 同上<br />
x%y 计算x/y的余数（求模）<br />
x+y x加y<br />
x-y x减y<br />
x*y x乘y<br />
x/y x除y<br />
-y 负y(y的开关符号);也称一目减<br />
++y y加1后使用y(前置加）<br />
y++ 使用y值后加1（后缀加）<br />
--y y减1后使用y(前置减）<br />
y-- 使用后y减1(后缀减）<br />
x=y 将y的值赋给x<br />
x+=y 将x+y的值赋给x<br />
x-=y 将x-y的值赋给x<br />
x*=y 将x*y的值赋给x<br />
x/=y 将x/y的值赋给x x%=y 将x%y的值赋给x<br />
x^=y 将x^y的值赋给x<br />
x**=y 将x**y的值赋给x<br />
<br />
3.awk允许的测试：<br />
<br />
操作符 含义<br />
<br />
x==y x等于y<br />
x!=y x不等于y<br />
x>;y x大于y<br />
x>;=y x大于或等于y<br />
x<y x小于y<br />
x<=y x小于或等于y?<br />
x~re x匹配正则表达式re?<br />
x!~re x不匹配正则表达式re? <br />
<br />
4.awk的操作符(按优先级升序排列)<br />
<br />
= 、+=、 -=、 *= 、/= 、 %=<br />
||<br />
&&<br />
>; >;= < <= == != ~ !~<br />
xy (字符串连结，'x''y'变成"xy"）<br />
+ -<br />
* / % <br />
++ --<br />
<br />
5.awk内置变量（预定义变量）<br />
<br />
说明：表中v项表示第一个支持变量的工具（下同）：A=awk，N=nawk,P=POSIX awk,G=gawk<br />
<br />
V 变量 含义 缺省值<br />
--------------------------------------------------------<br />
N ARGC 命令行参数个数 <br />
G ARGIND 当前被处理文件的ARGV标志符<br />
N ARGV 命令行参数数组<br />
G CONVFMT 数字转换格式 %.6g<br />
P ENVIRON UNIX环境变量<br />
N ERRNO UNIX系统错误消息<br />
G FIELDWIDTHS 输入字段宽度的空白分隔字符串<br />
A FILENAME 当前输入文件的名字<br />
P FNR 当前记录数<br />
A FS 输入字段分隔符 空格<br />
G IGNORECASE 控制大小写敏感0（大小写敏感）<br />
A NF 当前记录中的字段个数<br />
A NR 已经读出的记录数<br />
A OFMT 数字的输出格式 %.6g<br />
A OFS 输出字段分隔符 空格<br />
A ORS 输出的记录分隔符 新行<br />
A RS 输入的记录他隔符 新行<br />
N RSTART 被匹配函数匹配的字符串首<br />
N RLENGTH 被匹配函数匹配的字符串长度<br />
N SUBSEP 下标分隔符 "\034"<br />
<br />
6.awk的内置函数<br />
<br />
V 函数 用途或返回值<br />
------------------------------------------------<br />
N gsub(reg,string,target) 每次常规表达式reg匹配时替换target中的string<br />
N index(search,string) 返回string中search串的位置<br />
A length(string) 求串string中的字符个数<br />
N match(string,reg) 返回常规表达式reg匹配的string中的位置<br />
N printf(format,variable) 格式化输出，按format提供的格式输出变量variable。<br />
N split(string,store,delim) 根据分界符delim,分解string为store的数组元素<br />
N sprintf(format,variable) 返回一个包含基于format的格式化数据，variables是要放到串中的数据<br />
G strftime(format,timestamp) 返回一个基于format的日期或者时间串，timestmp是systime()函数返回的时间<br />
N sub(reg,string,target) 第一次当常规表达式reg匹配，替换target串中的字符串<br />
A substr(string,position,len) 返回一个以position开始len个字符的子串<br />
P totower(string) 返回string中对应的小写字符<br />
P toupper(string) 返回string中对应的大写字符<br />
A atan(x,y) x的余切(弧度)<br />
N cos(x) x的余弦(弧度)<br />
A exp(x) e的x幂<br />
A int(x) x的整数部分<br />
A log(x) x的自然对数值<br />
N rand() 0-1之间的随机数<br />
N sin(x) x的正弦(弧度)<br />
A sqrt(x) x的平方根<br />
A srand(x) 初始化随机数发生器。如果忽略x，则使用system()<br />
G system() 返回自1970年1月1日以来经过的时间（按秒计算）<br style="CLEAR: both"></div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>55</wp:post_id>
		<wp:post_date><![CDATA[2007-09-25 12:06:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-09-25 12:06:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[awk-%e5%91%bd%e4%bb%a4]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[5952838002]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>用 P3P 实现隐私参数优选策略</title>
		<link>http://blog.00rz.com/2007/09/%e7%94%a8-p3p-%e5%ae%9e%e7%8e%b0%e9%9a%90%e7%a7%81%e5%8f%82%e6%95%b0%e4%bc%98%e9%80%89%e7%ad%96%e7%95%a5.html</link>
		<pubDate>Mon, 17 Sep 2007 13:39:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=56</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p><span class="hui">偶尔在yahoo的 头信息里看到p3p就上网查了一下 放在这里储存<br />
<?php<br />
</span><span class="hui">print_r(get_headers());<br />
?><br />
结果是这样的 <br />
Array<br />
(<br />
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>56</wp:post_id>
		<wp:post_date><![CDATA[2007-09-17 13:39:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-09-17 13:39:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%94%a8-p3p-%e5%ae%9e%e7%8e%b0%e9%9a%90%e7%a7%81%e5%8f%82%e6%95%b0%e4%bc%98%e9%80%89%e7%ad%96%e7%95%a5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>正则表达式快速入门五【http://www.chinaz.com/Server/Linux/041M0442007.html】</title>
		<link>http://blog.00rz.com/2007/08/%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f%e5%bf%ab%e9%80%9f%e5%85%a5%e9%97%a8%e4%ba%94%e3%80%90httpwww-chinaz-comserverlinux041m0442007-html%e3%80%91.html</link>
		<pubDate>Tue, 14 Aug 2007 10:59:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=57</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  >在<a target="_blank" href="http://biz.chinabyte.com/382/2225382.shtml">上一篇文章</a>里，我们介绍了正则表达式中的递归与替换，现在让我们接触一个学习正则表达式时方便测试使用的工具，并介绍一些正则表达式的编写思路。
<p>　　<strong>一个学习正则表达式的便捷工具</strong></p>
<p>　　学习正则表达式最好的方法当然是实践，不过支持正则表达式的工具虽多，但如果仅仅用来做练习却不是很方便。</p>
<p>　　这里我向一家推荐一款专门的正则表达式编写测试工具，PHPEdit公司的Regular Expression Editor工具。这是一个免费软件，主要用来调试PHP使用的Perl兼容正则表达式函数。使用它可以方便的输入目标字符串和正则表达式，并实时看到匹配的结果。可以到它的<a target="_blank" href="http://www.waterproof.fr/products/RegExpEditor/download.php">下载网页</a>去下载这个工具。</p>
<p>　　程序的界面非常简明，不过使用中发现，它的一些功能使用起来好像有问题，只有preg_match_all和preg_replace功能正常，另外在匹配模式输入框中，不要加模式定界符，程序好像把该输入框中的全部内容都作为模式来解析。</p>
<p>　　好在做为一个正则表达式的练习工具，它的功能是足够了，下面是它的运行界面。</p>
<p align="center"><img border="0" src="http://server.chinabyte.com/imagelist/05/12/4u10dqea311c.jpg"><br />
程序运行界面</p>
<p>　　文中提到的各个例子都可以在里面进行测试，在最上面的框里输入模式，把目标字符串写进中间的输入框，点击&ldquo;run the regxwp&rdquo;按钮可以在下面得到匹配结果。</p>
<p><strong>正则表达式的编写思路</strong></p>
<p>　　<em>一个避免过多匹配的小技巧</em></p>
<p>　　前面我们已经多此谈到书写不合理的正则表达式引起过多匹配的问题，现在的问题是，如何可以尽量避免类似的情况发生。这里有个小小的技巧。</p>
<p>　　如果你发现你定制模式匹配了过多的结果，一个好的方法是换个思路，与其考虑我的模式下一步需要匹配什么，不如考虑我的模式下一步需要避免匹配什么。我们可以用元字答&ldquo;^&rdquo;和字符类很容易的达成这种效果，这常常可以得到更精确的匹配。</p>
<p>　　为了说明这种思路的好处我们先来举一个与正则表达式无关的例子，考虑这样一个问题，你把一个骰子一次抛出6的概率是六分之一，如果让你掷六次，掷出一个6的概率是多少呢?</p>
<p>　　可能有人会这么算，一次的概率是1/6，六次是就是6个1/6，加起来等于1。这个结果明显是错的，虽然你掷了六次，但肯定不能保证必然会掷出一个6。从正向的思路解这道题看上去有点难。</p>
<p>　　如果我们换个思路，解决的方法就明确多了。我们可以把这个题的问法改成这样，如果让你掷6次骰子，每一次都掷不出6的概率是多少?这个问题就好解多了，根据概率的乘法原理，每一次掷出不是6的点数的概率是5/6，而6次中每一次都不是6的概率是5/6的6次方，大概等于33%的样子，然后用1减去这个数字就可以得到我们需要的答案。</p>
<p>　　你可以把模式中每部分的匹配看作掷一次骰子的过程，每一部分的匹配概率与总匹配概率的情况与我们上面这个例子非常相似。</p>
<p>　　<em>如何提高正则表达式的解析效率</em></p>
<p>　　对同样匹配内容的正则表达式而言，一些模式往往比另外一些模式更有效率。举一个简单的例子，使用字符类&ldquo;[aeiou]&rdquo;会比使用分支选择型模式&ldquo;(a|e|i|o|u).&rdquo;更有效，一般而言，使用尽可能简单和基本的模式通过会得到更高的效率。</p>
<p>　　应该尽可能的慎用相互嵌套的无限重复量词，当遇到不匹配的目标字符串时，对字符串的解析有可能花掉很可观的时间。比如下面这个模式片断&ldquo;(a+)*&rdquo;，当遇到不匹配的目标字符串&ldquo;aaaa&rdquo;时，解析器会对它尝试33种不同的匹配方法，这个数目会随不匹配字符串长度的增加而极快的增长。</p>
<p>　　一些正则表达式工具对一些特定的模式匹配进行了优化以提高效率，了解你使用的正则表达式工作做过些什么优化并尽可能利用经过优化的模式可以大大提高你的正则表达式执行效率。例如，PHP对形如/a+)*b /这样的模式的解析进行了优化，当模式结尾是一个确定的字符时，解析器会先查找目标的结尾是否符合模式，如果否则立刻返回失败的匹配结果并停止解析。如果将上面的样式改为&ldquo;(a+)*\d&rdquo;时，因为结尾不再是一个确定的字符，此模式会按正常的过程解析。如果你想看一下两者效果的差异，你在我们前面提到的工具中，把目标字符串设置成25个小写的a字符，然后分别测试两个模式，前者立刻就结束了，而后者需要等待约一秒(笔者使用的是XP1700+处理器)。</p>
<p>　　除了尽可能利用经过优化的模式，对一些模式进行重新构造也可以大大提高效率。我们在介绍后向断言时介绍过的那个利用后向断言结合一次性子模式匹配结尾的字符的方法就是一个很好的例子。</p>
<p>　　这里我们准备结束这个教程，由于篇幅和本人水平的限制文中可能会有很多疏漏，还要请求大家谅解。对正则表达式介绍最全面的可能还是Perl相关的一些文档和著作，如果想对正则表达式进行更深入的了解可以参看Jeffrey Friedl 写的&ldquo;Mastering Regular Expressions&rdquo;一书，里面有很多例子。不过我觉得在了解正则表达式基本概念后，还是仔细读一下自己经常使用的相关工具里的正则表达式相关部分更实用一些，最后，还是那句话，实践出真知，希望大家在不断实践中更好的掌握正则表达式的使用。</p></div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>57</wp:post_id>
		<wp:post_date><![CDATA[2007-08-14 10:59:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-08-14 10:59:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f%e5%bf%ab%e9%80%9f%e5%85%a5%e9%97%a8%e4%ba%94%e3%80%90httpwww-chinaz-comserverlinux041m0442007-html%e3%80%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>正则表达式快速入门四【http://www.chinaz.com/Server/Linux/041M0442007.html】</title>
		<link>http://blog.00rz.com/2007/08/%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f%e5%bf%ab%e9%80%9f%e5%85%a5%e9%97%a8%e5%9b%9b%e3%80%90httpwww-chinaz-comserverlinux041m0442007-html%e3%80%91.html</link>
		<pubDate>Tue, 14 Aug 2007 10:59:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=58</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  >在<a target="_blank" href="http://biz.chinabyte.com/cbfwq/4/2219504.shtml">上一篇文章</a>里，我们介绍了正则表达式中断言相关的一些概念，在本文里，我们会介绍正则表达式中递归的运用与利用正则表达式修改目标字符串。
<p>　　<strong>正则表达式中的递归</strong></p>
<p>　　接触过程序的朋友可能都遇到过成对的各种括号吧，这些括号常常相互嵌套，而且嵌套的层次数目无法确定。试想一下如果想提取一段程序里用括号括起的一段代码，这里面很可能包含了层次数目不定的其它括号对，用正则表达式该如何完成?</p>
<p>　　在Perl 5.6之前这的确有点困难，不过从Perl 5.6之后，引入了递归正则表达式，这个问题得到了解决。通常在正则表达式里用&ldquo;(?R)&rdquo;表示一个对自己的引用，下面让我们看看用什么正则表达式来解决刚才提出的问题。</p>
<p>
<table style="border-right: #cccccc 1px dotted; table-layout: fixed; border-top: #cccccc 1px dotted; border-left: #cccccc 1px dotted; border-bottom: #cccccc 1px dotted" cellspacing="0" cellpadding="6" width="95%" align="center" border="0">
    <tbody>
        <tr>
            <td style="word-wrap: break-word" bgcolor="#f3f3f3">/\( ( (?>[^()]+) | (?R) )* \)/x</td>
        </tr>
    </tbody>
</table>
</p>
<p>　　现在让我们来分析这个模式的含义，这里使用了&ldquo;x&rdquo;模式修正符，以便可以在模式中加入空格以方便阅读。</p>
<p>　　模式的开头是匹配第一个左圆括号，然后我们需要捕获的子模式，注意，字模式后面跟了量词&ldquo;*&rdquo;，表示此模式可以重复0到多次。最后是一个结束圆括号。现在我们分析子模式( (?>[^()]+) | (?R) )的内容。这是一个分支子模式，表示模式可以有两种情况，第一种是(?>[^()]+)，这是一个一次性子模式，代表一个以上的非括号字符，另一种情况是| (?R)，也即对正则表达式自己的递归调用&mdash;&mdash;\( ( (?>[^()]+) | (?R) )* \)，又寻找一个左圆括号，开始查找一对嵌套的圆括号包含的内容。</p>
<p>　　分析到这里，这个正则表达式的含义已经基本清楚，但你注意到没有，这里为什么要使用一次性子模式(?>[^()]+)来查找非括号字符串?</p>
<p>　　事实上，由于递归的层次是无限的，这种处理非常必要，特别是遇到不匹配的字符串时，它不会让你陷入长时间的等待。考虑一下下面这个目标字符串，</p>
<p>　　(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa()</p>
<p>　　在得出不匹配的最终结果前，如果不使用一次性子模式，解析器将尝试每一种可能的方法来分割目标字符串，这将浪费大量的时间。</p>
<p><strong>用正则表达式修改目标</strong></p>
<p>　　并非所有的正则表达式工具都允许你修改目标字符串，它们中的一些仅仅使用正则表达式来查找匹配指定模式的字符串，在Linux中，最为广泛使用的支持正则表达式的工具就是grep命令，这是一个专门用来查找的工具，再就是一些文本编辑器工具，它们有的允许使用正则表达式替换，有的则不允许，这需要查看你使用的工具的在线手册。</p>
<p>　　对于那些允许你使用正则表达式来修改目标字符串的工具中，它们之间的一些不同你必然放在心上:</p>
<p>　　这些不同首先表现在替换的具体形式上，有的是以对话框的形式分别让你输入需要查找的模式和被替换的内容，有些则使用命令使界面通过定界符来分隔匹配的模式与需要替换的内容，对于一些编程语言工具，它们通常通过函数的不同参数来分别定义需要匹配的模式与替换的内容。</p>
<p>　　另一个需要注意的不同是这些工具具体修改的对象。大多数基于Linux的命令行工具一般是通过标准输出或者管道来修改缓存的内容而非直接修改磁盘上存储的文件，而文本编辑器工具或编程语言通常会直接修改目标文件。</p>
<p>　　我们下面用Linux下sed命令的格式来举几个正则表达式的例子:</p>
<p>　　模式:s/cat/dog/g</p>
<p>　　输入:wild dogs, bobcats, lions, and other wild cats</p>
<p>　　输出:wild dogs, bobdogs, lions, and other wild dogs</p>
<p>　　模式:s/[a-z]+i[a-z]*/nice/g</p>
<p>　　输入:wild dogs, bobcats, lions, and other wild cats</p>
<p>　　输出: nice dogs, bobcats, nice, and other nice cats</p>
<p>　　当我们使用模式进行替换操作时，目标字符串中所有匹配模式的字符串都将被替换。</p>
<p>　　下面再举一个使用逆向引用进行替换的例子:</p>
<p>　　模式:s/([A-Z])([0-9]{2,4}) /\2:\1 /g</p>
<p>　　输入: A37 B4 C107 D54112 E1103 XXX</p>
<p>　　输出: 37:A B4 107:C D54112 1103:E XXX</p>
<p>　　前面已经介绍过默认情况下的匹配一般是greedy的，这常会使实际匹配的部分大于你希望匹配的内容，特别是在进行替换操作时这将更加危险，因为如果你在错误匹配的情况下执行了一次替换操作，实际上你是删除了目标中的有效内容，特别是当这种操作面向文件时造成的危害就更大了。因此，牢记一个不严格的字符类加上一个不严格的量词足以造成不可挽回的后果，执行类似操作前一定要多测试一下不同的目标字符串，尽可能避免这种情况的发生。</p>
<p>　　在本教程的<a target="_blank" href="http://biz.chinabyte.com/cbfwq/326/2226826.shtml">下一篇文章</a>里，我们会介绍一款可以方便进行正则表达式学习的工具和一些正则表达式编写的思路。</p></div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>58</wp:post_id>
		<wp:post_date><![CDATA[2007-08-14 10:59:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-08-14 10:59:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f%e5%bf%ab%e9%80%9f%e5%85%a5%e9%97%a8%e5%9b%9b%e3%80%90httpwww-chinaz-comserverlinux041m0442007-html%e3%80%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>正则表达式快速入门三【http://www.chinaz.com/Server/Linux/041M0442007.html】</title>
		<link>http://blog.00rz.com/2007/08/%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f%e5%bf%ab%e9%80%9f%e5%85%a5%e9%97%a8%e4%b8%89%e3%80%90httpwww-chinaz-comserverlinux041m0442007-html%e3%80%91.html</link>
		<pubDate>Tue, 14 Aug 2007 10:58:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=59</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  >在<a target="_blank" href="http://biz.chinabyte.com/cbfwq/406/2217406.shtml?42">上文</a>里，我们介绍了正则表达式的子模式，逆向引用和量词，在这篇文章里，我们将重点介绍正则表达式中的断言(Assertions)。
<p>　　<strong>断言(Assertions)</strong></p>
<p>　　断言(Assertions)是在目标字符串的当前匹配位置进行的一种测试但这种测试并不占用目标字符串，也即不会移动模式在目标字符串中的当前匹配位置。</p>
<p>　　读起来似乎有点拗口，我们还是举几个简单的例子。</p>
<p>　　两个最常见的断言是元字符&ldquo;^&rdquo;和&ldquo;$&rdquo;，它们检查匹配模式是否出现在行首或行尾。</p>
<p>　　我们来看这个模式/^\d\d\d$/，试着用它来匹配目标字符串&ldquo;123&rdquo;。&ldquo;\d\d\d&rdquo;表示三个数字字符，匹配了目标字符串的三个字符，而模式中的^和$分别表示这三个字符同时出现在行首和行尾，而它们本身并不与目标字符串中的任何字符相对应。</p>
<p>　　其它还有一些简单的断言\b, \B, \A, \Z, \z，它们都以反斜线开头，前面我们已经介绍过反斜线的这个用法。这几个断言的含义如下表。</p>
<p>
<table cellspacing="0" cellpadding="0" align="center" border="1">
    <tbody>
        <tr>
            <td valign="top" width="284">
            <div>断言</div>
            </td>
            <td valign="top" width="284">
            <div>含义</div>
            </td>
        </tr>
        <tr>
            <td valign="top" width="284">
            <div>\b</div>
            </td>
            <td valign="top" width="284">
            <div>字分界线</div>
            </td>
        </tr>
        <tr>
            <td valign="top" width="284">
            <div>\B</div>
            </td>
            <td valign="top" width="284">
            <div>非字分界线</div>
            </td>
        </tr>
        <tr>
            <td valign="top" width="284">
            <div>\A</div>
            </td>
            <td valign="top" width="284">
            <div>目标的开头（独立于多行模式）</div>
            </td>
        </tr>
        <tr>
            <td valign="top" width="284">
            <div>\Z</div>
            </td>
            <td valign="top" width="284">
            <div>目标的结尾或位于结尾的换行符前（独立于多行模式）</div>
            </td>
        </tr>
        <tr>
            <td valign="top" width="284">
            <div>\z</div>
            </td>
            <td valign="top" width="284">
            <div>目标的结尾（独立于多行模式）</div>
            </td>
        </tr>
        <tr>
            <td valign="top" width="284">
            <div>\G</div>
            </td>
            <td valign="top" width="284">
            <div>目标中的第一个匹配位置</div>
            </td>
        </tr>
    </tbody>
</table>
</p>
<p>　　注意这些断言不能出现在字符类中，如果出现了也是其它的含义，例如\b在字符类中表示反斜线字符0x08。</p>
<p>　　前面介绍的这些断言的测试都是一些基于当前位置的测试，断言还支持更多复杂的测试条件。更复杂的断言以子模式方式来表示，它包括前向断言(Lookahead assertions)和后向断言(Lookbehind assertions)。</p>
<p>　　<em>前向断言(Lookahead assertions)</em></p>
<p>　　前向断言从目标字符串的当前位置向前测试断言条件是否成立。前向断言又可分为前向肯定断言和前向否定断言，分别用(?=和{?!表示。例如模式/ \w+(?=;)/用来表示一串文本字符后面会有一个分号，但是这个分号并不包括在匹配结果中。一件有趣的事看起来差不多的模式/ (?=;)\w+/并不是表示一串前面不是分号的alpha字符串，事实上，不论这串alpha字符的前面是否是一个分号它总是匹配的，要完成这个功能需要我们下面提到的后向断言(Lookbehind assertions)。</p>
<p>　　<em>后向断言(Lookbehind assertions)</em></p>
<p>　　后向断言分别用(?<=和(?<!表示肯定的后向断言与否定后向断言。例如，/ (?<!foo)bar/将寻找一个前面不是foo的bar字符串。一般而言，后向断言使用的子模式需要有确定的长度值，否则会产生一个编译错误。</p>
<p>　　使用后向断言与一次性子模式搭配使用可以有效的文本的结束部分进行匹配，这里来看一下例子。</p>
<p>　　考虑一下如果用/abcd$/这样一个简单的模式来匹配一长段以abcd结尾的文本，因为模式的匹配过程是从左向右进行的，正则表达式引擎将在文本中寻找每一个a字符并尝试匹配剩余的模式，如果在这长段文本里仅好有不少的a字符，这样做明显是非常低效的，而如果把以上模式换成为样/^.*abcd$/，这时前面的&ldquo;^.*&rdquo;部分将匹配整个文本，然后它发现下一个模式a无法匹配，这时会发生前面提到过的回溯过程，解析器会逐次缩短&ldquo;^.*&rdquo;匹配的字符长度从右向左逐次查找剩余的子模式，也要产生多次的尝试过程。现在，我们用一次性子模式与后向断言重写所用的模式，改为/^(?>.*)(?<=abcd)/，这时，一次性子模式一次匹配了整段文本，然后用后向断言检查前面四个字符是否为abcd，只需要一次检测就可以立刻确定整个模式是否匹配。在遇到需要匹配一个很长的文本时，这种方法可以非常显著的提高处理效率。</p>
<p>　　一个模式中可以包含多个相继的断言，断言也可以嵌套。另外，断言使用的子模式也是非捕获的，不能被逆向引用。</p>
<p>　　断言的一个重要应用领域就是做为条件子模式的条件。那什么是条件子模式呢？</p>
<p> </p>
<p>　　<em>条件子模式(Conditional subpatterns)</em></p>
<p>　　正则表达式允许在模式中根据不同的条件使用不同的匹配子模式。也就是条件子模式(Conditional subpatterns)。它的格式如下:(?(condition)yes-pattern)或者 (?(condition)yes-pattern|no-pattern)。如果条件满足，采用yes-pattern，否则，采用no-pattern(如果在模式中提供了话)。</p>
<p>　　条件子模式中的条件有两种，一种是断言结果，另一种是看是否捕获一个前面提供的子模式。</p>
<p>　　如果在表示条件的圆括号里的内容是一个数字，它表示当此数字代表的子模式被成功匹配时条件为真。看看下面这个例子，/( \( )? [^()]+ (?(1) \) )/x，(注意&ldquo;x&rdquo;模式修正符表示忽略字符类外的空白字符和#符号之后的内容)。</p>
<p>　　这个模式的第一部分&ldquo;( \( )?&rdquo;匹配了一个可选的左图括号&ldquo;(&rdquo;，第二部分&ldquo;[^()]+&rdquo;匹配了一个以上的非圆括号字符，最后一部分&ldquo;(?(1) \) )&rdquo;是个条件子模式，表示如果捕获到\1也即那个可选的左圆括号，第三部分应该会出现一个右圆括号&ldquo;)&rdquo;。</p>
<p>　　如果在表示条件的圆括号内是一个&ldquo;R&rdquo;字符，表示在这个模式或子模式被递归调用时条件为真，在递归调用的顶层，这个条件为假。关于正则表达式中的递归，我们会在后面的部分专题介绍。</p>
<p>　　如果条件不是一个数字或R字符，则它必需是一个断言。断言可以是肯定或否定的前身或后向断言。让我们看下面这个例子。</p>
<p>　　/(?(?=[^a-z]*[a-z])</p>
<p>　　\d{2}-[a-z]{3}-\d{2} | \d{2}-\d{2}-\d{2} )/x</p>
<p>　　为了让这个正则表达式更容易阅读，我们特意采用了x模式修正符，这样我们可以在用模式中加入空格对符式进行格式上的分隔并分行表示而不影响模式的解析。</p>
<p>　　第一行的条件子模式使用了一个肯定的前向断言，表示一串可选的非小写字母后面跟随着一个小写字母。换句话说，它查看目标字符串是否至少包含一个小写字母，如果是，它用&ldquo;|&rdquo;前的模式对目标进行匹配，看目标是否为看目标是否为两个数字-三个小写字母-两个数字这种格式，否则，用&ldquo;|&rdquo;来匹配目标，看目标字符串是否为由&ldquo;-&rdquo;分隔的三段二位十进制数字。</p>
<p>　　<strong>正则表达式中的注释</strong></p>
<p>　　为了让正则表达式更容易阅读，可以在其中加入注释语句。通常注释由左圆括号和井号&mdash;&mdash;&ldquo;(#&ldquo;开始，当遇到下一个右圆括号&rdquo;)&ldquo;结束。注释是禁止嵌套的。</p>
<p>　　如果设定了&ldquo;x&rdquo;模式修正符，任何字符类之外(也即[]之外)的井号(#)和下一个新行标记之间的部分也被作为注释看待。</p></div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>59</wp:post_id>
		<wp:post_date><![CDATA[2007-08-14 10:58:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-08-14 10:58:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f%e5%bf%ab%e9%80%9f%e5%85%a5%e9%97%a8%e4%b8%89%e3%80%90httpwww-chinaz-comserverlinux041m0442007-html%e3%80%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>正则表达式快速入门二【http://www.chinaz.com/Server/Linux/041M0442007.html】</title>
		<link>http://blog.00rz.com/2007/08/%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f%e5%bf%ab%e9%80%9f%e5%85%a5%e9%97%a8%e4%ba%8c%e3%80%90httpwww-chinaz-comserverlinux041m0442007-html%e3%80%91.html</link>
		<pubDate>Tue, 14 Aug 2007 10:56:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=60</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p> </p>
<p>　　在<a target="_blank" href="http://biz.chinabyte.com/58/2215558.shtml?42">上篇文章</a>里，我们介绍了正则表达式的模式修正符与元字符，细心的读者也许会发现，这部分介绍的非常简略，而且很少有实际的例子的讲解。这主要是因为网上现有的正则表达式资料都对这部分都有详细的介绍和众多的例子，如果觉得对前一部分缺乏了解可以参看这些资料。本文希望可以尽可能多涉及一些较高级的正则表达式特性。</p>
<p>　　在本文里，我们主要介绍子模式(subpatterns)，逆向引用(Back references)和量词(quantifiers)，其中重点介绍对这些概念的一些扩展应用，例如子模式中的非捕获子模式，量词匹配时的greedy与ungreedy。</p>
<p>　　<strong>子模式(subpatterns)与逆向引用(Back references)</strong></p>
<p>　　正则表达式可以包含多个字模式，子模式由圆括号定界，可以嵌套。这也是两个元字符&ldquo;(&rdquo;和&ldquo;)&rdquo;的作用。子模式可以有以下作用:</p>
<p>　　1. 将多选一的分支局部化。</p>
<p>　　例如，模式: cat(aract|erpillar|)匹配了 "cat"，"cataract" 或 "caterpillar" 之一，没有圆括号的话将匹配 "cataract"，"erpillar" 或空字符串。</p>
<p>　　2. 将子模式设定为捕获子模式(例如上面这个例子)。当整个模式匹配时，目标字符串中匹配了子模式的部分可以通过逆向引用进行调用。左圆括号从左到右计数(从 1 开始)以取得捕获子模式的数。</p>
<p>　　注意，子模式是可以嵌套的，例如，如果将字符串 "the red king" 来和模式 /the ((red|white) (king|queen))/进行匹配，捕获的子串为 "red king"，"red" 以及 "king"，并被计为 1，2 和 3 ，可以通过&ldquo;\1&rdquo;，&ldquo;\2&rdquo;，&ldquo;\3&rdquo;来分别引用它们，&ldquo;\1&rdquo;包含了&ldquo;\2&rdquo;和&ldquo;\3&rdquo;，它们的序号是由左括号的顺序决定的。</p>
<p>　　在一些老的linux/unux工具里，子模式使用的圆括号需要用反斜线转义，向这种\(subpattern\)，但现代的工具已经不需要了，本文中使用的例子都不进行转义</p>
<p>非捕获子模式(non-capturing subpatterns)</p>
<p>　　用一对括号同时完成上面提到的子模式的两个功能有时会出现一些问题，例如，由于逆向引用的数目是有限的(通常最大不超过9)，而且经常会遇到无需捕获的子模式定义。这时，可以在开始的括号后加上问号和冒号来表示这个子模式无需捕获，就向下面这样:((?:red|white) (king|queen))。</p>
<p>　　如果将&ldquo;the white queen&rdquo;作为模式匹配的目标字符串，则捕获的字串有&ldquo;white queen&rdquo;和&ldquo;queen&rdquo;，分别作为&ldquo;\1&rdquo;和&ldquo;\2&rdquo;，white虽然符合子模式&ldquo;(?:red|white)&rdquo;，但并不被捕获。</p>
<p>　　我们前面已经介绍过用括号与问号表示模式修正符的方法，为方便起见，如果需要在非捕获子模式中插入模式修正符，可以把它直接放在问号和冒号之间，例如，下面两个模式是等效的。</p>
<p>　　/(?i:saturday|sunday)/和/(?:(?i)saturday|sunday)/。</p>
<p>　　逆向引用(Back references)</p>
<p>　　前面介绍反斜线作用时，已经提到它的一个作用就是表示逆向引用，当字符类之外的反斜线后跟一个大于0的十进制数时，它很有可能是一个逆向引用。它的含义正如它的名称如言，它表示对它出现之前已经捕获的子模式的引用。这个数字代表了它引用的左括号在模式中出现的次序，我们在介绍子模式时已经看到过逆向引用的一个例子，那里的过&ldquo;\1&rdquo;，&ldquo;\2&rdquo;，&ldquo;\3&rdquo;分别表示所捕获的第一，第二，和第三个小括号定义的子模式的内容。</p>
<p>　　值得注意的是，当反斜线后的数字小于10时，可以确定此为一个逆向引用，这样，这个逆向引用就可以出现在之前有相应数目的左圆括号被捕获前而不会出现混淆，只有整个模式能提供那么多的捕获子模式，就不会报错。说起来似乎很混乱，还是让我们来看下面这个例子。把介绍子模子时举的例子拿来修改一下，前面讲过字符串 "the red king" 来和模式 /the ((red|white) (king|queen))/匹配，捕获的子串为 "red king"，"red" 以及 "king"，并被计为 1，2 和 3 ，现在把字符串，修改为" king，the red king"，模式改为/\3,the ((red|white) (king|queen))/，这个模式应该也是可以匹配的。不过，并非所有的正则表达式工具都支持这种用法，安全的做法是在相应序号的左括号之后使用与之相关的逆向引用。</p>
<p>　　需要注意的另一点是逆向引用的值是在目标字符串中实际捕获的符合子模式的字符串片段而非该子模式本本身。例如/ (sens|respons)e and \1ibility/会匹配&ldquo;sense and sensibility&rdquo; 和 &ldquo;response and responsibility&rdquo;，但不会是 "sense and responsibility"。当被逆向引用的子模式后面有量词从而被重复匹配了多次，逆向引用的值会以最后一次匹配的值为准。例如/([abc]){3}/匹配字符串&ldquo;abc&rdquo;时，逆向引用&ldquo;\1&rdquo;的值将是最后一次匹配的结果&ldquo;c&rdquo;。</p>
<p>　　命名子模式(named subpattern)</p>
<p>　　一些工具(例如Python)可以为逆向引用命名，从而定义出命名子模式。在Python中对正则表达式的使用是以函数或方法调用的格式，语法与这里举的例子有较大差别。有兴趣的朋友可以参看一下自己使用的工具来看看是否支持命名子模式。</p>
<p>　　</p>
<p><strong>重复(Repetition)和量词(quantifiers)</strong></p>
<p>　　在前面介绍逆向引用的部分里我们已经接触到了量词(quantifiers)的概念，例如前面的例子/([abc]){3}/表示三个连续的字符，每个字符都必然是 &ldquo;abc&rdquo;这三个字符中的一个。在这个模式里，{3}就属于量词。它表示一个模式需要重复匹配(repetition)的数目。</p>
<p>　　量词可以放在下面这些项目之后:</p>
<p>　　&#61548;●单个字符(有可能是被转义的单个字符，如\xhh)</p>
<p>　　&#61548;●&ldquo;.&rdquo;元字符</p>
<p>　　&#61548;● 由方括号表示的字符类</p>
<p>　　&#61548;● 逆向引用</p>
<p>　　&#61548;●由小括号定义的子模式(除非它是个断言，我们会在以后介绍)</p>
<p>　　最通用的量词使用形式是用花括号括起的两个由逗号分隔的数字，如这样的格式{min,max}，例如，/z{2,4}/ 可以匹配 "zz", "zzz", 或者 "zzzz"，花括号中的最大值以及前面的逗号可以省略，例如/\d{3,}/可以匹配三个以上的数字，数字的数目没有上限，而/\d{3}/(注意，没有逗号)则精确的匹配3个数字。当花括号出现在不允许量词的位置或者语法与前面提到的不符时，这里它仅仅代表花括号字符本身而不再具有特殊的含义。例如{,6}不是量词，它仅仅代表这四个字符本身的含义。</p>
<p>　　为了方便，三个最常用的量词有它们的单字符缩写形式，它们的的含义如下表:</p>
<p>
<table cellspacing="0" cellpadding="0" align="center" border="1">
    <tbody>
        <tr>
            <td>
            <div>*</div>
            </td>
            <td>
            <div>相当于 {0,}</div>
            </td>
        </tr>
        <tr>
            <td>
            <div>+</div>
            </td>
            <td>
            <div>相当于 {1,}</div>
            </td>
        </tr>
        <tr>
            <td>
            <div>?</div>
            </td>
            <td>
            <div>相当于 {0,1}</div>
            </td>
        </tr>
    </tbody>
</table>
</p>
<p>　　这也是以上三个元字符做为量词使用含义。</p>
<p>　　在使用量词特别是没有上限限制的量词时，应该特别注意不要构成无限循环，例如/(a?)*/，在有的正则表达式工具里。这会形成一个编译错，不过有的工具却允许这种结构，但不能保证各种工具都可以很好的处理这种结构量词匹配的&ldquo;greedy&rdquo;与&ldquo;ungreedy&rdquo;</p>
<p>　　在使用带量词的模式时，我们常会发现对同一模式而言，同一个目标字符串可以有多种匹配方式。例如/\d{0,1}\d/，可以匹配两个或三个十进制数字，如果目标字符串是123，当量词取下限0里，它匹配&ldquo;12&rdquo;，当量词取上限1里，它匹配&ldquo;123&rdquo;整个字符。这两种匹配结果都是正确的，如果我们取它的子模式/(\d{0,1}\d)/，则匹配的结果\1到底是&ldquo;12&rdquo;还是&ldquo;123&rdquo;?</p>
<p>　　实际的运行结果一般会是后者，因为默认情况下，大多数正则表达式工具的匹配是按&ldquo;greedy&rdquo;原则匹配的。&ldquo;greedy&rdquo;单词的中的含义是&ldquo;贪吃的, 贪婪的&rdquo;的意思，它的行为也如此单词的含义，所谓greedy匹配意指在量词限制范围内，只要能保持后续模式的匹配，匹配总是尽可能的重复下去，直到不匹配的情况发生为止。为便于理解，我们看下面这个简单的例子。</p>
<p>　　/(\d{1,5})\d/匹配&ldquo;12345&rdquo;这个字符串，这个模式表示在1到5个数字后面跟上一个数字，量词范围从1到5，当它的值在1-4时，整个模式都是匹配的，\1的值可以是&ldquo;1&rdquo;，&ldquo;12&rdquo;，&ldquo;123&rdquo;，&ldquo;1234&rdquo;，而在greedy匹配的情况下，它取匹配时的量词最大值，因此最终匹配的结果是&rdquo;1234&rdquo;。</p>
<p>　　在大多数情况下，这就是我们想要的结果，但情况并不总这样。例如，我们希望用下面这个模式提取出c语言的注释部分(在c语言中，注释语句放在字符串/*和*/之间)。我们使用的正则表达式是/\*.*\*/，但匹配的结果却完全和需要的不同。当正则表达式解析到&ldquo;/\*&rdquo;这后的&ldquo;.*&rdquo;时，因为&ldquo;.&rdquo;可以代表任意字符，这也包含了其后需要匹配的&ldquo;*/&rdquo;，在量词的作用下，这个匹配将一直进行下去，超过下一个&ldquo;*&rdquo;/直到文本的结束，这显然不是我们需要的结果。</p>
<p>　　为了完成如上例我们想要的那种匹配，正则表达式引入了ungreedy匹配方法，与greedy匹配相反，在满足整个模式匹配的前提下，它总是取最小的量词数目结果。Ungreedy匹配用在量词后面加上问号&ldquo;?&rdquo;来表示。例如在匹配C语言的注释时，我们把正则表达式写成如下形式:/\*.*?\*/，在量词&ldquo;*&rdquo;后加上问号就可以达成想要的结果。还有前面那个例子用/(\d{1,5})\d/匹配&ldquo;12345&rdquo;这个字符串，如果改写为ungreedy模式向这样/(\d{1,5}?)\d/，、\1的值将为1。</p>
<p>　　上面的解释也许有些不准确，量词后的问号的作用实际上是反转当前的正则表达式的greedy与ungreedy行为。你可以通过模式修正符&ldquo;U&rdquo;将正则表达式设成ungreedy模式然后在模式中通过量词后的问号将之反转为greedy。</p>
<p>　　一次性子模式(Once-only subpatterns)</p>
<p>　　关于量词的另一个有趣的话题是一次性子模式(Once-only subpatterns)。要理解它的概念需要先了解一下含有量词的正则表达式的匹配过程。我们这里举个例子。</p>
<p>　　现在，让我们用模式/\d+foo/来匹配字符串&ldquo;123456bar&rdquo;，当然，它的结果是没有匹配。但正则表达式引擎是如何工作的呢?它先分析前面的\d+，这代表一个以上的数字，然后检查目标字符串的对应位置的第一个字符&ldquo;1&rdquo;，符合模式，然后根据量词重复这个模式对字符串进行匹配直到&ldquo;123456&rdquo;始终符合&ldquo;\d+&rdquo;模式，接着它在目标字符串中遇到字符&ldquo;b&rdquo;无法与&ldquo;\d+&rdquo;匹配，于是查看&ldquo;\d+&rdquo;的后续模式&ldquo;foo&rdquo;，与目标字符串的后续部分&ldquo;bar&rdquo;无法匹配，这时，有趣的事情出现了，解释引擎会对前面已经解析过的&ldquo;\d+&rdquo;模式进行回溯，将量词数目减少一，看剩余部分能否匹配，此时&ldquo;\d+&rdquo;的值改为&ldquo;12345&rdquo;，然后解释引擎看目标字符串剩余的部分&ldquo;6bar&rdquo;能否与剩余的模式&ldquo;foo&rdquo;相匹配，如果不行，就把量词数再减一，直到达到最小的量词限制，如果仍无法匹配，则表明目标字符串无法匹配，返回无法匹配的结果。</p>
<p>　　现在，我们就可以来接触一次性子模式了。所谓一次性子模式就是定义在正则表达式解析时不需要上述回溯过程的子模式。它用左圆括号后面的问号和小于号来表示，向这样(?>)。如果将上面提到的例子改为一次性子模式，可以这样书写:</p>
<p>　　/(?>\d)+foo/，这时，当解析器遇到后面不匹配的bar时，会立即返回不匹配的结果，而不会进行前面提到的回溯过程。</p>
<p>　　需要了解的是，一次性子模式属于非捕获子模式，它的匹配结果不能被逆向引用。</p>
<p>　　当一个没有设定重复上限的子模式中包含了同样没有设定重复上限的模式时，使用一次性子模式是唯一可以避免让你的程序陷入长时间等待的方法。例如你用&ldquo;/(\D+|<\d+>)*[!?]/&rdquo;这个模式去匹配一长串的a字符，向这样&ldquo;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&rdquo;，在返回最终无匹配的结果前，你会等待很长的一段时间。这个模式表示一串非数字字符或者用尖括号括着的一串数字后跟随着叹号或者问号，把这段字符串分成两个重复的部分会有很多种分法，而无论是子模式本身还是子模式之内的量词的各可能值都要经过逐一测试，这将使最终的运算量达到一个很大的程度。这样，你将在电脑前等待相当长的时间才会看到结果。而如果用一次性子模式来改写刚才的模式，改成这样/ ((?>\D+)|<\d+>)*[!?]/，你就可以很快得到运算的结果。</p></div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>60</wp:post_id>
		<wp:post_date><![CDATA[2007-08-14 10:56:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-08-14 10:56:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f%e5%bf%ab%e9%80%9f%e5%85%a5%e9%97%a8%e4%ba%8c%e3%80%90httpwww-chinaz-comserverlinux041m0442007-html%e3%80%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641004]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>正则表达式快速入门一【http://www.chinaz.com/Server/Linux/041M0442007.html】</title>
		<link>http://blog.00rz.com/2007/08/%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f%e5%bf%ab%e9%80%9f%e5%85%a5%e9%97%a8%e4%b8%80%e3%80%90httpwww-chinaz-comserverlinux041m0442007-html%e3%80%91.html</link>
		<pubDate>Tue, 14 Aug 2007 10:50:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=61</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  >正则表达式广泛出现在UNIX/Linux相关的各种领域和多种编程语言里。从常见的shell命令到大名鼎鼎的Perl语言再到当前非常流行的PHP，它都扮演着一个重要的角色。甚至windows的命令行控制台也支持正则表达式。如果你是一个Linux服务器管理员，你经常会在一些服务器的设置脚本里看到它。 <span class="Qqy127">Chinaz.com</span>
<p>　　可以说，它是学好Linux/UNIX必需掌握的一个知识点，否则你连Linux的启动脚本都读不懂。偏偏它又的确有点晦涩难懂，而且相关的资料又大部分是英文，更为它的学习增加了几多困难。即使有些中文的翻译资料，不同的译者对一些术语的译法也五花八门，读着让人平添困惑。为此，我决定为它写一个简明教程，尽量可以覆盖正则表达式涉及到的各主要概念。</p>
<div class="Qqy127">[中国站长站]</div>
<p> </p>
<p>　　我并不想把本文写成一本详细的正则表达式语法手册，事实上，这些手册已经存在了，不过读起来比较难懂。我希望的是在完成本教程后，你可以比较轻松的读懂各种工具的正则表达式语法手册并可以迅速上手，不过要用好正则表达式，可不是一篇短短的教程可以解决的，那是无数实践练习的结果。但是，本文的最后一部分对于正则表达式的编写提出了一些原则性的建议，学习一下这些正则表达式应用先驱者的经验会让我们在今后的实践中少走一些弯路。</p>
<div class="Qqy127">Chinaz.com</div>
<p> </p>
<p>　　正则表达式是英文&ldquo;regular expressions&rdquo;的译文，它的产生据说可以追溯到&ldquo;神经网络&rdquo;等比较高深的理论。那么什么是正则表达式呢? <span class="Qqy127">Chinaz.com</span></p>
<p>　　正则表达式是从左向右去匹配目标字符串的一组模式。大多数字符在模式中表示它们自身并匹配目标中相应的字符。举个最简单的例子，模式&ldquo;The quick brown fox&rdquo;匹配了目标字符串中与其完全相同的一部分。 <font color="#f5fafe">[中国站长站]</font></p>
<p>　　前面已经提过，正则表达式被许多植根于UNIX/Linux的工具采用，可是这些工具的正则表达式语法并不完全相同，它们中的一些对正则表达式语法的扩展并不被其它工具识别，这也为正则表达式的使用增加了难度。因此，当你在一个具体的环境中使用正则表达式时，你还要先看一下目标环境支持的语法范围，以确保你的正则表达式被正确的解析。 <font color="#f5fafe">[中国站长站]</font></p>
<p>　　在本文中列举的例子里，我们用正斜线&ldquo;/&rdquo;做为模式的定界符(delimiter)，一个模式用下面这种格式表示:</p>
<p class="Qqy127">[中国站长站]</p>
<p> </p>
<p>/[A-Z]+(abc|xyz)*/i</p>
<p class="Qqy127">[中国站长站]</p>
<p> </p>
<p>　　本文将较详细的阐明下面这些正则表达式概念：模式修正符（modifier），元字符（Meta-characters），子模式（subpatterns）与逆向引用（Back references），重复（Repetition）和量词（quantifiers），断言（Assertions），注释，正则表达式中的递归，最后我介绍一款方便学习正则表达式的工具并介绍一些正则表达式编写的思路。</p>
<div class="Qqy127">Chinaz.com</div>
<p> </p>
<p>　　<strong>正则表达式的模式修正符(modifier)</strong></p>
<p class="Qqy127">Chinaz.com</p>
<p> </p>
<p>　　正则表达式的模式修正符主要用来限定模式与目标字符串的匹配方式，例如是否需要大小写敏感的匹配，是单行模式还是多行模式。修正符中的空格和换行被忽略，其它字符会导致错误。下面列举一些常见的模式修正符。注意，模式修正符是区分大小写的。 <font color="#f5fafe">Chinaz.com</font></p>
<p>　　i:非大小写敏感模式，:如果设定此修正符，模式中的字符将同时匹配大小写字母。 <font color="#f5fafe">[中国站长站]</font></p>
<p>　　m:多行模式，当设定了此修正符，&ldquo;行起始&rdquo;和&ldquo;行结束&rdquo;除了匹配整个字符串开头和结束外，还分别匹配其中的换行符的之后和之前。 <span class="Qqy127">Chinaz.com</span></p>
<p>　　s:单行模式，如果设定了此修正符，模式中的圆点元字符(.)匹配所有的字符，包括换行符。没有此设定的话，则不包括换行符。 <font color="#f5fafe">[中国站长站]</font></p>
<p>　　对于多行模式和单行模式，一个容易让初学者迷惑的地方是这两者并不向字面上那样是互斥的。事实上，它们只是分别定义了英文句点(.)、音调符(^)和美元符($)这三个元字符的匹配方式，因此，单行模式与多行模式的修正符可以同时使用。 <span class="Qqy127">Chinaz.com</span></p>
<p>　　x:如果设定了此修正符，模式中的空白字符除了被转义的或在字符类中的以外完全被忽略，在未转义的字符类之外的 # 以及下一个换行符之间的所有字符，包括两头，也都被忽略。它使得可以在复杂的模式中加入注释。我们会在后面的部分更详细的讲解正则表达中的注释。 <span class="Qqy127">[中国站长站]</span></p>
<p>　　模式修正符还有很多，这里不再一一列举。我们会结合后面的内容介绍一些其它的模式修正符。不同的工具也可以添加自己的模式修正符，不过上面几最为常见。</p>
<div class="Qqy127">[中国站长站]</div>
<p> </p>
<p>　　模式修正符通常跟在模式定义结束符的后面，例如下面例子中模式最后的&ldquo;i&rdquo;字符。/[A-Z]+(abc|xyz)*/i，这时此修正符会对整个匹配模式起作用。模式修正符也可以在模式内部通过包含在 "(?" 和 ")" 之间的修正符字母序列来实现。例如，(?im) 设定了不区分大小写，多行模式。也可以通过在字母前加上减号来取消这些选项。例如组合的选项 (?im-s)，设定了不区分大小写和多行模式，并取消了单行模式。如果一个字母在减号之前与之后都出现了，则该选项被取消设定。 <span class="Qqy127">Chinaz.com</span></p>
<p>　　注意，如果(?im-s)出现在一个子模式内(被另一对小括号包含)会把模式修正符的作用局限在该子模式中。</p>
<div class="Qqy127">Chinaz.com</div>
<p> </p>
<p>　　<strong>正则表达式的元字符（Meta-characters）</strong> <font color="#f5fafe">Chinaz.com</font></p>
<p>　　正则表达式的威力在于其能够在模式中包含选择和循环。它们通过使用元字符来编码在模式中，元字符不代表其自身，它们用一些特殊的方式来解析。</p>
<div class="Qqy127">Chinaz.com</div>
<p> </p>
<p>　　有两组不同的元字符:一种是模式中除了方括号内都能被识别的，还有一种是在方括号内被识别的。如果想在模式里包含一个元字符本身，就需要用到转义符号，正则表达式常用反斜线&ldquo;\&rdquo;作为转义字符使用，为了匹配&ldquo;\&rdquo;本身，你需要输入两个&ldquo;\&rdquo;，向这样&ldquo;\\&rdquo;。当然，这个符号本身也是一个元字符。</p>
<div class="Qqy127">Chinaz.com</div>
<p> </p>
<p>　　方括号之外的元字符有这些:</p>
<div class="Qqy127">[中国站长站]</div>
<p> </p>
<p>　　\ <span class="Qqy127">[中国站长站]</span></p>
<p>　　有数种用途的通用转义符</p>
<div class="Qqy127">Chinaz.com</div>
<p> </p>
<p>　　^ <font color="#f5fafe">Chinaz.com</font></p>
<p>　　断言目标的开头(或在多行模式下行的开头，即紧随一换行符之后) <font color="#f5fafe">Chinaz.com</font></p>
<p>　　$ <span class="Qqy127">[中国站长站]</span></p>
<p>　　断言目标的结尾(或在多行模式下行的结尾，即紧随一换行符之前) <font color="#f5fafe">[中国站长站]</font></p>
<p>　　.</p>
<div class="Qqy127">[中国站长站]</div>
<p> </p>
<p>　　匹配除了换行符外的任意一个字符(默认情况下)</p>
<div class="Qqy127">Chinaz.com</div>
<p> </p>
<p>　　[ <font color="#f5fafe">Chinaz.com</font></p>
<p>　　字符类定义开始 <font color="#f5fafe">[中国站长站]</font></p>
<p>　　]</p>
<div class="Qqy127">Chinaz.com</div>
<p> </p>
<p>　　字符类定义结束</p>
<p class="Qqy127">[中国站长站]</p>
<p> </p>
<p>　　| <font color="#f5fafe">[中国站长站]</font></p>
<p>　　开始一个多选一的分支</p>
<div class="Qqy127">[中国站长站]</div>
<p> </p>
<p>　　(</p>
<p class="Qqy127">[中国站长站]</p>
<p> </p>
<p>　　子模式开始</p>
<p class="Qqy127">[中国站长站]</p>
<p> </p>
<p>　　)</p>
<p class="Qqy127">[中国站长站]</p>
<p> </p>
<p>　　子模式结束 <span class="Qqy127">[中国站长站]</span></p>
<p>　　? <font color="#f5fafe">Chinaz.com</font></p>
<p>　　扩展 ( 的含义，我们已经在介绍模式修正符里看到过它的使用。它也可以是 0 或 1 数量限定符，以及数量限定符最小值</p>
<div class="Qqy127">[中国站长站]</div>
<p> </p>
<p>　　* <span class="Qqy127">[中国站长站]</span></p>
<p>　　匹配 0 个或多个的数量限定符 <font color="#f5fafe">Chinaz.com</font></p>
<p>　　+</p>
<p class="Qqy127">[中国站长站]</p>
<p> </p>
<p>　　匹配 1 个或多个的数量限定符</p>
<div class="Qqy127">Chinaz.com</div>
<p> </p>
<p>　　{ <font color="#f5fafe">Chinaz.com</font></p>
<p>　　最少/最多数量限定开始 <font color="#f5fafe">Chinaz.com</font></p>
<p>　　}</p>
<p class="Qqy127">Chinaz.com</p>
<p> </p>
<p>　　最少/最多数量限定结束 <font color="#f5fafe">Chinaz.com</font></p>
<p>　　模式中方括号内的部分称为&ldquo;字符类&rdquo;。字符类中可用的元字符为: <span class="Qqy127">[中国站长站]</span></p>
<p>　　\</p>
<p class="Qqy127">[中国站长站]</p>
<p> </p>
<p>　　通用转义字符 <font color="#f5fafe">Chinaz.com</font></p>
<p>　　^</p>
<p class="Qqy127">[中国站长站]</p>
<p> </p>
<p>　　排除字符类，但仅当其为第一个字符时有效</p>
<p class="Qqy127">[中国站长站]</p>
<p> </p>
<p>　　- <font color="#f5fafe">Chinaz.com</font></p>
<p>　　指出字符范围</p>
<p class="Qqy127">[中国站长站]</p>
<p> </p>
<p>　　在这里，最值得一提是&ldquo;\&rdquo;这个元字符。之所以重点对它进行讲解是因为这一个元字符有多种不同的用法，在不同情况下代表不同的含义，而且使用频率非常高，是个很容易让人迷惑的地方。</p>
<p class="Qqy127">[中国站长站]</p>
<p> </p>
<p>　　第一种用法前面我们已经提过，是作为通用转义字符使用，如果其后跟着一个非字母数字字符，则取消该字符可能具有的任何特殊含义。此种将反斜线用作转义字符的用法适用于无论是字符类之中还是之外。例如&ldquo;\\&rdquo;代表一个单独的反斜线&ldquo;\&rdquo;。 <font color="#f5fafe">Chinaz.com</font></p>
<p>　　第二种用途提供了一种在模式中以可见方式去编码不可打印字符的方法。模式中完全可以包括不可打印字符，除了代表模式结束的二进制零，例如，可以用&ldquo;\a&rdquo;代表alarm，即 BEL 字符(0x07)，或用&ldquo;\cx&rdquo;代表"control-x"，其中 x 是任意字符。当然，这种方法表示的不一定非得是不可打印字符，实际上，可以用&ldquo;\xhh(十六进制代码为 hh 的字符)&rdquo;和&ldquo;\ddd(八进制代码为 ddd 的字符)&rdquo;来以编码的形式表达任何单字节字符，例如&ldquo;\040&rdquo;可以用来表示空格。 <span class="Qqy127">[中国站长站]</span></p>
<p>　　反斜线的第三个用法是指定通用字符类型，这些字符类型序列可以出现在字符类之中和之外。每一个匹配相应类型中的一个字符。如果当前匹配点在目标字符串的结尾，以上所有匹配都失败，因为没有字符可供匹配。有以下这些常见的通用字符类:</p>
<p class="Qqy127">[中国站长站]</p>
<p> </p>
<p>　　\d 任一十进制数字 <font color="#f5fafe">[中国站长站]</font></p>
<p>　　\D任一非十进制数的字符</p>
<div class="Qqy127">[中国站长站]</div>
<p> </p>
<p>　　\s任一空白字符 <span class="Qqy127">[中国站长站]</span></p>
<p>　　\S任一非空白字符 <span class="Qqy127">[中国站长站]</span></p>
<p>　　\w任一&ldquo;字&rdquo;的字符 <font color="#f5fafe">Chinaz.com</font></p>
<p>　　\W任一&ldquo;非字&rdquo;的字符</p>
<p class="Qqy127">[中国站长站]</p>
<p> </p>
<p>　　反斜线的第四个用法是某些简单的断言，关于断言的讨论我们放在后面，这里先不加讨论。 <font color="#f5fafe">[中国站长站]</font></p>
<p>　　反斜线的最后一个用法是逆向引用。关于逆向引用，我们会在后面讨论逆向引用的部分来做进一步的讨论。 <font color="#f5fafe">Chinaz.com</font></p>
<p>　　我们已经看到，反斜线的众多用法，其中一些涉及到了以后才讲的内容。我们在模式中遇到反斜线时一定要注意它具体是哪一种用途以免疑惑。 <span class="Qqy127">[中国站长站]</span></p>
<p>　　另外两个方括号也是非常重要的元字符，左方括号开始了一个字符类，右方括号结束之。单独一个右方括号不是特殊字符。字符类匹配目标中的一个字符，该字符必须是字符类定义的字符集中的一个;除非字符类中的第一个字符是音调符(^)，此情况下目标字符必须不在字符类定义的字符集中。如果在字符类中需要音调符本身，则其必须不是第一个字符，或用反斜线转义。例如，[^A-Z]表式非大写字符。</p>
<div class="Qqy127">Chinaz.com</div>
<p> </p>
<p>　　其它元字符我们会在以后的文章中结合相关内容介绍</p></div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>61</wp:post_id>
		<wp:post_date><![CDATA[2007-08-14 10:50:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-08-14 10:50:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f%e5%bf%ab%e9%80%9f%e5%85%a5%e9%97%a8%e4%b8%80%e3%80%90httpwww-chinaz-comserverlinux041m0442007-html%e3%80%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641003]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>fckeditor中文配置手册详细说明 [http://blog.csdn.net/hnwanghb/archive/2007/04/24/1581163.aspx]</title>
		<link>http://blog.00rz.com/2007/08/fckeditor%e4%b8%ad%e6%96%87%e9%85%8d%e7%bd%ae%e6%89%8b%e5%86%8c%e8%af%a6%e7%bb%86%e8%af%b4%e6%98%8e-httpblog-csdn-nethnwanghbarchive200704241581163-aspx.html</link>
		<pubDate>Mon, 13 Aug 2007 19:01:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=62</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><div class="postText">
<div class="content">【摘要】<br />
性能<br />
<br />
首先,FCKEDITOR的性能是非常好的,用户只需很少的时间就可以载入FCKEDITOR所需文件.对于其他在线编辑器来说,这几乎是个很难解决的难题,因为在开启编辑器时需要装载太多的文件.比如CUTEEDITOR,虽然功能比FCKEDITOR还要强大,可是,它本身也够庞大了,至于FREETEXTBOX等,其易用性与FCKEDITOR相比,尚有差距,可以说,FCKEDITOR是一个别具匠心的在线编辑器,它里面融入了作者高深的面向对象的JAVASCRIPT功力,集易用性与强大的功能与一体.<br />
【全文】<br />
<p>性能<br />
<br />
首先,FCKEDITOR的性能是非常好的,用户只需很少的时间就可以载入FCKEDITOR所需文件.对于其他在线编辑器来说,这几乎是个很难解决的难题,因为在开启编辑器时需要装载太多的文件.比如CUTEEDITOR,虽然功能比FCKEDITOR还要强大,可是,它本身也够庞大了,至于FREETEXTBOX等,其易用性与FCKEDITOR相比,尚有差距,可以说,FCKEDITOR是一个别具匠心的在线编辑器,它里面融入了作者高深的面向对象的JAVASCRIPT功力,集易用性与强大的功能与一体.<br />
<br />
.与编辑器相关的所有图像,脚本以及调用页<br />
.语言文件<br />
.编辑器的皮肤文件<br />
.工具样的贴图等<br />
<br />
这些将导致在服务器和客户端间产生相当的流量.如果有许多文件被调用,那么即便每个文件很小.也会让用户等得不耐烦.<br />
<br />
在2.0版中,开发人员有两种方法来解决这个问题.<br />
那就是指定装载顺序和脚本压缩<br />
<br />
装载顺序<br />
从2.0版开始,编辑器按以下步骤装载资源:<br />
.基本页(就是编辑器所在页)以及装入编辑器的JS脚本<br />
.用来建立编辑器的脚本<br />
.编辑器的语言和皮肤.<br />
.建立编辑器.<br />
.载入预置的编辑文档内容.<br />
.从现在开始,用户可以阅读和编辑文档了,不过,拖拽支持以及工具栏都是不可用的<br />
.载入编辑器引擎脚本<br />
.建立工具栏,并且可用<br />
.从现在开始,编辑器的所有功能都已经完整<br />
.载入工具栏图标<br />
<br />
脚本压缩<br />
<br />
在打包任何新版本时,编辑器的JS脚本将会进行预处理.预处理步骤如下:<br />
.移除所有代码注释<br />
.移除所有无用的空白字符.<br />
.将脚本合并成几个文件<br />
<br />
使用上面的方法,我们可以将脚本文件的大小压缩到原来的50%.<br />
压缩后,原始的代码仍然存在于一个名为_Source的文件夹中<br />
<br />
如何打包?<br />
编辑器已经自带了打包程序,它位于FCKEDITOR的根文件夹中_PACKAGER文件夹中,名为Fckeditor.Packager.exe,将其复制到FCKEDITOR根文件夹中并运行,即可自动将JS脚本打包并压缩<br />
需要注意的是该程序是一个.NET程序,必须安装.NET FRAMEWORK才能使用<br />
<br />
想要获取支持?<br />
如果你捐赠15000欧元,你就可以获得1年的免费技术支持(比较贵的说,相当于人民币15万,不过西欧的费用相当惊人)<br />
<br />
如何安装?<br />
<br />
1.下载最新版的FCKEDITOR<br />
2.解压缩到你的站点根文件夹中名为FCKEDITOR的文件夹中(名称必须为FCKEDITOR,因为配置文件中已经使用此名称来标示出FCKEDITOR的位置)<br />
3.现在,编辑器就可以使用了,如果想要查看演示,可以按下面方法访问:<br />
<a title="http://" target="_blank" href="http:///">http://</a><your-site>/FCKeditor/_samples/default.html<br />
<br />
注意:你可以将FCKEDITOR放置到任何文件夹,默认情况下,将其放入到FCKEDITOR文件夹是最为简单的方法.如果你放入的文件夹使用别的名称,请修改配置文件夹中编辑器BasePath参数,如下所示:<br />
oFckeditor.BasePath="/Components/fckeditor/";<br />
<br />
另外,FCKEDITOR文件夹中所有以下划线开头的文件夹及文件,都是可选的,可以安全的从你的发布中删除.它们并不是编辑器运行时必需的<br />
<br />
如何将FCKEDITOR整合进我的页面?<br />
<br />
由于目前的版本提供的FCKEDITOR仅提供了JAVASCRIPT式的整合,因此,这里仅讲述如何应用JAVASCRIPT来整合FCKEDITOR到站点中,当然,其他各种语言的整合,你可以参考_samples文件夹中的例子来完成<br />
1,假如编辑器已经安装在你的站点的/FCKEDITOR/文件夹下.那么,第一步我们需要做的就是在页面的HEAD段中放入SCRIPT标记以引入JAVASCRIPT整合模块.例如:<br />
<script type="text/javascript" src="/fckeditor/fckeditor.js"></script><br />
<br />
其中路径是可更改的<br />
<br />
2,现在,FCKEDITOR类已经可以使用了.有两个方法在页面中建立一个FCKEDITOR编辑器:<br />
方法1:内联方式(建议使用):在页面的FORM标记内需要插入编辑器的地方置入以下代码:<br />
script type="text/javascript"><br />
var oFCKeditor = new FCKeditor( 'FCKeditor1' ) ;<br />
oFCKeditor.Create() ;<br />
</script><br />
<br />
方法2:TEXTAREA标记替换法(不建议使用):在页面的ONLOAD事件中,添加以下代码以替换一个已经存在的TEXTAREA标记<br />
<br />
<html><br />
<head><br />
<script type="text/javascript"><br />
window.onload = function()<br />
{<br />
var oFCKeditor = new FCKeditor( 'MyTextarea' ) ;<br />
oFCKeditor.ReplaceTextarea() ;<br />
}<br />
</script><br />
</head><br />
<body><br />
<textarea id="MyTextarea" name="MyTextarea">This is <b>the</b> initial value.</textarea><br />
</body><br />
</html><br />
<br />
3.现在,编辑器可以使用了<br />
<br />
FCKEDITOR类参考:<br />
下面是用来在页面中建立编辑器的FCKEDITOR类的说明<br />
<br />
构造器:<br />
FCKeditor( instanceName[, width, height, toolbarSet, value] )<br />
instanceName:编辑器的唯一名称(相当于ID)<br />
WIDTH:宽度<br />
HEIGHT:高度<br />
toolbarSet:工具条集合的名称<br />
value:编辑器初始化内容<br />
<br />
属性:<br />
instanceName:编辑器实例名<br />
width:宽度,默认值为100%<br />
height:高度,默认值是200<br />
ToolbarSet:工具集名称,参考FCKCONFIG.JS,默认值是Default<br />
value:初始化编辑器的HTML代码,默认值为空<br />
BasePath:编辑器的基路径,默认为/Fckeditor/文件夹,注意,尽量不要使用相对路径.最好能用相对于站点根路径的表示方法,要以/结尾<br />
CheckBrowser:是否在显示编辑器前检查浏览器兼容性,默认为true<br />
DisplayErrors:是否显示提示错误,默为true;<br />
<br />
集合:<br />
Config[Key]=value;<br />
这个集合用于更改配置中某一项的值,如<br />
oFckeditor.Config["DefaultLanguage"]="pt-br";<br />
<br />
方法:<br />
Create()<br />
建立并输出编辑器<br />
<br />
RepaceTextArea(TextAreaName)<br />
用编辑器来替换对应的文本框<br />
<br />
如何配置FCKEDITOR?<br />
FCKEDITOR提供了一套用于定制其外观,特性及行为的设置集.主配置文件名为Fckconfig.js<br />
你既可以编辑主配置文件,也可以自己定义单独的配置文件.配置文件使用JAVASCRIPT语法.<br />
<br />
修改后,在建立编辑器时,可以使用以下语法:<br />
var oFCKeditor = new FCKeditor( 'FCKeditor1' ) ;<br />
oFCKeditor.Config['CustomConfigurationsPath'] = '/myconfig.js' ;<br />
oFCKeditor.Create() ;<br />
<br />
提醒:当你修改配置后,请清空浏览器缓存以查看效果<br />
<br />
配置选项:<br />
<br />
AutoDetectLanguage=true/false 自动检测语言<br />
BaseHref="" _fcksavedurl="""" 相对链接的基地址<br />
ContentLangDirection="ltr/rtl" 默认文字方向<br />
ContextMenu=字符串数组,右键菜单的内容<br />
CustomConfigurationsPath="" 自定义配置文件路径和名称<br />
Debug=true/false 是否开启调试功能,这样,当调用FCKDebug.Output()时,会在调试窗中输出内容<br />
DefaultLanguage="" 缺省语言<br />
EditorAreaCss="" 编辑区的样式表文件<br />
EnableSourceXHTML=true/false 为TRUE时,当由可视化界面切换到代码页时,把HTML处理成XHTML<br />
EnableXHTML=true/false 是否允许使用XHTML取代HTML<br />
FillEmptyBlocks=true/false 使用这个功能,可以将空的块级元素用空格来替代<br />
FontColors="" 设置显示颜色拾取器时文字颜色列表<br />
FontFormats="" 设置显示在文字格式列表中的命名<br />
FontNames="" 字体列表中的字体名<br />
FontSizes="" 字体大小中的字号列表<br />
ForcePasteAsPlainText=true/false 强制粘贴为纯文本<br />
ForceSimpleAmpersand=true/false 是否不把&符号转换为XML实体<br />
FormatIndentator="" 当在源码格式下缩进代码使用的字符<br />
FormatOutput=true/false 当输出内容时是否自动格式化代码<br />
FormatSource=true/false 在切换到代码视图时是否自动格式化代码<br />
FullPage=true/false 是否允许编辑整个HTML文件,还是仅允许编辑BODY间的内容<br />
GeckoUseSPAN=true/false 是否允许SPAN标记代替B,I,U标记<br />
IeSpellDownloadUrl=""下载拼写检查器的网址<br />
ImageBrowser=true/false 是否允许浏览服务器功能<br />
ImageBrowserURL="" 浏览服务器时运行的URL<br />
ImageBrowserWindowHeight="" 图像浏览器窗口高度<br />
ImageBrowserWindowWidth="" 图像浏览器窗口宽度<br />
LinkBrowser=true/false 是否允许在插入链接时浏览服务器<br />
LinkBrowserURL="" 插入链接时浏览服务器的URL<br />
LinkBrowserWindowHeight=""链接目标浏览器窗口高度<br />
LinkBrowserWindowWidth=""链接目标浏览器窗口宽度<br />
Plugins=object 注册插件<br />
PluginsPath="" 插件文件夹<br />
ShowBorders=true/false 合并边框<br />
SkinPath="" 皮肤文件夹位置<br />
SmileyColumns=12 图符窗列数<br />
SmileyImages=字符数组 图符窗中图片文件名数组<br />
SmileyPath="" 图符文件夹路径<br />
SmileyWindowHeight 图符窗口高度<br />
SmileyWindowWidth 图符窗口宽度<br />
SpellChecker="ieSpell/Spellerpages" 设置拼写检查器<br />
StartupFocus=true/false 开启时FOCUS到编辑器<br />
StylesXmlPath="" 设置定义CSS样式列表的XML文件的位置<br />
TabSpaces=4 TAB键产生的空格字符数<br />
ToolBarCanCollapse=true/false 是否允许展开/折叠工具栏<br />
ToolbarSets=object 允许使用TOOLBAR集合<br />
ToolbarStartExpanded=true/false 开启是TOOLBAR是否展开<br />
UseBROnCarriageReturn=true/false 当回车时是产生BR标记还是P或者DIV标记<br />
<br />
如何自定义样式列表呢?<br />
FCKEDITOR的样式工具栏中提供了预定义的样式,样式是通过XML文件定义的,默认的XML样式文件存在于FCkEditor根文件夹下的FckStyls.xml文件中<br />
这个XML文件的结构分析如下:<br />
<?xml version="1.0" encoding="utf-8" ?><br />
<styles ><br />
<style name="My Image" element="img"><br />
<attribute name="style" value="padding: 5px" /><br />
<attribute name="border" value="2" /><br />
</style ><br />
<style name="Italic" element="em" /><br />
<style name="Title" element="span"><br />
<attribute name="class" value="Title" /><br />
</style ><br />
<style name="Title H3" element="h3" /><br />
</styles><br />
<br />
每一个STYLE标记定义一种样式,NAME是显示在下拉列表中的样式名,ELEMENT属性指定此样式所适用的对象,因为FCKEDITOR中的样式是上下文敏感的,也就是说,选择不同的对象,仅会显示针对这类对象定义的样式<br />
<br />
拼写检查<br />
<br />
FCKEDITOR带了两种拼写检查工具,一种是ieSpell,默认情况下使用这种,使用这种方式的拼写检查,要求客户下载并安装iespell这个小软件,另外,也提供SpellPager的方式来进行拼写检查,不过,由于SPELLPAGER是由PHP编写的服务器端脚本,因此,要求你的WEB服务器必须支持PHP脚本语言方可<br />
更改拼写检查器的方式请参见有关配置文件的详细说明<br />
<br />
压缩脚本<br />
<br />
为了提供脚本载入的效率,FCKEDITOR采用以下方法对脚本尽量压缩以减少脚本尺寸:<br />
1,移除掉脚本中的注释<br />
2.移除掉脚本中所有无意义的空白<br />
另外,FCKEDITOR还提供了一个专门用于压缩脚本的工具以便 你在发布时能减小文件尺寸,<br />
你可以将_Packager文件夹中的Fckeditor.Packager.exe复制到FCKEDITOR根文件夹来运行并压缩脚本<br />
<br />
本地化FCKEDITOR<br />
如果FCKEDITOR没有提供您所需要的语言(实际上全有了),你也可以自行制作新的语言<br />
,你只需要复制出EN.JS,然后在其基础上进行翻译.另外,语言名称与对应的脚本文件名必须遵循RFC 3066标准,但是,需要小写,例如:Portuguess Language对应的脚本文件名必须为pt.js<br />
如果需要针对某个国家的某种语系,则可以在语系缩写后加上横线及国家缩写即可<br />
<br />
在使用时,系统会自动侦测客户端语系及国别而运用适当的界面语言.<br />
<br />
当建立一种新的语言后,你必须在"Edit/lang/fcklanguagemanager.js"中为其建立一个条目,如下所示:<br />
FCKLanguageManager.AvailableLanguages = <br />
{<br />
<br />
en : 'English',<br />
pt : 'Portuguese' <br />
} <br />
<br />
需要提醒的是,文件必须保存为UTF-8格式<br />
<br />
如何与服务器端脚本进行交互?<br />
请查看例子以得到相关内容<br />
<br />
另外,在ASP.NET中以以下步骤使用<br />
1.把FCKEDITOR添中到工具箱<br />
2.托拽FCKEDITOR控件到页面<br />
3.为其指定名称<br />
4.FCKEDITOR类的所有属性不光可以在代码中使用,而且可以作为FCKEDITOR控件的属性直接使用,例如,要改变皮肤,可以在UI页面中指定SkinPath="/fckeditor/editor/skins/office2003"即可,其实FCKEDITOR的ASP.NET版本可以做得更好,你可以找到FCKEDITOR ASP.NET 2.1的源文件,然后修改该控件的设计,为其暴露更多有用的属性,重新编译即可<br />
5,POSTBACK后的数据,使用FCKEDITOR控件的value属性获得<br />
6.由于默认状态下,ASP.NET不允许提交含有HTML及JAVASCRIPT的内容,因此,你必须将使用FCKEDITOR的页面的ValidateRequest设为false.(<%@page validteRequest="false" %>即可)</p>
<p>--------------------------------------------------------</p>
<p>附：</p>
<p>一、如何设置上传文件语言</p>
<p>把FCKeditor根目录下面的fckconfig.js文件里<br />
<br />
var _FileBrowserLanguage]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>62</wp:post_id>
		<wp:post_date><![CDATA[2007-08-13 19:01:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-08-13 19:01:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[fckeditor%e4%b8%ad%e6%96%87%e9%85%8d%e7%bd%ae%e6%89%8b%e5%86%8c%e8%af%a6%e7%bb%86%e8%af%b4%e6%98%8e-httpblog-csdn-nethnwanghbarchive200704241581163-aspx]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>榨干 PHP[http://www.phpchina.com/2190/viewspace_13003.html]</title>
		<link>http://blog.00rz.com/2007/08/%e6%a6%a8%e5%b9%b2-phphttpwww-phpchina-com2190viewspace_13003-html.html</link>
		<pubDate>Mon, 13 Aug 2007 10:22:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=63</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><div class="t_msgfont"><font style="font-size: 13px">这篇杂文翻译整理自网络各路文档资料(见最末的参考资料)，尤其是 <font color="#ff0000">Ilia Alshanetsky</font> (佩服之至) 在多个 <a target="_self" href=":;"><u><strong>PHP</strong></u></a> 会议上的演讲，主要是各类提高 PHP 性能的技巧。为求精准，很多部分都有详细的效率数据，以及对应的版本等等。偷懒，数据就不一一给出了，直接给结论，如果需要看原文档，请到文末「参考资料」部分。<font color="#ffa500">橙色标题</font>为推荐部分。<br />
<br />
========================================================<br />
<br />
[size=+2]<font color="#0000ff"><strong>静态调用的成员一定要定义成 static]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>63</wp:post_id>
		<wp:post_date><![CDATA[2007-08-13 10:22:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-08-13 10:22:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%a6%a8%e5%b9%b2-phphttpwww-phpchina-com2190viewspace_13003-html]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>Hadoop-- 海量文件的分布式计算处理方案</title>
		<link>http://blog.00rz.com/2007/08/hadoop-%e6%b5%b7%e9%87%8f%e6%96%87%e4%bb%b6%e7%9a%84%e5%88%86%e5%b8%83%e5%bc%8f%e8%ae%a1%e7%ae%97%e5%a4%84%e7%90%86%e6%96%b9%e6%a1%88.html</link>
		<pubDate>Sat, 11 Aug 2007 15:15:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=64</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><br />
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>64</wp:post_id>
		<wp:post_date><![CDATA[2007-08-11 15:15:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-08-11 15:15:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hadoop-%e6%b5%b7%e9%87%8f%e6%96%87%e4%bb%b6%e7%9a%84%e5%88%86%e5%b8%83%e5%bc%8f%e8%ae%a1%e7%ae%97%e5%a4%84%e7%90%86%e6%96%b9%e6%a1%88]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641013]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>hadoop安装部署</title>
		<link>http://blog.00rz.com/2007/08/hadoop%e5%ae%89%e8%a3%85%e9%83%a8%e7%bd%b2.html</link>
		<pubDate>Sat, 11 Aug 2007 15:15:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=65</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><br />
本文主要是以安装和使用hadoop-0.12.0为例，指出在部署Hadoop的时候容易遇到的问题以及如何解决。
<div><br />
硬件环境<br />
共有3台机器，均使用的FC5系统，Java使用的是jdk1.6.0。IP配置如下：<br />
dbrg-1：202.197.18.72<br />
dbrg-2：202.197.18.73<br />
dbrg-3：202.197.18.74</div>
<div>这里有一点需要强调的就是，务必要确保每台机器的主机名和IP地址之间能正确解析。</div>
<div>一个很简单的测试办法就是ping一下主机名，比如在dbrg-1上ping dbrg-2，如果能ping通就OK！若不能正确解析，可以修改/etc/hosts文件，如果该台机器作Namenode用，则需要在hosts文件中加上集群中所有机器的IP地址及其对应的主机名；如果该台机器作Datanode用，则只需要在hosts文件中加上本机IP地址和Namenode机器的IP地址。</div>
<div>以本文为例，dbrg-1中的/etc/hosts文件看起来就应该是这样的：<br />
127.0.0.0]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>65</wp:post_id>
		<wp:post_date><![CDATA[2007-08-11 15:15:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-08-11 15:15:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hadoop%e5%ae%89%e8%a3%85%e9%83%a8%e7%bd%b2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>Hadoop入门</title>
		<link>http://blog.00rz.com/2007/08/hadoop%e5%85%a5%e9%97%a8.html</link>
		<pubDate>Sat, 11 Aug 2007 15:14:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=66</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><div>Hadoop入门 <br />
单节点的安装与测试<br />
1 下载hadoop的相应版本<br />
2 设置conf目录下的hadoop-env.sh文件，最低要求是要配置JAVA_HOME这个环境变量<br />
3 设置conf目录下的hadoop-site.xml配置文件，<br />
<configuration><br />
<property><br />
<name>fs.default.name</name><br />
<value>localhost:9000</value><br />
</property><br />
<property><br />
<name>mapred.job.tracker</name><br />
<value>localhost:9001</value><br />
</property><br />
<property><br />
<name>dfs.replication</name><br />
<value>1</value><br />
</property><br />
</configuration><br />
4 配置本机的公私密钥对<br />
ssh-keygen -t dsa -P '' -f ~/.ssh/id_dsa<br />
cat ~/.ssh/id_dsa.pub >> ~/.ssh/authorized_keys<br />
5 格式化namenode<br />
bin/hadoop namenode -format<br />
6 启动hadoop<br />
bin/start-all.sh<br />
7 导入数据到DFS</div>
<p> </p></div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>66</wp:post_id>
		<wp:post_date><![CDATA[2007-08-11 15:14:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-08-11 15:14:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hadoop%e5%85%a5%e9%97%a8]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>down load the youku 缩略图</title>
		<link>http://blog.00rz.com/2008/01/down-load-the-youku-%e7%bc%a9%e7%95%a5%e5%9b%be.html</link>
		<pubDate>Sun, 06 Jan 2008 23:54:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=27</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><?php<br />
class Crawl{<br />
/**<br />
* @autho jiayin <br />
* @desc 简单爬虫游戏<br />
* @param $store 为了方便 爬取以后 集中存储<br />
* @method static public store() 边处理边存储<br />
**/<br />
public static $flag = true;<br />
public static $store;<br />
public static function getLink($content){<br />
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>27</wp:post_id>
		<wp:post_date><![CDATA[2008-01-06 23:54:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-01-06 23:54:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[down-load-the-youku-%e7%bc%a9%e7%95%a5%e5%9b%be]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>某网站的 获取 视频的url 算法</title>
		<link>http://blog.00rz.com/2008/01/%e6%9f%90%e7%bd%91%e7%ab%99%e7%9a%84-%e8%8e%b7%e5%8f%96-%e8%a7%86%e9%a2%91%e7%9a%84url-%e7%ae%97%e6%b3%95.html</link>
		<pubDate>Sun, 06 Jan 2008 22:41:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=28</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p><a href="http://v.*****com/player/getPlayList/VideoIDS/3865677/version/5/source/index">http://v.*****com/player/getPlayList/VideoIDS/3865677/version/5/source/index</a></p>
<p>放到flash里面 好难找啊 今天累了， 找不到 只把这点算法和缩略图 找出来了</p>
<p> </p>
<p><?php<br />
$d = "63*46*63*63*63*30*63*30*63*63*42*47*47*39*53*38*42*42*27*10*29*33*63*63*63*18*30*63*30*30*10*33*63*30*46*16*33*43*45*42*29*16*34*45*16*38*33*47*45*27*30*38*53*45*46*42*34*53*30*16*39*34*46*53*53*27*";<br />
<br />
$cg_str = "";<br />
$seed ="8026";<br />
function cg_fun($b){<br />
global $cg_str;<br />
<br />
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>28</wp:post_id>
		<wp:post_date><![CDATA[2008-01-06 22:41:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-01-06 22:41:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%9f%90%e7%bd%91%e7%ab%99%e7%9a%84-%e8%8e%b7%e5%8f%96-%e8%a7%86%e9%a2%91%e7%9a%84url-%e7%ae%97%e6%b3%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>php curl 下载文件</title>
		<link>http://blog.00rz.com/2008/01/php-curl-%e4%b8%8b%e8%bd%bd%e6%96%87%e4%bb%b6.html</link>
		<pubDate>Sun, 06 Jan 2008 18:28:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=29</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  >function curl_download($remote, $local) {<br />
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>29</wp:post_id>
		<wp:post_date><![CDATA[2008-01-06 18:28:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-01-06 18:28:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[php-curl-%e4%b8%8b%e8%bd%bd%e6%96%87%e4%bb%b6]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>一段 http 上传 文件的代码</title>
		<link>http://blog.00rz.com/2008/01/%e4%b8%80%e6%ae%b5-http-%e4%b8%8a%e4%bc%a0-%e6%96%87%e4%bb%b6%e7%9a%84%e4%bb%a3%e7%a0%81.html</link>
		<pubDate>Sun, 06 Jan 2008 17:31:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=30</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p> </p>
<p><font color="#ff6600">来自 ：<a href="http://www.opentle.org/th/node/6021">http://www.opentle.org/th/node/6021</a> ， <a href="http://wiki.forum.nokia.com/index.php/How_to_upload_a_file_to_server_with_multipart/form-data">http://wiki.forum.nokia.com/index.php/How_to_upload_a_file_to_server_with_multipart/form-data</a></font></p>
<p> </p>
<p> </p>
<p><font color="#ff6600">## HTTP file uploader<br />
class HTTPFileUploader:<br />
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>30</wp:post_id>
		<wp:post_date><![CDATA[2008-01-06 17:31:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-01-06 17:31:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%b8%80%e6%ae%b5-http-%e4%b8%8a%e4%bc%a0-%e6%96%87%e4%bb%b6%e7%9a%84%e4%bb%a3%e7%a0%81]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>http 伪造ip</title>
		<link>http://blog.00rz.com/2008/01/http-%e4%bc%aa%e9%80%a0ip.html</link>
		<pubDate>Fri, 04 Jan 2008 10:30:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=31</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><h6><em class="color_weak"> </em></h6>
<div >
<div> </div>
<div>在http协议数据头里面加入选项&ldquo;x-forward-for&rdquo;,例如：&ldquo;x-forward-for:202.204.76.254&rdquo;,这样发送出去的包，就是一个特殊的包，在收包方看来，这个包的意思是，一个代理服务器发过来的数据包，而这个包的真是ip是&ldquo;202.204.76.254&rdquo;，其实还是实现的是三次握手，但是只不过是在发包的同时，对收包方提到了一个第三者。</div>
<div> </div>
<div><font color="#ff0000"><strong> </strong></font></div>
<div> function get_ip(){
if(getenv('HTTP_CLIENT_IP')) {
$gb_ip = getenv('HTTP_CLIENT_IP');
} elseif(getenv('HTTP_X_FORWARDED_FOR')) {
$gb_ip = getenv('HTTP_X_FORWARDED_FOR');
} elseif(getenv('REMOTE_ADDR')) {
$gb_ip = getenv('REMOTE_ADDR');
} else {
$gb_ip = $_SERVER['REMOTE_ADDR'];
}
return $gb_ip;
}
 </div>
<div> </div>
</div></div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>31</wp:post_id>
		<wp:post_date><![CDATA[2008-01-04 10:30:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-01-04 10:30:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[http-%e4%bc%aa%e9%80%a0ip]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>mini dns服务器</title>
		<link>http://blog.00rz.com/2008/01/mini-dns%e6%9c%8d%e5%8a%a1%e5%99%a8.html</link>
		<pubDate>Thu, 03 Jan 2008 10:35:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=32</guid>
		<description></description>
		<content:encoded><![CDATA[1、
<pre lang="python">
#!/user/bin/python
#-*- coding: utf-8 -*-
import socket

class DNSQuery:
def __init__(self, data):
    self.data=data
    self.dominio=''
    tipo = (ord(data[2]) >> 3) & 15   # Opcode bits
    if tipo == 0:                     # Standard query
      ini=12
      lon=ord(data[ini])
      while lon != 0:
        self.dominio+=data[ini+1:ini+lon+1]+'.'
        ini+=lon+1
        lon=ord(data[ini])

def respuesta(self, ip):
    packet=''
    if self.dominio:
      packet+=self.data[:2] + "\x81\x80"
      packet+=self.data[4:6] + self.data[4:6] + '\x00\x00\x00\x00'   # Questions and Answers Counts
      packet+=self.data[12:]                                         # Original Domain Name Question
      packet+='\xc0\x0c'                                             # Pointer to domain name
      packet+='\x00\x01\x00\x01\x00\x00\x00\x3c\x00\x04'             # Response type, ttl and resource data length -> 4 bytes
      packet+=str.join('',map(lambda x: chr(int(x)), ip.split('.'))) # 4bytes of IP
    return packet

if __name__ == '__main__':
udps = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
udps.bind(('',53))
try:
    while 1:
      try:
        data, addr = udps.recvfrom(1024)
        p=DNSQuery(data)
        ip=socket.gethostbyname(p.dominio)
      except socket.error, e:
          continue
          print "Error Socket.error %s" % e
      udps.sendto(p.respuesta(ip), addr)
      print 'Respuesta: %s -> %s' % (p.dominio, ip)
except KeyboardInterrupt:
    print 'Finalizando'
    udps.close()

</pre>

2、
<pre lang="python">
#!/user/bin/python
#-*- coding: utf-8 -*-
import socket
import threading
class Prce(threading.Thread):
    def __init__(self,data , addr, sock):
        threading.Thread.__init__(self)
        self.data = data
        self.addr = addr
        self.sock = sock
    def run(self):
        p = DNSQuery(self.data)
        ip = socket.gethostbyname(p.dominio)
        self.sock.sendto(p.respuesta(ip), self.addr)
        print 'Respuesta: %s -> %s' % (p.dominio, ip)
class DNSQuery:
def __init__(self, data):
    self.data=data
    self.dominio=''
    tipo = (ord(data[2]) >> 3) & 15   # Opcode bits
    if tipo == 0:                     # Standard query
      ini=12
      lon=ord(data[ini])
      while lon != 0:
        self.dominio+=data[ini+1:ini+lon+1]+'.'
        ini+=lon+1
        lon=ord(data[ini])

def respuesta(self, ip):
    packet=''
    if self.dominio:
      packet+=self.data[:2] + "\x81\x80"
      packet+=self.data[4:6] + self.data[4:6] + '\x00\x00\x00\x00'   # Questions and Answers Counts
      packet+=self.data[12:]                                         # Original Domain Name Question
      packet+='\xc0\x0c'                                             # Pointer to domain name
      packet+='\x00\x01\x00\x01\x00\x00\x00\x3c\x00\x04'             # Response type, ttl and resource data length -> 4 bytes
      packet+=str.join('',map(lambda x: chr(int(x)), ip.split('.'))) # 4bytes of IP
    return packet

if __name__ == '__main__':
udps = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
udps.bind(('',53))
try:
    while 1:
      try:
        data, addr = udps.recvfrom(1024)
        tmp = Prce(data,addr,udps)
        tmp.start()
        tmp.join()
      except socket.error, e:
          continue
except error:
    print 'Finalizando'
    udps.close()
udps.close()
</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>32</wp:post_id>
		<wp:post_date><![CDATA[2008-01-03 10:35:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-01-03 10:35:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mini-dns%e6%9c%8d%e5%8a%a1%e5%99%a8]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>简单爬虫</title>
		<link>http://blog.00rz.com/2008/01/%e7%ae%80%e5%8d%95%e7%88%ac%e8%99%ab.html</link>
		<pubDate>Wed, 02 Jan 2008 19:37:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=33</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><?php<br />
class Crawl{<br />
/**<br />
* @author jiayin <br />
* @desc 简单爬虫游戏<br />
* @param $store 为了方便 爬取以后 集中存储<br />
* @method static public store() 边处理边存储<br />
**/<br />
public static $flag = true;<br />
public static $store;<br />
public static function getLink($content){<br />
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>33</wp:post_id>
		<wp:post_date><![CDATA[2008-01-02 19:37:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-01-02 19:37:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%ae%80%e5%8d%95%e7%88%ac%e8%99%ab]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>匹配图片url的正则</title>
		<link>http://blog.00rz.com/2008/01/%e5%8c%b9%e9%85%8d%e5%9b%be%e7%89%87url%e7%9a%84%e6%ad%a3%e5%88%99.html</link>
		<pubDate>Wed, 02 Jan 2008 18:50:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=34</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p>preg_match_all('#<img[^>]*src\s*=\s*[\'|\"]?((?:http://)?[^\s]*)[\'|\"]?[^>]*>#',$content ,$return);</p>
<p>preg_match_all('#<img[^>]*src\s*=\s*[\'|\"]?((?:http://)?[^\s]+)"[^>]*>#',$content ,$return);</p></div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>34</wp:post_id>
		<wp:post_date><![CDATA[2008-01-02 18:50:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-01-02 18:50:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%8c%b9%e9%85%8d%e5%9b%be%e7%89%87url%e7%9a%84%e6%ad%a3%e5%88%99]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>VIM的几个操作实例</title>
		<link>http://blog.00rz.com/2007/12/vim%e7%9a%84%e5%87%a0%e4%b8%aa%e6%93%8d%e4%bd%9c%e5%ae%9e%e4%be%8b.html</link>
		<pubDate>Thu, 27 Dec 2007 14:10:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=35</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p>1:在VIM当中要对所编辑的文件进行简单加密<br />
在VIM当中对所编辑的文件进行简单加密，可以在命令行模式下键入&ldquo;:X&rdquo;，然后在提示&ldquo;Enter the encrypt key&rdquo;时输入口令字串就可以加密了。但是不要忘了保存！保存的时候会发现在屏幕底部有&ldquo;[crypted]&rdquo;这样的字样。下次打开该加密文件会要求您输入口令字串。</p>
<p>2:重复输入同一字符 <br />
有时，我们可能想多次输入同一字符，VIM的插入功能可以很好的完成这项工作<br />
命令 80i=^ESC 一次可以输入80个字符= ,当然，80a=^ESC 也可以完成上述功能。<br />
请注意：此处的^ESC表示键盘左上方上的ESC键。</p>
<p>3:在文件中置入行号</p>
<p>工作中，我们有时希望把行号置入文件中，而VIM提供的功能 :set nu 只能显示行号，不能编辑或将其置入文件当中，下面的宏命令脚本row_num.vim可以完成此项功能。</p>
<p>:%s/^/^I/ 每一行的行首添加一个TAB字符<br />
:$ 到文件的末行<br />
:let end=line(".") 末行的行号 ==〉变量 END，函数line的功能是取得指定行的行号，此处参数"."表示当前行<br />
:1 到文件的首行<br />
"------------------------------------------<br />
:let num=1 1 ==〉计数器<br />
:while num<=end<br />
:let line=getline(".") 取当前行的内容 ==〉变量 LINE<br />
:let line=substitute(line,$,num,"") 在变量 LINE 的前面置入行号<br />
:call setline(".",line) 将变量 LINE 的内容写回当前行<br />
:+ 下移一行<br />
:let num=num+1 计数器加一<br />
:endwhile 循环执行，直到文件结束<br />
"------------------------------------------</p>
<p>4:将文件名插入文件中<br />
在编辑状态下，使用Ctrl+R %来输入你正在编辑的文件名。</p>
<p> </p>
<p><br />
5: 用VIM编写C/C++程序<br />
Vi是Unix下最常用的文本编辑器。VIM（Vi IMproved）则是它的增强版。有人常常拿VIM和emacs比较，VIM尽管不象emacs那样有那么多的功能，但是比emacs更方便、好用。用过emacs的人肯定会为emacs的一些快捷键感到烦恼，有时候用真希望自己有八只手。VIM的学习曲线也不象emacs那么长，只要看看VIM自带的vitutor，大约只要20分钟就能掌握VIM的用法。对于Unix下的C/C++的程序员，我推荐你们使用VIM+Ctags的组合来写程序。其中原因听我慢慢道来。（下面对VIM的介绍主要是针对5.6以后的版本）</p>
<p>VIM支持语法制导和自动缩进<br />
VIM会根据文件的后缀名，如：*.c、*.cpp、*.cc，等，自动设置语法制导（Syntax Highlighting）。C/C++中的一些保留字，如：if、for、include，等等，就会有不同的颜色，这样就会减少程序员犯错的可能，阅读程序的时候相对来说也轻松很多。用下面这些命令在VIM中查看有关语法制导的帮助：&ldquo;:h syntax&rdquo;、&ldquo;:h syn-qstart&rdquo;、&ldquo;:h syntax-printing&rdquo;。</p>
<p>VIM也支持根据GNU的风格自动缩进，这样程序员编写出来的代码就更易阅读，而且也有利于培养好的编程风格。用下面这些命令在VIM中查看有关自动缩进的帮助：&ldquo;:h cindent&rdquo;、&ldquo;:h cinoptions&rdquo;、&ldquo;:h cinoptions-values&rdquo;、&ldquo;:h cinkeys&rdquo;、&ldquo;:h cinwords&rdquo;。</p>
<p>使用Ctags<br />
VIM中已经带了Ctags这个程序。尽管ctags也可以支持其它编辑器，但是它正式支持的只有VIM。Ctags可以帮助程序员很容易地浏览源代码。用下面的命令可以在源代码的根目录下创建&ldquo;tags&rdquo;文件：</p>
<p>[/home/brimmer/src]$ ctags -R</p>
<p>&ldquo;-R&rdquo;表示递归创建，也就包括源代码根目录下的所有子目录下的源程序。&ldquo;tags&rdquo;文件中包括这些对象的列表：</p>
<p>l 用#define定义的宏</p>
<p>l 枚举型变量的值</p>
<p>l 函数的定义、原型和声明</p>
<p>l 名字空间（namespace）</p>
<p>l 类型定义（typedefs）</p>
<p>l 变量（包括定义和声明）</p>
<p>l 类（class）、结构（struct）、枚举类型（enum）和联合（union）</p>
<p>l 类、结构和联合中成员变量或函数</p>
<p>VIM用这个&ldquo;tags&rdquo;文件来定位上面这些做了标记的对象，下面介绍一下定位这些对象的方法：</p>
<p>1) 用命令行。在运行vim的时候加上&ldquo;-t&rdquo;参数，例如：</p>
<p>[/home/brimmer/src]$ vim -t foo_bar</p>
<p>这个命令将打开定义&ldquo;foo_bar&rdquo;（变量或函数或其它）的文件，并把光标定位到这一行。</p>
<p>2) 在vim编辑器内用&ldquo;:ta&rdquo;命令，例如：</p>
<p>:ta foo_bar</p>
<p>3) 最方便的方法是把光标移到变量名或函数名上，然后按下&ldquo;Ctrl-]&rdquo;。用&ldquo;Ctrl-o&rdquo;退回原来的地方。</p>
<p>注意：运行vim的时候，必须在&ldquo;tags&rdquo;文件所在的目录下运行。否则，运行vim的时候还要用&ldquo;:set tags=&rdquo;命令设定&ldquo;tags&rdquo;文件的路径，这样vim才能找到&ldquo;tags&rdquo;文件。</p>
<p>快速改正错误<br />
在VIM编辑器的环境下用&ldquo;:make&rdquo;就可以编译程序，当然其前提是在当前目录下有Makefile文件。运行完&ldquo;:make&rdquo;之后，如果程序中有错误，就会显示出来。这时候，光标会自动指向第一个出现错误的地方，而且你还可以看到错误的提示。然后，你就可以改正错误，而不用手工找到出错的那一行。记住下面几个有用的命令：</p>
<p>l &ldquo;:cl&rdquo;列出错误</p>
<p>l &ldquo;:cn&rdquo;让光标指向下一个错误</p>
<p>l &ldquo;:cp&rdquo;让光标指向上一个错误</p>
<p>l &ldquo;:cnew&rdquo;从头开始</p>
<p>你甚至可以让VIM识别出其它编译器而不是gcc的错误提示。这对一些开发嵌入式系统的程序员这很有用，因为他们很可能用的不是gcc而是其它编译器。通过设置&ldquo;errorformat&rdquo;的值，可以让VIM识别出编译器的出错提示。因为不同的编译器的出错提示是不同的，所以如果用的不是gcc就要重新设置。</p>
<p>&ldquo;errorformat&rdquo;的值是一个字符串，它的格式和C语言的scanf的字符串格式相识。</p>
<p>gcc的&ldquo;errorformat&rdquo;的值为：%f:%l:\%m。其中&ldquo;%f&rdquo;表示文件名，&ldquo;%l&rdquo;表示行号，&ldquo;%m&rdquo;表示出错信息。</p>
<p>用&ldquo;:h errorformat&rdquo;查看详细的帮助信息。</p>
<p>用&ldquo;:h quickfix&rdquo;、&ldquo;:h make&rdquo;、&ldquo;:h makeprg&rdquo;、&ldquo;:h errorfile&rdquo;查看其它的信息。</p>
<p>有用的快捷键<br />
下面的这些快捷键对程序员很有帮助：</p>
<p>在函数中移动光标<br />
[[ 转到上一个位于第一列的&ldquo;{&rdquo;</p>
<p>]] 转到下一个位于第一列的&ldquo;{&rdquo;</p>
<p>{ 转到上一个空行</p>
<p>} 转到下一个空行</p>
<p>gd 转到当前光标所指的局部变量的定义</p>
<p>* 转到当前光标所指的单词下一次出现的地方</p>
<p># 转到当前光标所指的单词上一次出现的地方</p>
<p>括号的匹配<br />
% 用来进行小括号、中括号和大括号的匹配。这要看当前光标指向的是什么符号了。</p>
<p>其它<br />
VIM的配置文件是&ldquo;.vimrc&rdquo;，用这个文件可以配置VIM。VIM的图形界面的版本叫gvim。VIM也有用于Windows平台的版本。</p>
<p><br />
版权说明<br />
这个技巧的版权属于作者brimmer（<a href="mailto:brimmer@linuxaid.com.cn"><font color="#000066">brimmer@linuxaid.com.cn</font></a>）和<a href="http://www.linuxaid.com.cn/"><font color="#000066">www.linuxaid.com.cn</font></a>。</p>
<p>6:自动补齐<br />
这个技巧在你写程序是十分的有用，在编辑状态下使用Ctrl+N就可以了，当然你要先输入前面的一小部分，如果不是你可以重复使用<br />
Ctrl+N来选择正确的匹配，当你的程序变量十分长时，该命令就显得很有用出了。</p>
<p>7：对一段文字进行排序<br />
例如，有下面一段文字<br />
version.o <br />
pch.o <br />
getopt.o <br />
util.o <br />
getopt1.o <br />
inp.o <br />
patch.o <br />
backupfile.o<br />
你想要对他们进行排序，按照字母顺序<br />
通过以下几部可以做到：<br />
a:移动光标到想要排序的那一行<br />
b:使用ma标志改行为a<br />
c:移动光标到想要排序的最后一行<br />
d:使用指令"!'asort"，来完成排序（注意这些步骤都是在非输入模式下进行的。）下面解释一下各个的用途。"!"表示将要执行指令，"'a"表示从当前行道标志为a的行，'sort'是执行的指令。</p></div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>35</wp:post_id>
		<wp:post_date><![CDATA[2007-12-27 14:10:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-12-27 14:10:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[vim%e7%9a%84%e5%87%a0%e4%b8%aa%e6%93%8d%e4%bd%9c%e5%ae%9e%e4%be%8b]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4759137018]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Vim的折叠功能</title>
		<link>http://blog.00rz.com/2007/12/vim%e7%9a%84%e6%8a%98%e5%8f%a0%e5%8a%9f%e8%83%bd.html</link>
		<pubDate>Thu, 27 Dec 2007 14:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=36</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><h2 class="posttitle"> </h2>
<p class="authordate"><span>作者：haijd </span></p>
<div class="entry">
<p>折行的用处：</p>
<ul>
    <li>创建折行进行大纲预览</li>
    <li>移动到某处进行编辑</li>
    <li>使用jzij打开文本进行编辑</li>
    <li>编辑完毕后再用jzij打开折行进行移动</li>
</ul>
<p>打开vim的折叠功能，请在 "~/.vimrc" 中加入 ":set foldmethod=marker"，使用vim默认的折叠标签进行处理。使用方法如下：</p>
<p>1、加折叠标签</p>
<p>在normal模式下，从键盘输入zf并回车，您就会看到折叠在一起的两行标签如下：</p>
<pre><code>/*{{{*/
.....这里输入您 的程序代码
/*}}}*/
</code></pre>
<p>2、输入程序代码后，将代码折叠起来使用如下命令(normal模式)：</p>
<pre><code>zc 回车
</code></pre>
<p>3、打开折叠的程序有以下几种方法</p>
<ol>
    <li>在折叠的行上移动光标</li>
    <li>在normal模式下输入zo并回车</li>
</ol>
<p>4、给一段文字加折行（normal 模式）</p>
<pre><code>zfap
</code></pre>
<p>5、zr命令可以打开折叠几层的内容 zm使用内容折叠的更多一些（多层折叠操作时可反复使用）。</p>
<p>6、嵌套了多层的折行, 也可以用zR命令一次打开所有折行</p>
<p>7、关闭所有的嵌套折行使用zM</p>
<p>8、可以用jznj命令来禁用一个折行. 然后用jzNj还可以恢复它. jzij命令则可以在两者之间切换.</p>
<p>其它的请参考vim的使用手</p>
</div></div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>36</wp:post_id>
		<wp:post_date><![CDATA[2007-12-27 14:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-12-27 14:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[vim%e7%9a%84%e6%8a%98%e5%8f%a0%e5%8a%9f%e8%83%bd]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>python  去utf-8 bom</title>
		<link>http://blog.00rz.com/2007/12/python-%e5%8e%bbutf-8-bom.html</link>
		<pubDate>Fri, 21 Dec 2007 11:41:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=37</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p>#!/usr/bin/python<br />
#-*- coding: utf-8 -*-<br />
import os<br />
import codecs<br />
import time</p>
<p>from sys import *</p>
<p><br />
__trim_ext_array__ = ("php", "js")</p>
<p>def trimBom(filename):<br />
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>37</wp:post_id>
		<wp:post_date><![CDATA[2007-12-21 11:41:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-12-21 11:41:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[python-%e5%8e%bbutf-8-bom]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641027]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>python多线程[http://www.faydu.cn/blog/post/27.html]</title>
		<link>http://blog.00rz.com/2007/12/python%e5%a4%9a%e7%ba%bf%e7%a8%8bhttpwww-faydu-cnblogpost27-html.html</link>
		<pubDate>Wed, 19 Dec 2007 11:56:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=38</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p> 从三个方面来考虑 1实现 2 同步  3 通讯</p>
<p>1实现 :主要是从thread或threading两种方式,</p>
<p>def run(num):</p>
<p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>38</wp:post_id>
		<wp:post_date><![CDATA[2007-12-19 11:56:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-12-19 11:56:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[python%e5%a4%9a%e7%ba%bf%e7%a8%8bhttpwww-faydu-cnblogpost27-html]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>本月某人发表文章的日期</title>
		<link>http://blog.00rz.com/2007/12/%e6%9c%ac%e6%9c%88%e6%9f%90%e4%ba%ba%e5%8f%91%e8%a1%a8%e6%96%87%e7%ab%a0%e7%9a%84%e6%97%a5%e6%9c%9f.html</link>
		<pubDate>Mon, 17 Dec 2007 11:52:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=39</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p>SELECT DISTINCT date( created_at ) AS 'est_date'<br />
FROM `clip` <br />
WHERE `created_at` > DATE_SUB( NOW( ) , INTERVAL DAYOFMONTH( NOW( ) ) <br />
DAY ) <br />
AND `channel_id` = 'xxxx'<br />
LIMIT 0 , 30</p>
<p>这个是在 基数 为 250643 channel_id 建索引的情况下查询的结果</p>
<p><br />
查询花费 0.0006 秒(时间比较经济)</p>
<p> </p>
<p>
<table class="data FCK__ShowTableBorders">
    <thead>
        <tr>
            <th>id</th>
            <th>select_type</th>
            <th>table</th>
            <th>type</th>
            <th>possible_keys</th>
            <th>key</th>
            <th>key_len</th>
            <th>ref</th>
            <th>rows</th>
            <th>Extra</th>
        </tr>
    </thead>
    <tbody>
        <tr class="odd">
            <td class="nowrap" align="right">1</td>
            <td>SIMPLE</td>
            <td>clip</td>
            <td>ref</td>
            <td>channel_id</td>
            <td>channel_id</td>
            <td>4</td>
            <td>const</td>
            <td class="nowrap" align="right">24</td>
            <td>Using where; Using temporary</td>
        </tr>
    </tbody>
</table>
</p></div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>39</wp:post_id>
		<wp:post_date><![CDATA[2007-12-17 11:52:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-12-17 11:52:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%9c%ac%e6%9c%88%e6%9f%90%e4%ba%ba%e5%8f%91%e8%a1%a8%e6%96%87%e7%ab%a0%e7%9a%84%e6%97%a5%e6%9c%9f]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>javascript 内存管理  避免内存泄漏 [ajax in action]</title>
		<link>http://blog.00rz.com/2007/12/javascript-%e5%86%85%e5%ad%98%e7%ae%a1%e7%90%86-%e9%81%bf%e5%85%8d%e5%86%85%e5%ad%98%e6%b3%84%e6%bc%8f-ajax-in-action.html</link>
		<pubDate>Wed, 12 Dec 2007 13:44:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=40</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p class="111" style="margin: 12pt 0cm 7.5pt"> </p>
<p class="MsoNormal" style="margin-top: 4.5pt; text-indent: 20pt">任何程序都有可能发生内存&ldquo;泄漏&rdquo;（即申请了系统内存并且在工作完成后没有释放)，并且对于使用非托管语言（unmanaged languages）（如C语言）的开发者来说，内存的分配和释放是一个主要的关注点。JavaScript是一种内存托管（memory-managed）的语言，垃圾回收过程能够帮助程序员自动地处理内存的分配和释放。该机制解决了大部分困扰的非托管代码的问题，但是，认为内存托管语言不会产生内存泄漏却是错误的。</p>
<p class="MsoNormal" style="margin-top: 4.5pt; text-indent: 20pt">垃圾回收进程尝试推断何时可以安全地回收不再使用的变量，通常是通过判定程序是否能够通过变量之间形成的引用网络到达该变量。当确信变量是不可达的，就在它上面标上可以回收的记号，并且在回收器的下一次清理中（可能在未来的任意时刻)释放相关的内存。在托管语言中产生内存泄漏非常简单：只需使用完变量而忘记解除引用。</p>
<p class="MsoNormal" style="margin-top: 4.5pt; text-indent: 20pt">我们来考虑一个简单的例子，其中定义了一个描述家庭宠物及其主人的对象模型。首先看看主人，以Person对象描述：</p>
<p class="10" style="margin-top: 4.5pt">function Person(name){</p>
<p class="a1">this.name=name;</p>
<p class="a1">this.pets=new Array();</p>
<p class="a1">}</p>
<p class="MsoNormal" style="margin-top: 4.5pt; text-indent: 0cm">一个主人可以养一只或者多只宠物。当主人得到了一只宠物，他告诉宠物现在自己是它的主人：</p>
<p class="10" style="margin-top: 3.45pt">Person.prototype.addPet=function(pet){</p>
<p class="a1">this.pets[pet.name]=pet;</p>
<p class="a1">if (pet.assignOwner){</p>
<p class="a1">]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>40</wp:post_id>
		<wp:post_date><![CDATA[2007-12-12 13:44:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-12-12 13:44:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[javascript-%e5%86%85%e5%ad%98%e7%ae%a1%e7%90%86-%e9%81%bf%e5%85%8d%e5%86%85%e5%ad%98%e6%b3%84%e6%bc%8f-ajax-in-action]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[6234105931]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>惰性函数定义模式 【realazy】</title>
		<link>http://blog.00rz.com/2007/12/%e6%83%b0%e6%80%a7%e5%87%bd%e6%95%b0%e5%ae%9a%e4%b9%89%e6%a8%a1%e5%bc%8f-%e3%80%90realazy%e3%80%91.html</link>
		<pubDate>Wed, 12 Dec 2007 12:43:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=41</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p>这篇文章阐述的是一种函数式编程（functional-programming）设计模式，我称之为惰性函数定义（Lazy Function Definition）。我不止一次发现这种模式在JavaScript中大有用处，尤其是编写跨浏览器的、高效运行的库之时。</p>
<h2>热身问题</h2>
<p>编写一个函数<code><font face="Bitstream Vera Sans Mono">foo</font></code>，它返回的是<code><font face="Bitstream Vera Sans Mono">Date</font></code>对象，这个对象保存的是<code><font face="Bitstream Vera Sans Mono">foo</font></code>首次调用的时间。</p>
<h3>方法一：上古时代的技术</h3>
<p>这个最简陋的解决方案使用了全局变量<code><font face="Bitstream Vera Sans Mono">t</font></code>来保存<code><font face="Bitstream Vera Sans Mono">Date</font></code>对象。<code><font face="Bitstream Vera Sans Mono">foo</font></code>首次调用时会把时间保存到<code><font face="Bitstream Vera Sans Mono">t</font></code>中。接下来的再次调用，<code><font face="Bitstream Vera Sans Mono">foo</font></code>只会返回保存在<code><font face="Bitstream Vera Sans Mono">t</font></code>中的值。</p>
<pre><code><font face="Bitstream Vera Sans Mono" size="2">var t;
function foo() {
    if (t) {
        return t;
    }
    t = new Date();
    return t;
}</font></code></pre>
<p>但是这样的代码有两个问题。第一，变量<code><font face="Bitstream Vera Sans Mono">t</font></code>是一个多余的全局变量，并且在<code><font face="Bitstream Vera Sans Mono"> foo</font></code>调用的间隔期间有可能被更改。第二，在调用时这些代码的效率并没有得到优化因为每次调用<code><font face="Bitstream Vera Sans Mono"> foo</font></code>都必须去求值条件。虽然在这个例子中，求值条件并不显得低效，但在现实世界的实践例子中常常会有极为昂贵的条件求值，比如在if-else-else-…的结构中。</p>
<h3>方法二：模块模式</h3>
<p>我们可以通过被认为归功于<a href="http://www.jibbering.com/faq/faq_notes/closures.html#clEncap"><font color="#007b99">Cornford</font></a> 和 <a href="http://www.crockford.com/ /private.html"><font color="#007b99">Crockford</font></a> 的<a href="http://yuiblog.com/blog/2007/06/12/module-pattern/"><font color="#007b99">模块模式</font></a>来弥补第一种方法的缺陷。使用闭包可以隐藏全局变量<code><font face="Bitstream Vera Sans Mono">t</font></code>，只有在<code><font face="Bitstream Vera Sans Mono"> foo</font></code>内的代码才可以访问它。</p>
<pre><code><font face="Bitstream Vera Sans Mono" size="2">var foo = (function() {
    var t;
    return function() {
        if (t) {
            return t;
        }
        t = new Date();
        return t;
    }
})();</font></code></pre>
<p>但这仍然没有优化调用时的效率，因为每次调用<code><font face="Bitstream Vera Sans Mono">foo</font></code>依然需要求值条件。</p>
<p>虽然模块模式是一个强大的工具，但我坚信在这种情形下它用错了地方。</p>
<h3>方法三：函数作为对象</h3>
<p>由于JavaScript的函数也是对象，所以它可以带有属性，我们可以据此实现一种跟模块模式质量差不多的解决方案。</p>
<pre><code><font face="Bitstream Vera Sans Mono" size="2">function foo() {
    if (foo.t) {
        return foo.t;
    }
    foo.t = new Date();
    return foo.t;
}</font></code></pre>
<p>在一些情形中，带有属性的函数对象可以产生比较清晰的解决方案。我认为，这个方法在理念上要比模式模块方法更为简单。</p>
<p>这个解决方案避免了第一种方法中的全局变量<code><font face="Bitstream Vera Sans Mono">t</font></code>，但仍然解决不了<code><font face="Bitstream Vera Sans Mono">foo</font></code>每次调用所带来的条件求值。</p>
<h3>方法四：惰性函数定义</h3>
<p>现在，这是你阅读这篇文章的理由：</p>
<pre><code><font face="Bitstream Vera Sans Mono" size="2">var foo = function() {
    var t = new Date();
    foo = function() {
        return t;
    };
    return foo();
};</font></code></pre>
<p>当<code><font face="Bitstream Vera Sans Mono">foo</font></code>首次调用，我们实例化一个新的<code><font face="Bitstream Vera Sans Mono">Date</font></code>对象并重置 <code><font face="Bitstream Vera Sans Mono">foo</font></code>到一个新的函数上，它在其闭包内包含<code><font face="Bitstream Vera Sans Mono">Date</font></code>对象。在首次调用结束之前，<code><font face="Bitstream Vera Sans Mono">foo</font></code>的新函数值也已调用并提供返回值。</p>
<p>接下来的<code><font face="Bitstream Vera Sans Mono">foo</font></code>调用都只会简单地返回<code><font face="Bitstream Vera Sans Mono">t</font></code>保留在其闭包内的值。这是非常快的查找，尤其是，如果之前那些例子的条件非常多和复杂的话，就会显得很高效。</p>
<p>弄清这种模式的另一种途径是，外围（outer）函数对<code><font face="Bitstream Vera Sans Mono">foo</font></code>的首次调用是一个保证（promise）。它保证了首次调用会重定义<code><font face="Bitstream Vera Sans Mono">foo</font></code>为一个非常有用的函数。笼统地说，术语&ldquo;保证&rdquo; 来自于Scheme的惰性求值机制（lazy evaluation mechanism）。每一位JavaScript程序员真的都应该<a href="http://www.amazon.com/Scheme-Programming-s=books&qid=1186852441&sr=8-1"><font color="#007b99">学习Scheme</font></a>，因为它有很多函数式编程相关的东西，而这些东西会出现在JavaScript中。</p>
<h2>确定页面滚动距离</h2>
<p>编写跨浏览器的JavaScript, 经常会把不同的浏览器特定的算法包裹在一个独立的JavaScript函数中。这就可以通过隐藏浏览器差异来标准化浏览器API，并让构建和维护复杂的页面特性的JavaScript更容易。当包裹函数被调用，就会执行恰当的浏览器特定的算法。</p>
<p>在拖放库中，经常需要使用由鼠标事件提供的光标位置信息。鼠标事件给予的光标坐标相对于浏览器窗口而不是页面。加上页面滚动距离鼠标的窗口坐标的距离即可得到鼠标相对于页面的坐标。所以我们需要一个反馈页面滚动的函数。演示起见，这个例子定义了一个函数<code><font face="Bitstream Vera Sans Mono">getScrollY</font></code>。因为拖放库在拖拽期间会持续运行，我们的<code><font face="Bitstream Vera Sans Mono">getScrollY</font></code>必须尽可能高效。</p>
<p>不过却有四种不同的浏览器特定的页面滚动反馈算法。Richard Cornford在他的<a href="http://www.jibbering.com/faq/faq_notes/not_browser_detect.html#bdScroll"><font color="#007b99">feature detection article</font></a>文章中提到这些算法。最大的陷阱在于这四种页面滚动反馈算法其中之一使用了<code><font face="Bitstream Vera Sans Mono"> document.body</font></code>. JavaScript库通常会在HTML文档的<code><font face="Bitstream Vera Sans Mono"><head></font></code>加载，与此同时<code><font face="Bitstream Vera Sans Mono">docment.body</font></code>并不存在。所以在库载入的时候，我们并不能使用特性检查（feature detection）来确定使用哪种算法。</p>
<p>考虑到这些问题，大部分JavaScript库会选择以下两种方法中的一种。第一个选择是使用浏览器嗅探<code><font face="Bitstream Vera Sans Mono">navigator.userAgent</font></code>，为该浏览器创建高效、简洁的<code><font face="Bitstream Vera Sans Mono">getScrollY</font></code>. 第二个更好些的选择是<code><font face="Bitstream Vera Sans Mono">getScrollY</font></code>在每一次调用时都使用特性检查来决定合适的算法。但是第二个选择并不高效。</p>
<p>好消息是拖放库中的<code><font face="Bitstream Vera Sans Mono">getScrollY</font></code>只会在用户与页面的元素交互时才会用到。如果元素业已出现在页面中，那么<code><font face="Bitstream Vera Sans Mono">document.body</font></code>也会同时存在。<code><font face="Bitstream Vera Sans Mono">getScrollY</font></code>的首次调用，我们可以使用惰性函数定义模式结合特性检查来创建高效的<code><font face="Bitstream Vera Sans Mono">getScrollY</font></code>.</p>
<pre><code><font face="Bitstream Vera Sans Mono" size="2">var getScrollY = function() {

    if (typeof window.pageYOffset == 'number') {
        getScrollY = function() {
            return window.pageYOffset;
        };

    } else if ((typeof document.compatMode == 'string') &&
               (document.compatMode.indexOf('CSS') >= 0) &&
               (document.documentElement) &&
               (typeof document.documentElement.scrollTop == 'number')) {
        getScrollY = function() {
            return document.documentElement.scrollTop;
        };

    } else if ((document.body) &&
               (typeof document.body.scrollTop == 'number')) {
      getScrollY = function() {
          return document.body.scrollTop;
      }

    } else {
      getScrollY = function() {
          return NaN;
      };

    }

    return getScrollY();
}</font></code></pre>
<h2>总结</h2>
<p>惰性函数定义模式让我可以编写一些紧凑、健壮、高效的代码。用到这个模式的每一次，我都会抽空赞叹JavaScript的函数式编程能力。</p>
<p>JavaScript同时支持函数式和面向对象便程。市面上有很多重点着墨于面向对象设计模式的书都可以应用到JavaScript编程中。不过却没有多少书涉及函数式设计模式的例子。对于JavaScript社区来说，还需要很长时间来积累良好的函数式模式。</p>
<p>原文：<a href="http://peter.michaux.ca/article/3556"><font color="#007b99">Lazy Function Definition Pattern</font></a>. 转载没有我的信息没有关系，但你一定得写上原文信息，谢谢。</p>
<p><strong>更新</strong>：</p>
<p>这个模式虽然有趣，但由于大量使用闭包，可能会由于内存管理的不善而导致性能问题。来自<a href="http://www.fckeditor.net/"><font color="#007b99">FCKeditor</font></a>的FredCK改进了<code><font face="Bitstream Vera Sans Mono">getScrollY</font></code>，既使用了这种模式，也避免了闭包：</p>
<pre><code><font face="Bitstream Vera Sans Mono" size="2">var getScrollY = function() {

    if (typeof window.pageYOffset == 'number')
        return (getScrollY = getScrollY.case1)();

    var compatMode = document.compatMode;
    var documentElement = document.documentElement;

    if ((typeof compatMode == 'string') &&
               (compatMode.indexOf('CSS') >= 0) &&
               (documentElement) &&
               (typeof documentElement.scrollTop == 'number'))
        return (getScrollY = getScrollY.case2)();

    var body = document.body ;
    if ((body) &&
               (typeof body.scrollTop == 'number'))
        return (getScrollY = getScrollY.case3)();

    return (getScrollY = getScrollY.case4)();
};

getScrollY.case1 = function() {
    return window.pageYOffset;
};

getScrollY.case2 = function() {
    return documentElement.scrollTop;
};

getScrollY.case3 = function() {
    return body.scrollTop;
};

getScrollY.case4 = function() {
        return NaN;
};</font></code></pre></div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>41</wp:post_id>
		<wp:post_date><![CDATA[2007-12-12 12:43:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-12-12 12:43:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%83%b0%e6%80%a7%e5%87%bd%e6%95%b0%e5%ae%9a%e4%b9%89%e6%a8%a1%e5%bc%8f-%e3%80%90realazy%e3%80%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>.bind()之美 [来自 realazy]</title>
		<link>http://blog.00rz.com/2007/12/bind%e4%b9%8b%e7%be%8e-%e6%9d%a5%e8%87%aa-realazy.html</link>
		<pubDate>Wed, 12 Dec 2007 12:41:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=42</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><h2> </h2>
<p>我并不是 <a href="http://prototypejs.org/"><font color="#007b99">Prototype JavaScript framework</font></a>的忠实粉丝，但我对它的总体代码质量印象深刻。具体而言，它为<code><font face="Bitstream Vera Sans Mono">Function</font></code>对象增加一个简洁的补充，对我管理函数呼叫执行后的上下文产生了极大的正面影响：<code><font face="Bitstream Vera Sans Mono">bind</font></code>跟<code><font face="Bitstream Vera Sans Mono">call</font></code>一样执行相同的常见任务，改变函数执行的上下文。不同之处在于<code><font face="Bitstream Vera Sans Mono">bind</font></code>返回的是函数引用可以备用，而不是<code><font face="Bitstream Vera Sans Mono">call</font></code>的立即执行而产生的最终结果。</p>
<p>如果需要简化一下<code><font face="Bitstream Vera Sans Mono">bind</font></code>函数以抓住概念的重点，我们可以先把它插进前面讨论的乘积例子中去，看它究竟是如何工作的。这是一个相当优雅的解决方案：</p>
<pre><code><font face="Bitstream Vera Sans Mono" size="2"><script type="text/javascript">
 var first_object = {
  num: 42
 };
 var second_object = {
  num: 24
 };

 function multiply(mult) {
  return this.num * mult;
 }

 Function.prototype.bind = function(obj) {
  var method = this,
   temp = function() {
    return method.apply(obj, arguments);
   };

  return temp;
 }

 var first_multiply = multiply.bind(first_object);
 first_multiply(5); // 返回 42 * 5

 var second_multiply = multiply.bind(second_object);
 second_multiply(5); // 返回 24 * 5
</script></font></code></pre>
<p>首先，我们定义了<code><font face="Bitstream Vera Sans Mono">first_object</font></code>, <code><font face="Bitstream Vera Sans Mono">second_object</font></code>和<code><font face="Bitstream Vera Sans Mono">multiply</font></code>函数，一如既往。细心处理这些后，我们继续为<code><font face="Bitstream Vera Sans Mono">Function</font></code>对象的<a href="http://en.wikipedia.org/wiki/Prototype-based_programming"><code><font face="Bitstream Vera Sans Mono" color="#007b99">prototype</font></code></a>定义一个<code><font face="Bitstream Vera Sans Mono">bind</font></code>方法，这样的话，我们程序里的函数都有一个<code><font face="Bitstream Vera Sans Mono">bind</font></code>方法可用。当执行<code><font face="Bitstream Vera Sans Mono">multiply.bind(first_object)</font></code>时，JavaScript为<code><font face="Bitstream Vera Sans Mono">bind</font></code>方法创建一个运行上下文，把<code><font face="Bitstream Vera Sans Mono">this</font></code>置为<code><font face="Bitstream Vera Sans Mono">multiply</font></code>函数的引用，并把第一个参数<code><font face="Bitstream Vera Sans Mono">obj</font></code>置为<code><font face="Bitstream Vera Sans Mono">first_object</font></code>的引用。目前为止，一切皆顺。</p>
<p>这个解决方案的真正天才之处在于<code><font face="Bitstream Vera Sans Mono">method</font></code>的创建，置为<code><font face="Bitstream Vera Sans Mono">this</font></code>的引用所指（即<code><font face="Bitstream Vera Sans Mono">multiply</font></code>函数自身）。当下一行的匿名函数被创建，<code><font face="Bitstream Vera Sans Mono">method</font></code>通过它的作用域链访问，obj亦然（不要在此使用<code><font face="Bitstream Vera Sans Mono">this</font></code>, 因为新创建的函数执行后，<code><font face="Bitstream Vera Sans Mono">this</font></code>会被新的、局部的上下文覆盖）。这个<code><font face="Bitstream Vera Sans Mono">this</font></code>的别名让<code><font face="Bitstream Vera Sans Mono">apply</font></code>执行<code><font face="Bitstream Vera Sans Mono">multiply</font></code>函数成为可能，而传递<code><font face="Bitstream Vera Sans Mono">obj</font></code>则确保上下文的正确。用计算机科学的话说，<code><font face="Bitstream Vera Sans Mono">temp</font></code>是一个闭包（<a href="http://www.jibbering.com/faq/faq_notes/closures.html"><cite><font color="#007b99">closure</font></cite></a>），它可以保证，需要在<code><font face="Bitstream Vera Sans Mono">first_object</font></code>的上下文中执行<code><font face="Bitstream Vera Sans Mono">multiply</font></code>，<code><font face="Bitstream Vera Sans Mono">bind</font></code>呼叫的最终返回可以用在任何的上下文中。</p>
<p>这才是前面说到的事件处理函数和<code><font face="Bitstream Vera Sans Mono">setTimeout</font></code>情形所真正需要的。以下代码完全解决了这些问题，绑定<code><font face="Bitstream Vera Sans Mono">deep_thought.ask_question</font></code>方法到<code><font face="Bitstream Vera Sans Mono">deep_thought</font></code>的上下文中，因此能在任何事件触发时都能正确运行：</p>
<pre><code><font face="Bitstream Vera Sans Mono" size="2">function addhandler() {
 var deep_thought = new BigComputer(42),
  the_button = document.getElementById('thebutton');

 the_button.onclick = deep_thought.ask_question.bind(deep_thought);
}</font></code></pre>
<p>漂亮。</p></div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>42</wp:post_id>
		<wp:post_date><![CDATA[2007-12-12 12:41:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-12-12 12:41:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[bind%e4%b9%8b%e7%be%8e-%e6%9d%a5%e8%87%aa-realazy]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>js 数据结构简析</title>
		<link>http://blog.00rz.com/2007/12/js-%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e7%ae%80%e6%9e%90.html</link>
		<pubDate>Tue, 11 Dec 2007 22:37:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=43</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  >这里简单介绍几个函数<br />
Array.prototype.shift();<br />
Array.prototype.push();<br />
Array.prototype.pop();<br />
Array.prototype.length;<br />
这几个函数或属性 足可以模拟数据结构中的栈和队列<br />
hoho<br />
不知道js里面有没有匿名的内存空间</div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>43</wp:post_id>
		<wp:post_date><![CDATA[2007-12-11 22:37:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-12-11 22:37:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[js-%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e7%ae%80%e6%9e%90]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>apache mod_proxy 安装</title>
		<link>http://blog.00rz.com/2007/12/apache-mod_proxy-%e5%ae%89%e8%a3%85.html</link>
		<pubDate>Mon, 10 Dec 2007 12:34:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=44</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><table class="FCK__ShowTableBorders" style="table-layout: fixed">
    <tbody>
        <tr>
            <td>
            <div class="cnt">
            <p><font size="3">在Linux系统下，需要给已经运行的Apache增加mod_proxy模块，编译的时候应该这样：</font></p>
            <p><font face="Tahoma">apxs -c -i mod_proxy.c proxy_util.c</font></p>
            <p><font size="3">否则你可能会收到这样的错误信息</font></p>
            <p>如果还需要其他proxy模块如mod_proxy_http、mod_proxy_ftp，则单独</p>
            <p><font size="2">apxs -c -i proxy_http.c <br />
            apxs -c -i proxy_ftp.c</font></p>
            </div>
            </td>
        </tr>
    </tbody>
</table></div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>44</wp:post_id>
		<wp:post_date><![CDATA[2007-12-10 12:34:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-12-10 12:34:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[apache-mod_proxy-%e5%ae%89%e8%a3%85]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>找最后一个标签 和 和最后一个标签匹配匹配的标签 之间的 标签 （好绕口）</title>
		<link>http://blog.00rz.com/2007/12/%e6%89%be%e6%9c%80%e5%90%8e%e4%b8%80%e4%b8%aa%e6%a0%87%e7%ad%be-%e5%92%8c-%e5%92%8c%e6%9c%80%e5%90%8e%e4%b8%80%e4%b8%aa%e6%a0%87%e7%ad%be%e5%8c%b9%e9%85%8d%e5%8c%b9%e9%85%8d%e7%9a%84%e6%a0%87%e7%ad%be.html</link>
		<pubDate>Thu, 06 Dec 2007 15:07:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=45</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  >]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>45</wp:post_id>
		<wp:post_date><![CDATA[2007-12-06 15:07:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-12-06 15:07:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%89%be%e6%9c%80%e5%90%8e%e4%b8%80%e4%b8%aa%e6%a0%87%e7%ad%be-%e5%92%8c-%e5%92%8c%e6%9c%80%e5%90%8e%e4%b8%80%e4%b8%aa%e6%a0%87%e7%ad%be%e5%8c%b9%e9%85%8d%e5%8c%b9%e9%85%8d%e7%9a%84%e6%a0%87%e7%ad%be]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>ajax 跨域 请求 另类实现[原创]</title>
		<link>http://blog.00rz.com/2007/11/ajax-%e8%b7%a8%e5%9f%9f-%e8%af%b7%e6%b1%82-%e5%8f%a6%e7%b1%bb%e5%ae%9e%e7%8e%b0%e5%8e%9f%e5%88%9b.html</link>
		<pubDate>Thu, 29 Nov 2007 19:14:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=46</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  >function cross_domain_ajax(param, url, callback){<br />
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>46</wp:post_id>
		<wp:post_date><![CDATA[2007-11-29 19:14:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-11-29 19:14:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[ajax-%e8%b7%a8%e5%9f%9f-%e8%af%b7%e6%b1%82-%e5%8f%a6%e7%b1%bb%e5%ae%9e%e7%8e%b0%e5%8e%9f%e5%88%9b]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543640981]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>破磁盘 真慢</title>
		<link>http://blog.00rz.com/2009/02/%e7%a0%b4%e7%a3%81%e7%9b%98-%e7%9c%9f%e6%85%a2.html</link>
		<pubDate>Sun, 22 Feb 2009 17:23:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=7</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  >破磁盘 真慢</div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>7</wp:post_id>
		<wp:post_date><![CDATA[2009-02-22 17:23:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-02-22 17:23:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%a0%b4%e7%a3%81%e7%9b%98-%e7%9c%9f%e6%85%a2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>sar命令使用指南[http://hi.baidu.com/heredo/blog/item/c59bc8f00b8320c67831aaf5.html]</title>
		<link>http://blog.00rz.com/2009/02/sar%e5%91%bd%e4%bb%a4%e4%bd%bf%e7%94%a8%e6%8c%87%e5%8d%97httphi-baidu-comheredoblogitemc59bc8f00b8320c67831aaf5-html.html</link>
		<pubDate>Sun, 22 Feb 2009 16:48:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=8</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><div class="tit">sar命令使用指南</div>
<div class="date">2008年06月03日 星期二 下午 02:18</div>
<table style="table-layout: fixed">
    <tbody>
        <tr>
            <td>
            <div class="cnt" >
            <p>sar命令使用指南<br />
            在使用UNIX操作系统的过程中，我们常常会用到各种各样的问题，比如系统运行速度 突然变慢，系统容易死机或者主机所带的终端常出现死机，这时我们常常猜测，是硬盘空间太小，还是内存不足？I/O出现瓶颈，或者是系统的核心参数出了问题？这时，我们应该考虑使用系统给我们提供的sar命令来对系统作一个了解，该命令是系统维护 的重要工具，主要帮助我们掌握系统资源的使用情况，特别是内存和CPU 的使用情况， 是UNIX系统使用者应该掌握的工具之一。 <br />
            sar 命令行的常用格式：</p>
            <p>sar [options] [-A] [-o file] t [n]</p>
            <p>在命令行中，n 和t 两个参数组合起来定义采样间隔和次数，t为采样间隔，是必须有的参数，n为采样次数，是可选的，默认值是1，-o file表示将命令结果以二进制格式 存放在文件中，file 在此处不是关键字，是文件名。options 为命令行选项，sar命令 的选项很多，下面只列出常用选项：</p>
            <p>　　-A：所有报告的总和。 <br />
            　　-u：CPU利用率 <br />
            　　-v：进程、I节点、文件和锁表状态。 <br />
            　　-d：硬盘使用报告。 <br />
            　　-r：没有使用的内存页面和硬盘块。 <br />
            　　-g：串口I/O的情况。 <br />
            -b：缓冲区使用情况。 <br />
            -a：文件读写情况。 <br />
            -c：系统调用情况。 <br />
            -R：进程的活动情况。 <br />
            -y：终端设备活动情况。 <br />
            -w：系统交换活动。</p>
            <p>下面将举例说明。</p>
            <p>例一：使用命令行 sar -u t n</p>
            <p>例如，每60秒采样一次，连续采样5次，观察CPU 的使用情况，并将采样结果以二进制形式存入当前目录下的文件zhou中，需键入如下命令：</p>
            <p># sar -u -o zhou 60 5</p>
            <p>屏幕显示：</p>
            <p>　　SCO_SV　　　scosysv　3.2v5.0.5　i80386　　　10/01/2001 <br />
            　　14:43:50　　　%usr　　　%sys　　%wio　　　　%idle(-u) <br />
            　　14:44:50　　　0　　　　　1　　　　4　　　　　　94 <br />
            　　14:45:50　　　0　　　　　2　　　　4　　　　　　93 <br />
            　　14:46:50　　　0　　　　　2　　　　2　　　　　　96 <br />
            　　14:47:50　　　0　　　　　2　　　　5　　　　　　93 <br />
            　　14:48:50　　　0　　　　　2　　　　2　　　　　　96 <br />
            　　Average　　　 0　　　　　2　　　　4　　　　　　94</p>
            <p>在显示内容包括：</p>
            <p>　　%usr：CPU处在用户模式下的时间百分比。 <br />
            　　%sys：CPU处在系统模式下的时间百分比。 <br />
            　　%wio：CPU等待输入输出完成时间的百分比。 <br />
            　　%idle：CPU空闲时间百分比。</p>
            <p>在所有的显示中，我们应主要注意%wio和%idle，%wio的值过高，表示硬盘存在I/O瓶颈，%idle值高，表示CPU较空闲，如果%idle值高但系统响应慢时，有可能是CPU等待分配内存，此时应加大内存容量。%idle值如果持续低于10，那么系统的CPU处理能力相对较低，表明系统中最需要解决的资源是CPU。</p>
            <p>如果要查看二进制文件zhou中的内容，则需键入如下sar命令：</p>
            <p>　　# sar -u -f zhou</p>
            <p>可见，sar命令即可以实时采样，又可以对以往的采样结果进行查询。</p>
            <p>例二：使用命行sar -v t n</p>
            <p>例如，每30秒采样一次，连续采样5次，观察核心表的状态，需键入如下命令：</p>
            <p># sar -v 30 5</p>
            <p>屏幕显示： <br />
            　　SCO_SV scosysv 3.2v5.0.5 i80386 10/01/2001 <br />
            　　10:33:23 proc-sz ov inod-sz ov file-sz ov lock-sz　　 (-v) <br />
            10:33:53　305/　321 　0　1337/2764　 0　1561/1706　0　40/　128 <br />
            10:34:23　308/　321 　0　1340/2764　 0　1587/1706　0　37/　128 <br />
            10:34:53　305/　321 　0　1332/2764　 0　1565/1706　0　36/　128 <br />
            10:35:23　308/　321 　0　1338/2764　 0　1592/1706　0　37/　128 <br />
            10:35:53　308/　321　 0　1335/2764　 0　1591/1706　0　37/　128</p>
            <p>显示内容包括：</p>
            <p>proc-sz：目前核心中正在使用或分配的进程表的表项数，由核心参数MAX-PROC控制。</p>
            <p>　　inod-sz：目前核心中正在使用或分配的i节点表的表项数，由核心参数 <br />
            MAX-INODE控制。</p>
            <p>　　file-sz： 目前核心中正在使用或分配的文件表的表项数，由核心参数MAX-FILE控制。</p>
            <p>　　ov：溢出出现的次数。</p>
            <p>　　Lock-sz：目前核心中正在使用或分配的记录加锁的表项数，由核心参数MAX-FLCKRE控制。</p>
            <p>显示格式为</p>
            <p>实际使用表项/可以使用的表项数</p>
            <p>显示内容表示，核心使用完全正常，三个表没有出现溢出现象，核心参数不需调整，如果出现溢出时，要调整相应的核心参数，将对应的表项数加大。</p>
            <p>例三：使用命行sar -d t n</p>
            <p>例如，每30秒采样一次，连续采样5次，报告设备使用情况，需键入如下命令：</p>
            <p># sar -d 30 5</p>
            <p>屏幕显示：</p>
            <p>　　SCO_SV scosysv 3.2v5.0.5 i80386 10/01/2001 <br />
            11:06:43 device　%busy　　　avque　　　r+w/s　　blks/s　　avwait avserv (-d) <br />
            11:07:13 wd-0　　　1.47　　　2.75　　　4.67　　　14.73　　 5.50 3.14 <br />
            11:07:43 wd-0　　　0.43　　　18.77　　 3.07　　　8.66　　　25.11 1.41 <br />
            11:08:13 wd-0　　　0.77　　　2.78　　　2.77　　　7.26　　　4.94 2.77 <br />
            11:08:43 wd-0　　　1.10　　　11.18　　 4.10　　　11.26　　 27.32 2.68 <br />
            11:09:13 wd-0　　　1.97　　　21.78　　 5.86　　　34.06　　　69.66 3.35 <br />
            Average wd-0　　　1.15　　　12.11　　 4.09　　　15.19　　　31.12 2.80</p>
            <p>显示内容包括：</p>
            <p>device： sar命令正在监视的块设备的名字。 <br />
            　　%busy： 设备忙时，传送请求所占时间的百分比。 <br />
            　　avque： 队列站满时，未完成请求数量的平均值。 <br />
            　　r+w/s： 每秒传送到设备或从设备传出的数据量。 <br />
            　　blks/s： 每秒传送的块数，每块512字节。 <br />
            　　avwait： 队列占满时传送请求等待队列空闲的平均时间。 <br />
            　　avserv： 完成传送请求所需平均时间（毫秒）。</p>
            <p>在显示的内容中，wd-0是硬盘的名字，%busy的值比较小，说明用于处理传送请求的有效时间太少，文件系统效率不高，一般来讲，%busy值高些，avque值低些，文件系统的效率比较高，如果%busy和avque值相对比较高，说明硬盘传输速度太慢，需调整。</p>
            <p>例四：使用命行sar -b t n</p>
            <p>例如，每30秒采样一次，连续采样5次，报告缓冲区的使用情况，需键入如下命令：</p>
            <p># sar -b 30 5</p>
            <p>屏幕显示：</p>
            <p>　　SCO_SV scosysv 3.2v5.0.5 i80386 10/01/2001 <br />
            14:54:59 bread/s lread/s %rcache bwrit/s lwrit/s %wcache pread/s pwrit/s (- <br />
            14:55:29　0　　147　　100　 5　　21　　78　　 0　　　0 <br />
            14:55:59　0　　186　　100　 5　　25　　79　　 0　　　0 <br />
            14:56:29　4　　232 　　98　 8　　58　　86　　 0　　　0 <br />
            14:56:59　0　　125　　100　 5　　23　　76　　 0　　　0 <br />
            14:57:29　0　　 89　　100　 4　　12　　66　　 0　　　0 <br />
            Average　 1　　156 　　99　 5　　28　　80　　 0　　　0</p>
            <p>显示内容包括：</p>
            <p>bread/s： 每秒从硬盘读入系统缓冲区buffer的物理块数。 <br />
            lread/s： 平均每秒从系统buffer读出的逻辑块数。 <br />
            %rcache： 在buffer cache中进行逻辑读的百分比。 <br />
            bwrit/s： 平均每秒从系统buffer向磁盘所写的物理块数。 <br />
            lwrit/s： 平均每秒写到系统buffer逻辑块数。 <br />
            %wcache： 在buffer cache中进行逻辑读的百分比。 <br />
            pread/s： 平均每秒请求物理读的次数。 <br />
            pwrit/s： 平均每秒请求物理写的次数。</p>
            <p>在显示的内容中，最重要的是%cache和%wcache两列，它们的值体现着buffer的使用效率，%rcache的值小于90或者%wcache的值低于65，应适当增加系统buffer的数量，buffer数量由核心参数NBUF控制，使%rcache达到90左右，%wcache达到80左右。但buffer参数值的多少影响I/O效率，增加buffer，应在较大内存的情况下，否则系统效率反而得不到提高。</p>
            <p>例五：使用命行sar -g t n</p>
            <p>例如，每30秒采样一次，连续采样5次，报告串口I/O的操作情况，需键入如下命令：</p>
            <p># sar -g 30 5</p>
            <p>屏幕显示：</p>
            <p>SCO_SV scosysv 3.2v5.0.5 i80386　　11/22/2001 <br />
            17:07:03 　ovsiohw/s　 ovsiodma/s　　ovclist/s (-g) <br />
            17:07:33　　　0.00　　　0.00　　　0.00 <br />
            17:08:03　　　0.00　　　0.00　　　0.00 <br />
            17:08:33　　　0.00　　　0.00　　　0.00 <br />
            17:09:03　　　0.00　　　0.00　　　0.00 <br />
            17:09:33　　　0.00　　　0.00　　　0.00 <br />
            Average 　　　0.00　　　0.00　　　0.00</p>
            <p>显示内容包括：</p>
            <p>ovsiohw/s：每秒在串口I/O硬件出现的溢出。</p>
            <p>ovsiodma/s：每秒在串口I/O的直接输入输出通道高速缓存出现的溢出。</p>
            <p>ovclist/s ：每秒字符队列出现的溢出。</p>
            <p>在显示的内容中，每一列的值都是零，表明在采样时间内，系统中没有发生串口I/O溢出现象。</p>
            <p>sar命令的用法很多，有时判断一个问题，需要几个sar命令结合起来使用，比如，怀疑CPU存在瓶颈，可用sar -u 和sar -q来看，怀疑I/O存在瓶颈，可用sar -b、sar -u和sar-d来看，以上举出的五例仅仅是其中的一部分，有兴趣的朋友不妨一试。</p>
            </div>
            </td>
        </tr>
    </tbody>
</table></div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>8</wp:post_id>
		<wp:post_date><![CDATA[2009-02-22 16:48:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-02-22 16:48:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sar%e5%91%bd%e4%bb%a4%e4%bd%bf%e7%94%a8%e6%8c%87%e5%8d%97httphi-baidu-comheredoblogitemc59bc8f00b8320c67831aaf5-html]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641041]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>VirtualBox No suitable module for running kernel found.</title>
		<link>http://blog.00rz.com/2008/12/virtualbox-no-suitable-module-for-running-kernel-found.html</link>
		<pubDate>Mon, 01 Dec 2008 11:20:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=9</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  >sudo apt-get install virtualbox-ose-source<br />
sudo m-a update<br />
sudo m-a prepare<br />
sudo m-a a-i virtualbox-ose<br />
sudo /etc/init.d/vboxdrv restart</div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>9</wp:post_id>
		<wp:post_date><![CDATA[2008-12-01 11:20:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-12-01 11:20:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[virtualbox-no-suitable-module-for-running-kernel-found]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641045]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>ORDER BY Optimization</title>
		<link>http://blog.00rz.com/2008/11/order-by-optimization.html</link>
		<pubDate>Fri, 28 Nov 2008 16:57:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=10</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="blog_text" class="cnt"  ><pre class="programlisting">http://dev.mysql.com/doc/refman/5.0/en/order-by-optimization.html<br /><br /><br />SELECT * FROM t1 <br />  ORDER BY <em class="replaceable"><code>key_part1</code></em>,<em class="replaceable"><code>key_part2</code></em>,... ;<br />    <br />SELECT * FROM t1 <br />  WHERE <em class="replaceable"><code>key_part1</code></em>=<em class="replaceable"><code>constant</code></em> <br />  ORDER BY <em class="replaceable"><code>key_part2</code></em>;<br />    <br />SELECT * FROM t1 <br />  ORDER BY <em class="replaceable"><code>key_part1</code></em> DESC, <em class="replaceable"><code>key_part2</code></em> DESC;<br />    <br />SELECT * FROM t1<br />  WHERE <em class="replaceable"><code>key_part1</code></em>=1 <br />  ORDER BY <em class="replaceable"><code>key_part1</code></em> DESC, <em class="replaceable"><code>key_part2</code></em> DESC;</pre></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>10</wp:post_id>
		<wp:post_date><![CDATA[2008-11-28 16:57:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-11-28 16:57:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[order-by-optimization]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641047]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>企业大亨</title>
		<link>http://blog.00rz.com/2008/10/%e4%bc%81%e4%b8%9a%e5%a4%a7%e4%ba%a8.html</link>
		<pubDate>Sun, 19 Oct 2008 15:27:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=11</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="blog_text" class="cnt">
<h2></h2>
<div id="blog_text">&lt;?php
#*******************************************************
#     Author        : jiayin
#    Last modified : 2008-10-17 19:54
#     Filename      : test.php
#    Description    :
#*******************************************************

$config =  array (
//基本配置
'user' =&gt; array (
'email'    =&gt;  '',
'password' =&gt; '123456'
),
'app_id'             =&gt; '',

'db'   =&gt; array (
'host' =&gt;  'localhost',
'user' =&gt; 'root',
'pw'   =&gt;  '123456',
'db'   =&gt; 'test'
),
//可控参数
'mint_limit'        =&gt; '3000',
'interest_limit'    =&gt; '30',
'mint_interest_limit'    =&gt; '40',
'interest_ratio'    =&gt;  '2',
'mint_interest_ratio'    =&gt; '2',

//url配置
'login_url'         =&gt; 'http://login.kaixin.com/Login.do',
'product_url'       =&gt;  'http://tycoon.kaixin.com/buildEmpire.do?select_type=%s',
'sell_url'          =&gt;  'http://tycoon.kaixin.com/confirmSellProduct.do',
'buy_url'            =&gt; 'http://tycoon.kaixin.com/confirmBuyProduct.do',
'my_usual_url'      =&gt;  'http://tycoon.kaixin.com/myEmpire.do?type=0&amp;id=%s',
'my_unusual_url'    =&gt;  'http://tycoon.kaixin.com/myEmpire.do?type=1&amp;id=%s',

);

$table_sql  = "
CREATE TABLE IF NOT EXISTS `p` (
`product_id` int(11) NOT  NULL,
`name` char(50) character set utf8 NOT NULL,
`max_price` int(11),
`min_price` int(11)
) ";

$data_sql = "
INSERT INTO `p` (`product_id`, `name`, `max_price`, `min_price`) VALUES
(1, '鱼子酱工厂', 2, 1),
(2, '啤酒厂', 4, 2),
(3, '葡萄酒厂', 6, 4),
(4, '玩具厂', 21,  18),
(5, '名牌服装商标', 40, 35),
(6, '儿童食品厂', 43, 38),
(7, '零食生产厂家', 55,  52),
(8, '谷物食品厂', 71, 66),
(9, '化妆品公司', 105, 96),
(10, '豪华家具厂', 118,  110),
(11, '罐装食品厂', 124, 116),
(12, '名牌提包品牌', 146, 140),
(13, '快餐连锁店',  200, 190),
(14, '汽车生产线', 267, 255),
(15, '软饮料公司', 567, 550),
(16,  '家用电器公司', 577, 560),
(17, '名牌鞋商标', 650, 630),
(18, '珠宝厂商', 784,  760),
(19, '服装市场连锁', 949, 920),
(20, '咖啡店连锁', 1237, 1200),
(21, '赛马',  2, 1),
(22, '意大利布加迪跑车', 4, 2),
(23, '美洲鸵养殖场', 4, 3),
(24, '私人动物园', 7,  5),
(25, '赛车队', 5, 1),
(26, '猎鹰', 49, 46),
(27, '喷气式飞机', 64,  60),
(28, '度假风情岛', 157, 150),
(29, '太空飞行装备', 167, 160),
(30, '搜宝队',  251, 240),
(31, '基因实验室', 743, 720),
(32, '大学城', 949, 920),
(33,  '慈善基金会', 1135, 1100),
(34, '太空探索队', 2660, 2600),
(35, '军事机器人', 4400,  4300),
(36, '国家公园', 40443, 40000),
(37, '新国家', 78763, 78000),
(38,  '太空聚居地', 262199, 260000),
(39, '油轮', 7, 5),
(40, '钢铁厂', 37, 32),
(41,  '金矿开采', 40, 35),
(42, '机械厂', 70, 65),
(43, '风力发电厂', 85, 79),
(44,  '汽车运输公司', 356, 340),
(45, '采矿场', 805, 780),
(46, '钻石开采', 1269,  1240),
(47, '医用设备', 3069, 3000),
(48, '采油厂', 4092, 4000),
(49,  '石油开采团队', 6650, 6500),
(50, '太阳能发电厂', 7161, 7000),
(51, '热气球旅行公司', 12,  8),
(52, '夜总会', 14, 10),
(53, '飞船公司', 26, 23),
(54, '广播卫星', 37,  32),
(55, '电视频道', 37, 32),
(56, '报社', 50, 46),
(57, '航空公司', 75,  70),
(58, '健身中心', 97, 90),
(59, '游乐园', 107, 100),
(60, '杂志出版社', 152,  145),
(61, '电影制片厂', 167, 160),
(62, '唱片公司', 188, 180),
(63, '电视台', 516,  500),
(64, '赌场', 536, 520),
(65, '冰球队', 598, 580),
(66, '足球队', 1135,  1100),
(67, '篮球队', 1134, 1100),
(68, '垒球队', 1432, 1400),
(69, '橄榄球队',  1637, 1600),
(70, '服务器制造厂', 14, 10),
(71, '电子宠物公司', 54, 50),
(72,  '电脑游戏公司', 107, 100),
(73, 'IT公司', 314, 300),
(74, '电子商务公司', 419,  400),
(75, '特技公司', 619, 600),
(76, '电话中心', 619, 600),
(77, '电讯网络', 826,  800),
(78, '商务软件公司', 1031, 1000),
(79, '水上别墅', 9, 6),
(80, '公寓单元楼', 86,  80),
(81, '大农场', 86, 80),
(82, '豪华宾馆', 86, 80),
(83, '豪华公寓', 108,  100),
(84, '滑雪场', 188, 180),
(85, '私人别墅', 293, 280),
(86, '综合写字楼', 433,  420),
(87, '高尔夫球场', 433, 420),
(88, '摩天大楼', 722, 700),
(89, '温室', 929,  900),
(90, '购物中心', 2046, 2000),
(91, '法拉利ENZO', 40, 10),
(92, '超级游艇',  792, 700),
(93, '圣杯', 100, 40),
(94, '兵马俑', 100, 20),
(95, '莫奈真迹', 197,  100),
(96, '英国皇宫', 338, 200),
(97, '金腰带', 105, 60),
(98, '皇冠', 310,  200),
(99, '大本钟', 40946, 40000);";

function httpRequest ($url,  $data=array(), $cookiefile="cookiefile")
{
$ch = curl_init();
curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
curl_setopt($ch,  CURLOPT_RETURNTRANSFER, TRUE);
curl_setopt($ch, CURLOPT_HEADER,  0);
curl_setopt($ch, CURLOPT_REFERER,  "http://home.kaixin.com/Home.do");
curl_setopt($ch, CURLOPT_COOKIEFILE,  $cookiefile);
curl_setopt($ch, CURLOPT_COOKIEJAR, $cookiefile);
curl_setopt($ch, CURLOPT_URL, $url);

if(!empty($data))
{
curl_setopt ($ch, CURLOPT_POST, 1);
curl_setopt ($ch,  CURLOPT_POSTFIELDS, http_build_query($data));
}

$result =  curl_exec($ch);
curl_close($ch);

return  $result;
}

function login ($cookie="cookiefile")
{
global  $config;

$data = array(
'email' =&gt;  $config['user']['email'],
'password' =&gt;  $config['user']['password'],
'origURL' =&gt;  'http://www.kaixin.com/SysHome.do',
);

httpRequest($config['login_url'],$data, $cookie);

return  $cookie;
}

function getProductInfo ($cookie =  "cookiefile")
{
global $config;

$product_url =  $config['product_url'];
$productTotalPage = 7;

for($i=1;  $i&lt;=$productTotalPage; $i++)
{
$request_url[] =  sprintf($product_url, $i);
}

$product = array();

foreach($request_url as $url)
{
$response =  httpRequest($url,array(), $cookie);

$pattern = '#&lt;input  type="hidden" name="product_id" value="(\d+)"\/&gt;#i';
preg_match_all($pattern, $response, $product_id);

$pattern =  '#&lt;input type="hidden" name="buy_price" value="(\d+)"/&gt;#';
preg_match_all($pattern, $response, $buy_price);

$pattern =  '#&lt;input type="hidden" name="count" value="(\d+)"/&gt;#';
preg_match_all($pattern, $response, $buy_count);

$pattern =  '#&lt;dt title=".*?"&gt;(.*?)&lt;/dt&gt;#';
preg_match_all($pattern, $response, $buy_name);

foreach($buy_name[1] as $key =&gt; $name)
{
$product[$product_id[1][$key]] = array (
'name' =&gt;  $name,
'id'    =&gt; $product_id[1][$key],
'price' =&gt; $buy_price[1][$key],
'count' =&gt;  $buy_count[1][$key],
);
}
}

return  $product;
}

function getDbLink ()
{
global $link;
global $config;

if($link == null)
{
$link = new  Mysqli($config['db']['host'], $config['db']['user'], $config['db']['pw'],  $config['db']['db']);
$link-&gt;query('set Names utf8');
}

return $link;
}

function initDB ()
{
global  $table_sql;
global $data_sql;
$link = getDbLink();
$return  = $link-&gt;query($table_sql);
$return &amp;=  $link-&gt;query($data_sql);
return $return;
}

function  getInterestInfo ($mint=false)
{
global $config;

$link =  getDbLink();
if($mint)
{
$sql = "SELECT product_id,  (max_price - min_price) as interest_rate , name, max_price , min_price FROM `p`  group by product_id order by   interest_rate desc limit " .  $config['interest_limit'];
} else {
$sql = "SELECT product_id,  (max_price - min_price) / min_price as interest_rate , name, max_price ,  min_price FROM `p` group by product_id order by   interest_rate desc limit " .  $config['interest_limit'];
}
$stmt = $link-&gt;query($sql);
if($link-&gt;errno == 1146)
{
initDB();
$stmt =  $link-&gt;query($sql);
}

$return = array();

while($row = $stmt-&gt;fetch_assoc())
{
$return[$row['product_id']] = $row;
}

return  $return;
}

function updatePrice ($product_id, $price,  $max=false)
{
$link = getDbLink();
$sql = 'UPDATE P set  ';

if($max)
{
$sql .= '`max_price` = ' .  $price;
} else {
$sql .= '`min_price` = ' . $price;
}

$sql .= ' where product_id =' . $product_id;

return  $link-&gt;query($sql);
}

function sellProduct ($product_id, $pid,  $price)
{
global $config;

$url =  $config['sell_url'];

$data = array(
'confirm'       =&gt;  'true',
'pid'           =&gt; $pid,
'product_id'    =&gt;  $product_id,
'sell_price'    =&gt; $price,
'is_use_item'    =&gt; 'false'
);

for($i=5; $i&gt;0; $i++)
{
$data['count'] = $i;
$return = httpRequest($url,  $data);

if(strpos($return, '成功'))
{
return $i;
}
}

return false;
}

function  buyProduct ($product_id, $price)
{
global $config;

$url =  $config['buy_url'];

$data = array (
'confirm'    =&gt;  'true',
'product_id' =&gt; $product_id,
'buy_price' =&gt;  $price,
);

for($i=5; $i&gt;0; $i--)
{
$data['count'] = $i;
$return = httpRequest($url, $data);
if(strpos($return, '成功'))
{
return $i;
}
}
return false;
}

function getMyProduct ()
{
global $config;

$my_url = array (
sprintf($config['my_usual_url'], $config['app_id']),
sprintf($config['my_unusual_url'], $config['app_id']),
);

foreach($my_url as $url)
{
$response =  httpRequest($url);

$pattern = '#&lt;input type="hidden"  name="product_id" value="(\d+)"\/&gt;#i';
preg_match_all($pattern,  $response, $product_id);

$pattern = '#&lt;input type="hidden"  name="pid" value="(\d+)"\/&gt;#i';
preg_match_all($pattern,  $response, $pid);

foreach($product_id[1] as $key =&gt;  $value)
{
$return[$value] = array('pid' =&gt;  $pid[1][$key], 'product_id' =&gt; $product_id[1][$key]);
}
}

return $return;
}

function getMyInfo()
{
global  $config;

$my_url = array (
sprintf($config['my_usual_url'], $config['app_id']),
sprintf($config['my_unusual_url'], $config['app_id']),
);

$product_count = 0;
$return = array();

foreach($my_url as  $url)
{
$response = httpRequest($url);

$pattern  = '#&lt;input type="hidden" name="product_id" value="(\d+)"\/&gt;#i';
preg_match_all($pattern, $response, $product_id);
if(!empty($product_id[0]))
{
$product_count  +=count($product_id[0]);
}

if(empty($return))  {
$pattern = '#资产总额：&lt;span  class="add-num"&gt;(.*?)&lt;/span&gt;#';
preg_match_all($pattern,  $response, $total_assets);
$return['total_assets'] =  substr(str_replace(array('万', '亿'), '',$total_assets[1][0]), 0,  -2);
$pattern = '#现金：&lt;span  class="add-num"&gt;(.*?)&lt;/span&gt;#';
preg_match_all($pattern,  $response, $cash);
$return['cash'] =  substr(str_replace(array('万', '亿'), '',$cash[1][0]), 0, -2);

$pattern = '#企业价值：&lt;span  class="add-num"&gt;(.*?)&lt;/span&gt;#';
preg_match_all($pattern,  $response, $ent_assets);
$return['ent_assets'] =  substr(str_replace(array('万', '亿'), '',$ent_assets[1][0]), 0, -2);
}
}

$return['ent_count'] = $product_count;

return  $return;
}

function Utf8toGBK ($str)
{
return  iconv("unicodebig", "gbk" ,iconv("utf-8", 'unicodebig',  $str));
}


$link   = null;
$cookie = login();
$link   =  getDbLink();
//print_r(getMyInfo());
//exit;
if(file_exists('exit')){
unlink('exit');
}

while(1)
{
if(file_exists('exit'))
{
exit;
}

$myInfo = getMyInfo();
$mint =  false;
if($myInfo['total_assets'] &gt; $config['mint_limit'])  {
$mint = true;
}

$product =  getProductInfo();
$interest = getInterestInfo($mint);
$myProduct =  getMyProduct();

foreach($interest as $product_id =&gt; $value)
{
if($product[$product_id]['price'] &lt;=  $value['min_price'])
{
if($product[$product_id]['price'] &lt; $value['min_price'])
{
updatePrice($product_id,  $product[$product_id]['price'],false);
}

$str  = $product[$product_id]['name'] . " 可买" . " 当前为历史最低价格:" .  $product[$product_id]['price'];
echo Utf8toGBK($str) .  "\n\n";

if(!array_key_exists($product_id,  $myProduct))
{
if( $r =  buyProduct($product_id, $product[$product_id]['price']))
{
echo Utf8toGBK('买入' . $product[$product_id]['name'] . '  ' . $r . '个');
echo "\n\n";
}
}
}

if($product[$product_id]['price']  &gt;= $value['max_price'])
{
if($product[$product_id]['price'] &gt; $value['max_price'])
{
updatePrice($product_id,$product[$product_id]['price']  ,true);
}

$str = $product[$product_id]['name']  . "\33 可卖" . " 当前为历史最高价格:" . $product[$product_id]['price'] ;
echo Utf8toGBK($str) . "\n\n";
}

if(array_key_exists($product_id, $myProduct))
{
if($mint)
{
$sell_cond =  ($product[$product_id]['price'] - $value['min_price']) *  $config['mint_interest_ratio'] / $value['min_price'] &gt;=  $value['interest_rate'];
} else {
$sell_cond =  ($product[$product_id]['price'] - $value['min_price']) *  $config['interest_ratio'] / $value['min_price'] &gt;=  $value['interest_rate'];
}

if($sell_cond)
{
if($r =  sellProduct($product_id, $myProduct[$product_id]['pid'],  $product[$product_id]['price']))
{
echo Utf8toGBK('卖出' . $product[$product_id]['name'] . ' ' . $r . '个')  ;
echo "\n\n";
}
}
}
}

$myInfo = getMyInfo();
echo  "\n";
echo "----------------------------------------------";
echo  "\n";
$str = '当前总资产:' . $myInfo['total_assets'] . "\n";
$str .=  '现金      :' . $myInfo['cash'] . "\n";
$str .= '企业资产 :' .  $myInfo['ent_assets'] . "\n";
echo Utf8toGBK($str);
echo  "----------------------------------------------";
echo "\n";
sleep(30);
}</div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>11</wp:post_id>
		<wp:post_date><![CDATA[2008-10-19 15:27:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-10-19 15:27:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%bc%81%e4%b8%9a%e5%a4%a7%e4%ba%a8]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641052]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>javascript取css</title>
		<link>http://blog.00rz.com/2008/10/javascript%e5%8f%96css.html</link>
		<pubDate>Wed, 08 Oct 2008 19:08:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=12</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><html><br />
  <head><br />
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>12</wp:post_id>
		<wp:post_date><![CDATA[2008-10-08 19:08:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-10-08 19:08:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[javascript%e5%8f%96css]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641053]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>嘎嘎 可以这么用阿</title>
		<link>http://blog.00rz.com/2008/09/%e5%98%8e%e5%98%8e-%e5%8f%af%e4%bb%a5%e8%bf%99%e4%b9%88%e7%94%a8%e9%98%bf.html</link>
		<pubDate>Thu, 18 Sep 2008 18:53:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=13</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  > sudo startx -- `which Xvfb` :1 -screen 0 1024x768x24 &</div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>13</wp:post_id>
		<wp:post_date><![CDATA[2008-09-18 18:53:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-09-18 18:53:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%98%8e%e5%98%8e-%e5%8f%af%e4%bb%a5%e8%bf%99%e4%b9%88%e7%94%a8%e9%98%bf]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641056]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>vim 使用技巧</title>
		<link>http://blog.00rz.com/2008/08/vim-%e4%bd%bf%e7%94%a8%e6%8a%80%e5%b7%a7.html</link>
		<pubDate>Tue, 19 Aug 2008 18:14:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=14</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><pre>url: http://blog.csdn.net/camry_camry/archive/2004/09/23/114188.aspx<br />作者: camry.wu@gmail.com<br /><br />我是 vim 粉丝, 用了许久, 有一些自己的感受, 又到处挖到一些别人的技巧. 感觉对 vim<br />粉丝比较有用, 就把它记在这儿. 希望借此文套出大家自己的巧活, 就正应了抛砖引玉的古<br />话了.<br /><br />先稍为介绍一下 vim. vi 是 unix/linux 下极为普遍的一种文本编辑器, 大部分机器上都<br />有. vi 有各种变种, 在不同的机器上常用不同的变种软件. 其中 vim 比较好用也用得比较<br />广泛. vim 是 Vi IMproved 的缩写, 表示更好的 vi. 我个人觉得它是非常好的编辑器(为<br />了避免 Emacs 粉丝挑眼, 就不说最好了). 没用过的也建议试试看, 当然 vim 对编写文本<br />文件很方便好用, 比如编写程序, html文档等等, 却不能用来编写 word 文档.<br /><br />关于 vim 的安装, 基本使用方法等网络上能搜出许多, 就不在这里罗嗦了, 要是对 vim 有<br />兴趣, 那就看看这里(中文文档): <a href="http://vcd.gro.clinux.org/">http://vcd.gro.clinux.org/</a><br /><br />本文就说些其中比较有用, 比较常用的命令, 若能熟练运用这些命令, 那么会发现编辑文件<br />很舒服.<br /><br />说明:<br />以下的例子中 xxx 表示在命令模式下输入 xxx 并回车<br />以下的例子中 :xxx 表示在扩展模式下输入 xxx 并回车<br />小括号中的命令表示相关命令.<br />在编辑模式或可视模式下输入的命令会另外注明.<br /><br />1. 查找<br /><br />  /xxx(?xxx)      表示在整篇文档中搜索匹配xxx的字符串, / 表示向下查找, ? 表示<br />                  向上查找.其中xxx可以是正规表达式,关于正规式就不多说了.<br />                  一般来说是区分大小写的, 要想不区分大小写, 那得先输入<br />                  :set ignorecase<br />                  查找到以后, 再输入 n 查找下一个匹配处, 输入 N 反方向查找.<br /><br />  *(#)            当光标停留在某个单词上时, 输入这条命令表示查找与该单词匹配的<br />                  下(上)一个单词. 同样, 再输入 n 查找下一个匹配处, 输入 N 反方<br />                  向查找.<br /><br />  g*(g#)          此命令与上条命令相似, 只不过它不完全匹配光标所在处的单词, 而<br />                  是匹配包含该单词的所有字符串.<br /><br />  gd              本命令查找与光标所在单词相匹配的单词, 并将光标停留在文档的非<br />                  注释段中第一次出现这个单词的地方.<br /><br />  %               本命令查找与光标所在处相匹配的反括号, 包括 () [] {}<br /><br />  f(F)x           本命令表示在光标所在行进行查找, 查找光标右(左)方第一个x字符.<br />                  找到后:<br />                  输入 ; 表示继续往下找<br />                  输入 , 表示反方向查找<br /><br />2. 快速移动光标<br />   在 vi 中, 移动光标和编辑是两件事, 正因为区分开来, 所以可以很方便的进行光标定<br />位和编辑. 因此能更快一点移动光标是很有用的.<br /><br />  w(e)            移动光标到下一个单词.<br />  b               移动光标到上一个单词.<br /><br />  0               移动光标到本行最开头.<br />  ^               移动光标到本行最开头的字符处.<br />  $               移动光标到本行结尾处.<br /><br />  H               移动光标到屏幕的首行.<br />  M               移动光标到屏幕的中间一行.<br />  L               移动光标到屏幕的尾行.<br />  gg              移动光标到文档首行.<br />  G               移动光标到文档尾行.<br />  c-f             (即 ctrl 键与 f 键一同按下) 本命令即 page down.<br />  c-b             (即 ctrl 键与 b 键一同按下, 后同) 本命令即 page up.<br /><br />  ''              此命令相当有用, 它移动光标到上一个标记处, 比如用 gd, * 等查<br />                  找到某个单词后, 再输入此命令则回到上次停留的位置.<br /><br />  '.              此命令相当好使, 它移动光标到上一次的修改行.<br /><br />  `.              此命令相当强大, 它移动光标到上一次的修改点.<br /><br />3. 拷贝, 删除与粘贴<br />   在 vi 中 y 表示拷贝, d 表示删除, p 表示粘贴. 其中拷贝与删除是与光标移动命令<br />结合的, 看几个例子就能够明白了.<br /><br />  yw              表示拷贝从当前光标到光标所在单词结尾的内容.<br />  dw              表示删除从当前光标到光标所在单词结尾的内容.<br />  y0              表示拷贝从当前光标到光标所在行首的内容.<br />  d0              表示删除从当前光标到光标所在行首的内容.<br />  y$              表示拷贝从当前光标到光标所在行尾的内容.<br />  d$              表示删除从当前光标到光标所在行尾的内容.<br />  yfa             表示拷贝从当前光标到光标后面的第一个a字符之间的内容.<br />  dfa             表示删除从当前光标到光标后面的第一个a字符之间的内容.<br /><br />  特殊地:<br />  yy              表示拷贝光标所在行.<br />  dd              表示删除光标所在行.<br />  D               表示删除从当前光标到光标所在行尾的内容.<br /><br />  关于拷贝, 删除和粘贴的复杂用法与寄存器有关, 可以自行查询.<br /><br />4. 数字与命令<br />   在 vi 中数字与命令结合往往表示重复进行此命令, 若在扩展模式的开头出现则表示行<br />号定位. 如:<br /><br />  5fx             表示查找光标后第 5 个 x 字符.<br /><br />  5w(e)           移动光标到下五个单词.<br /><br />  5yy             表示拷贝光标以下 5 行.<br />  5dd             表示删除光标以下 5 行.<br /><br />  y2fa            表示拷贝从当前光标到光标后面的第二个a字符之间的内容.<br /><br />  :12,24y         表示拷贝第12行到第24行之间的内容.<br />  :12,y           表示拷贝第12行到光标所在行之间的内容.<br />  :,24y           表示拷贝光标所在行到第24行之间的内容. 删除类似.<br /><br />5. 快速输入字符<br />   在 vi 中, 不要求你输入每一个字符, 可以有很多种方法快速输入一些字符.<br />   使用 linux/unix 的同学一定有一个经验, 在命令行下输入命令时敲入头几个字符再按<br />TAB 系统就会自动将剩下的字符补齐, 假如有多个匹配则会打印出来. 这就是著名的命令<br />补齐(其实windows中也有文件名补齐功能). vi 中有许多的字符串补齐命令, 非常方便.<br /><br />  c-p(c-n)        在编辑模式中, 输入几个字符后再输入此命令则 vi 开始向上(下)搜<br />                  索开头与其匹配的单词并补齐, 不断输入此命令则循环查找. 此命令<br />                  会在所有在这个 vim 程序中打开的文件中进行匹配.<br /><br />  c-x-l           在编辑模式中, 此命令快速补齐整行内容, 但是仅在本窗口中出现的<br />                  文档中进行匹配.<br /><br />  c-x-f           在编辑模式中, 这个命令表示补齐文件名. 如输入:<br />                  /usr/local/tom 后再输入此命令则它会自动匹配出:<br />                  /usr/local/tomcat/<br /><br />  abbr            即缩写. 这是一个宏操作, 可以在编辑模式中用一个缩写代替另一个<br />                  字符串. 比如编写java文件的常常输入 System.out.println, 这很<br />                  是麻烦, 所以应该用缩写来减少敲字. 可以这么做:<br />                  :abbr sprt System.out.println<br />                  以后在输入sprt后再输入其他非字母符号, 它就会自动扩展为System.<br />                  out.println<br /><br />6. 替换<br />   替换是 vi 的强项, 因为可以用正规表达式来匹配字符串.以下提供几个例子.<br /><br />  :s/aa/bb/g      将光标所在行出现的所有包含 aa 的字符串中的 aa 替换为 bb<br />  :s/\<aa\>/bb/g  将光标所在行出现的所有 aa 替换为 bb, 仅替换 aa 这个单词<br />  :%s/aa/bb/g     将文档中出现的所有包含 aa 的字符串中的 aa 替换为 bb<br />  :12,23s/aa/bb/g 将从12行到23行中出现的所有包含 aa 的字符串中的 aa 替换为 bb<br />  :12,23s/^/#/    将从12行到23行的行首加入 # 字符<br />  :%s= *$==       将所有行尾多余的空格删除<br />  :g/^\s*$/d       将所有不包含字符(空格也不包含)的空行删除.<br /><br />7. 多文件编辑<br />   在一个 vim 程序中打开很多文件进行编辑是挺方便的.<br /><br />  :sp(:vsp) 文件名    vim 将分割出一个横(纵)向窗口, 并在该窗口中打开新文件.<br />                      从 vim6.0 开始, 文件名可以是一个目录的名称, 这样, vim 会<br />                      把该目录打开并显示文件列表, 在文件名上按回车则在本窗口打<br />                      开该文件, 若输入 O 则在新窗口中打开该文件, 输入 ? 可以看<br />                      到帮助信息.<br /><br />  :e 文件名           vim 将在原窗口中打开新的文件, 若旧文件编辑过, 会要求保存.<br /><br />  c-w-w               vim 分割了好几个窗口怎么办? 输入此命令可以将光标循环定位<br />                      到各个窗口之中.<br /><br />  :ls                 此命令查看本 vim 程序已经打开了多少个文件, 在屏幕的最下方<br />                      会显示出如下数据:<br />                      1   %a      "usevim.html"         行 162<br />                      2   #       "xxxxxx.html"         行 0<br /><br />                      其中:<br />                      1               表示打开的文件序号, 这个序号很有用处.<br />                      %a              表示文件代号, % 表示当前编辑的文件,<br />                                      # 表示上次编辑的文件<br />                      "usevim.html"   表示文件名.<br />                      行 162          表示光标位置.<br /><br />  :b 序号(代号)       此命令将指定序号(代号)的文件在本窗口打开, 其中的序号(代号)<br />                      就是用 :ls 命令看到的.<br /><br />  :set diff           此命令用于比较两个文件, 可以用<br />                      :vsp filename<br />                      命令打开另一个文件, 然后在每个文件窗口中输入此命令,就能看<br />                      到效果了.<br /><br />8. 宏替换<br />   vi 不仅可以用 abbr 来替换文字, 也可以进行命令的宏定义. 有些命令输起来很费劲,<br />因此我把它们定义到 <f1>-<f12> 上, 这样就很方便了.这些配置可以预先写到 ~/.vimrc<br />(windows 下为 $VIM/_vimrc) 中, 写进去的时候不用写前面的冒号.<br /><br />  :nmap <f2> :nohls<cr>              取消被搜索字串的高亮<br />  :nmap <f9> <c-W>w                  命令模式下转移光标到不同窗口<br />  :imap <f9> <esc><f9>               输入模式下运行<f9><br />  :nmap <f12> :%s= *$==<cr>          删除所有行尾多余的空格.<br />  :imap <f12> <esc><f12>             同上<br /><br />  :java 中: (注, 这里为什么说 java 中, 因为以下定义对其他文件格式不起作用, 下文<br />            会说到如何实现这一点)<br />  :nmap <f3> :comp javac<cr>:mak -d . %<cr><br />       此命令用 javac 编译 java 文件, 它会自动将光标定位到出错点. 不过这需要定<br />       义一个 javac.vim 文件在 $VIM/compiler 下, 在 javac.vim 里面只有两行字:<br />          setlocal makeprg=javac<br />          setlocal errorformat=%A%f:%l:\ %m,%-Z%p^,%-C%.%#<br /><br />  :nmap <f4> :comp ant<cr>:mak<cr><br />       此命令用 ant 编译 java 文件, 它会自动将光标定位到出错点. 一般来说, 安装<br />       vim 后已经有了compiler/ant.vim文件, 因此这个命令可以直接使用. 但是需要<br />       在当前目录下有 build.xml 文件, 当然还必须安装 ant 才行.<br /><br />  :nmap <f5> :cl<cr>                 此命令用于查看所有的编译错误.<br />  :imap <f5> <esc><f5><br /><br />  :nmap <f6> :cc<cr>                 此命令用于查看当前的编译错误.<br />  :imap <f6> <esc><f6><br /><br />  :nmap <f7> :cn<cr>                 此命令用于跳到下一个出错位置.<br />  :imap <f7> <esc><f7><br /><br />  :nmap <f8> :cp<cr>                 此命令用于跳到上一个出错位置.<br />  :imap <f8> <esc><f8><br /><br />  :nmap <f11> :JavaBrowser<cr><br />       此命令用于在窗口左部分割出一个新窗口, 里面的内容是 java 的资源树, 包括<br />       本文件中出现的类, 类的成员变量及成员方法, 就好像 JCreator 表现的那样.<br />       在这个窗口中输入 ? 会看到帮助. 嘿嘿, 很好用, 不过需要 ctags 支持.<br />  :imap <f11> <esc><f11><br /><br />9. TAB<br />   TAB 就是制表符, 单独拿出来做一节是因为这个东西确实很有用.<br /><br />   <<                  输入此命令则光标所在行向左移动一个 tab.<br />   >>                  输入此命令则光标所在行向右移动一个 tab.<br />   5>>                 输入此命令则光标后 5 行向右移动一个 tab.<br />   :12,24>             此命令将12行到14行的数据都向右移动一个 tab.<br />   :12,24>>            此命令将12行到14行的数据都向右移动两个 tab.<br /><br />   那么如何定义 tab 的大小呢? 有人愿意使用 8 个空格位, 有人用4个, 有的用2个.<br />   有的人希望 tab 完全用空格代替, 也有的人希望 tab 就是 tab. 没关系, vim 能<br />   帮助你.以下的设置一般也都先写入配置文件中, 免得老敲.<br /><br />   :set shiftwidth=4   设置自动缩进 4 个空格, 当然要设自动缩进先.<br />   :set sts=4          即设置 softtabstop 为 4. 输入 tab 后就跳了 4 格.<br />   :set tabstop=4      实际的 tab 即为 4 个空格, 而不是缺省的 8 个.<br />   :set expandtab      在输入 tab 后, vim 用恰当的空格来填充这个 tab.<br /><br />10. autocmd<br />    这个命令十分的强大, 可以用这个命令实现对不同的文件格式应用不同的配置; 可以<br />在新建文件时自动添加上版权声明等等. 这些命令一般定义在 ~/.vimrc 这样的配置文件<br />里面. 由于他很强大, 所以我不能给出很具体的说明, 只能举几个例子, 详细的请看帮助.<br /><br />  :autocmd!               删除所有之前的自动命令.<br />  autocmd FileType        java  source ~/.vim/files/java.vim<br />  autocmd FileType        java  source ~/.vim/files/jcommenter.vim<br />    以上两条命令让我在打开 java 文件时才应用后面提到的两个配置文件.<br />  autocmd BufNewFile      *.java  0r ~/.vim/files/skeletons/java.skel<br />    以上这条命令让我在新建 java 文件时自动加入 java.skel 文件的内容.<br />  autocmd BufNewFile      *.java  normal gnp<br />    以上这条命令让我在新建 java 文件时自动运行 gnp 命令, 这个命令进行一些特殊化<br />    处理, 比如将新 java 文件中的 __date__ 替换成今天的日期什么的.<br /><br />11. 常用脚本<br />    在 vim.sf.net 你可以发现很多脚本(script), 这些脚本常常有让你意想不到的作用.<br />我常用的有:<br /><br />    jcommenter.vim        自动加入 javadoc 风格的注释.<br />    JBrowser.vim          类资源浏览. C, C++ 等可以用 Tlist<br /><br />    还有许多有用的, 比如 checkstyle.vim 可以检验你的编程风格, jad.vim 可以直接<br />    反编译 .class 文件等等.<br /><br />12. 常用配置<br />    在~/.vimrc 配置文件中你常常需要一些个性化配置. 比如上面写的一些宏定义, 一些<br />autocmd 定义等等. 比如:<br /><br />    set suffixes=.bak,~,.o,.h,.info,.swp,.aux,.bbl,.blg,.dvi,.lof,.log,.lot,.ps,.toc<br />        这样在vim中打开文件时, 按 tab 键补齐文件名时它会忽略上述文件.<br /><br />    set nu          显示行号<br />    set ai          设置自动缩进<br />    map Y y$        让 Y 和 D 一样, 要不然 Y 的本意和 yy 一样.<br /><br />13. 其他<br />    还有许多有意思的命令, 记录在这里免得忘记.<br /><br />    .                                               重复上次编辑命令.<br />    :g/^/exec "s/^/".strpart(line(".")." ", 0, 4)   在行首插入行号<br />    :runtime! syntax/2html.vim                      转换 txt 成 html, 会按照你的<br />                                                    颜色配置来转</pre></div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>14</wp:post_id>
		<wp:post_date><![CDATA[2008-08-19 18:14:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-08-19 18:14:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[vim-%e4%bd%bf%e7%94%a8%e6%8a%80%e5%b7%a7]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641057]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>C语言头文件的使用    ——by janders</title>
		<link>http://blog.00rz.com/2008/07/c%e8%af%ad%e8%a8%80%e5%a4%b4%e6%96%87%e4%bb%b6%e7%9a%84%e4%bd%bf%e7%94%a8-%e2%80%94%e2%80%94by-janders.html</link>
		<pubDate>Wed, 23 Jul 2008 10:20:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=15</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  >C语言头文件的使用<br />
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>15</wp:post_id>
		<wp:post_date><![CDATA[2008-07-23 10:20:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-07-23 10:20:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[c%e8%af%ad%e8%a8%80%e5%a4%b4%e6%96%87%e4%bb%b6%e7%9a%84%e4%bd%bf%e7%94%a8-%e2%80%94%e2%80%94by-janders]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[7578621310]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>sql</title>
		<link>http://blog.00rz.com/2008/07/sql.html</link>
		<pubDate>Fri, 18 Jul 2008 14:21:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=16</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  >SELECT i.id, i.type_id, i.uid, i.vote_num, i.caption, i.pic, i.content, i.cate_id, i.attribute_id, i.begin_date, i.keyes, i.sort_id, i.status, e.id AS e_id, e.send_uid, e.receipt_uid, e.status AS e_status]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>16</wp:post_id>
		<wp:post_date><![CDATA[2008-07-18 14:21:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-07-18 14:21:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sql]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>ab</title>
		<link>http://blog.00rz.com/2008/06/ab.html</link>
		<pubDate>Mon, 30 Jun 2008 19:01:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=17</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p>这个表示同时处理100个请求并运行1000次index.php文件。以下是打印出来的内容。<br />
This is ApacheBench, Version 2.0.41-dev <$Revision: 1.121.2.12 $> apache-2.0<br />
Copyright (c) 1996 Adam Twiss, Zeus Technology Ltd, <a href="http://www.zeustech.net/"><span style="color: #0000ff">http://www.zeustech.net/</span></a><br />
Copyright (c) 1998-2002 The Apache Software Foundation, <a href="http://www.apache.org/"><span style="color: #0000ff">http://www.apache.org/</span></a></p>
<p>Benchmarking 127.0.0.1 (be patient)<br />
Completed 100 requests<br />
Completed 200 requests<br />
Completed 300 requests<br />
Completed 400 requests<br />
Completed 500 requests<br />
Completed 600 requests<br />
Completed 700 requests<br />
Completed 800 requests<br />
Completed 900 requests<br />
Finished 1000 requests<br />
Server Software:]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>17</wp:post_id>
		<wp:post_date><![CDATA[2008-06-30 19:01:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-06-30 19:01:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[ab]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641063]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>http协议摘抄</title>
		<link>http://blog.00rz.com/2008/03/http%e5%8d%8f%e8%ae%ae%e6%91%98%e6%8a%84.html</link>
		<pubDate>Fri, 14 Mar 2008 17:11:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=18</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p>Informational 1xx<br />
Successful 2xx<br />
Redirection 3xx<br />
Client Error 4xx<br />
Server Error 5xx</p>
<p>关于GET方法的限制<br />
rfc2616</p>
<p>The HTTP protocol does not place any a priori limit on the length of<br />
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>18</wp:post_id>
		<wp:post_date><![CDATA[2008-03-14 17:11:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-03-14 17:11:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[http%e5%8d%8f%e8%ae%ae%e6%91%98%e6%8a%84]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641069]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>关于swfupload的认证</title>
		<link>http://blog.00rz.com/2008/03/%e5%85%b3%e4%ba%8eswfupload%e7%9a%84%e8%ae%a4%e8%af%81.html</link>
		<pubDate>Thu, 06 Mar 2008 14:07:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=19</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p>flash9 的filereference.upload 方法 传的不是正确的cookie</p>
<p>先只能]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>19</wp:post_id>
		<wp:post_date><![CDATA[2008-03-06 14:07:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-03-06 14:07:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%85%b3%e4%ba%8eswfupload%e7%9a%84%e8%ae%a4%e8%af%81]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>一个简单的php mysql 类</title>
		<link>http://blog.00rz.com/2008/01/%e4%b8%80%e4%b8%aa%e7%ae%80%e5%8d%95%e7%9a%84php-mysql-%e7%b1%bb.html</link>
		<pubDate>Mon, 21 Jan 2008 20:09:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=20</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p>下午写了一个测试 手头没有公司的代码 就自己写了一个， 感觉就是能用 没有发现优点</p>
<p>先放到这里以后改改</p>
<p><?php</p>
<p><br />
class Mysql{<br />
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>20</wp:post_id>
		<wp:post_date><![CDATA[2008-01-21 20:09:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-01-21 20:09:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%b8%80%e4%b8%aa%e7%ae%80%e5%8d%95%e7%9a%84php-mysql-%e7%b1%bb]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>php 里面 的language struct</title>
		<link>http://blog.00rz.com/2008/01/php-%e9%87%8c%e9%9d%a2-%e7%9a%84language-struct.html</link>
		<pubDate>Fri, 18 Jan 2008 13:37:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=21</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p>变量函数不能用于语言结构，例如 <a href="mk:@MSITStore:C: Documents%20and%20Settings zhangjiayin 桌面 php_manual_zh.chm::/function.echo.html"><strong>echo()</strong></a>，<a href="mk:@MSITStore:C: Documents%20and%20Settings zhangjiayin 桌面 php_manual_zh.chm::/function.print.html"><strong>print()</strong></a>，<a href="mk:@MSITStore:C: Documents%20and%20Settings zhangjiayin 桌面 php_manual_zh.chm::/function.unset.html"><strong>unset()</strong></a>，<a href="mk:@MSITStore:C: Documents%20and%20Settings zhangjiayin 桌面 php_manual_zh.chm::/function.isset.html"><strong>isset()</strong></a>，<a href="mk:@MSITStore:C: Documents%20and%20Settings zhangjiayin 桌面 php_manual_zh.chm::/function.empty.html"><strong>empty()</strong></a>，<a href="mk:@MSITStore:C: Documents%20and%20Settings zhangjiayin 桌面 php_manual_zh.chm::/function.include.html"><strong>include()</strong></a>，<a href="mk:@MSITStore:C: Documents%20and%20Settings zhangjiayin 桌面 php_manual_zh.chm::/function.require.html"><strong>require()</strong></a> 以及类似的语句。需要使用自己的外壳函数来将这些结构用作变量函数。</p>
<p>还有 就是 就是有一个误解]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>21</wp:post_id>
		<wp:post_date><![CDATA[2008-01-18 13:37:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-01-18 13:37:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[php-%e9%87%8c%e9%9d%a2-%e7%9a%84language-struct]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>关于 php mysql扩展</title>
		<link>http://blog.00rz.com/2008/01/%e5%85%b3%e4%ba%8e-php-mysql%e6%89%a9%e5%b1%95.html</link>
		<pubDate>Thu, 17 Jan 2008 10:46:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=22</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p>关于 php 里 myqsl 库 函数</p>
<p>在进行 mysql_connect()的时候 如果 host username password 相同  连接 默认为 统一个引用  除非 指定 mysql_connect的 第四个参数 <span class="funcparamtype">bool</span> <span class="funcparamname">new_link</span>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>22</wp:post_id>
		<wp:post_date><![CDATA[2008-01-17 10:46:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-01-17 10:46:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%85%b3%e4%ba%8e-php-mysql%e6%89%a9%e5%b1%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>格式化ip 然后比较</title>
		<link>http://blog.00rz.com/2008/01/%e6%a0%bc%e5%bc%8f%e5%8c%96ip-%e7%84%b6%e5%90%8e%e6%af%94%e8%be%83.html</link>
		<pubDate>Sat, 12 Jan 2008 15:21:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=23</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p>好简单的代码 我怎么没想出来呢</p>
<p>$ip = "9.1.1.1";<br />
$ip=preg_replace('/(\d+)/e','sprintf("%03d","$1")',$ip);<br />
 </p></div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>23</wp:post_id>
		<wp:post_date><![CDATA[2008-01-12 15:21:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-01-12 15:21:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%a0%bc%e5%bc%8f%e5%8c%96ip-%e7%84%b6%e5%90%8e%e6%af%94%e8%be%83]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>xiao 点 英语</title>
		<link>http://blog.00rz.com/2008/01/xiao-%e7%82%b9-%e8%8b%b1%e8%af%ad.html</link>
		<pubDate>Thu, 10 Jan 2008 11:55:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=24</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p>inherited 继承</p>
<p> </p>
<p>benefit 好处</p>
<p> niggle</p>
<div class="pexplain">1. 为琐事费时</div>
<div class="pexplain">2. 拘泥小节;挑剔</div></div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>24</wp:post_id>
		<wp:post_date><![CDATA[2008-01-10 11:55:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-01-10 11:55:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xiao-%e7%82%b9-%e8%8b%b1%e8%af%ad]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>curl 有意思的东西</title>
		<link>http://blog.00rz.com/2008/01/curl-%e6%9c%89%e6%84%8f%e6%80%9d%e7%9a%84%e4%b8%9c%e8%a5%bf.html</link>
		<pubDate>Wed, 09 Jan 2008 16:17:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=25</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="blog_text" class="cnt"  ><p>C:\>curl -d "action=validate&mail=shuishui%40quan.com&password=123456" -b "cook<br />
ie" -c "cookie" "<a href="http://passport.*.com/passport.php?action=signin">http://passport.*.com/passport.php?action=signin</a>"</p>
<p>curl -F "action=upload" -F "<a href="mailto:filename=@crawl.php">filename=@crawl.php</a>" <a href="http://mysql.jy/post.php">http://mysql.jy/post.php</a></p>
<p> </p>
<p>C:\>curl  -b "c:/cookie" -F "title=titatia" -F "<a href="mailto:filename=@c:/1.mp3">filename=@c:/1.mp3</a>"  "<a href="http://upl/">http://upl</a><br />
oad.****.com/music.php"</p></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>25</wp:post_id>
		<wp:post_date><![CDATA[2008-01-09 16:17:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-01-09 16:17:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[curl-%e6%9c%89%e6%84%8f%e6%80%9d%e7%9a%84%e4%b8%9c%e8%a5%bf]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>视频爬虫</title>
		<link>http://blog.00rz.com/2008/01/%e8%a7%86%e9%a2%91%e7%88%ac%e8%99%ab.html</link>
		<pubDate>Tue, 08 Jan 2008 00:39:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=26</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  ><p><?php<br />
class Crawl{<br />
/**<br />
* @autho jiayin <br />
* @desc 简单爬虫游戏<br />
* @param $store 为了方便 爬取以后 集中存储<br />
* @method static public store() 边处理边存储<br />
**/<br />
public static $flag = true;<br />
public static $store;<br />
public static $keys = array();<br />
public static function getLink($content){<br />
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>26</wp:post_id>
		<wp:post_date><![CDATA[2008-01-08 00:39:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-01-08 00:39:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%a7%86%e9%a2%91%e7%88%ac%e8%99%ab]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>linode 的主机不错</title>
		<link>http://blog.00rz.com/2010/01/hello-world.html</link>
		<pubDate>Sat, 16 Jan 2010 00:32:03 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=1</guid>
		<description></description>
		<content:encoded><![CDATA[linode 的主机不错]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1</wp:post_id>
		<wp:post_date><![CDATA[2010-01-16 00:32:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-01-16 00:32:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hello-world]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641081]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>netstat 命令指南</title>
		<link>http://blog.00rz.com/2009/02/netstat-%e5%91%bd%e4%bb%a4%e6%8c%87%e5%8d%97.html</link>
		<pubDate>Wed, 25 Feb 2009 16:01:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=6</guid>
		<description></description>
		<content:encoded><![CDATA[<![CDATA[<div id="blog_text" class="cnt"  >http://www.cyberciti.biz/tips/netstat-command-tutorial-examples.html<br />
<br />
<br />
<p>netstat command and shell pipe feature can be used to dig out more information about particular IP address connection. You can find out total established connections, closing connection, SYN and FIN bits and much more. You can also display summary statistics for each protocol using netstat.</p>
<p>This is useful to find out if <strong>your server is under attack</strong> or not. You can also <strong>list abusive IP address</strong> using this method.<br />
<code># netstat -nat |  awk '{print $6}' | sort | uniq -c | sort -n</code><br />
Output:</p>
<pre>1 CLOSE_WAIT<br />      1 established)<br />      1 Foreign<br />      3 FIN_WAIT1<br />      3 LAST_ACK<br />     13 ESTABLISHED<br />     17 LISTEN<br />    154 FIN_WAIT2<br />    327 TIME_WAIT</pre>
<p>Dig out more information about a specific ip address:<br />
<code># netstat -nat |grep {IP-address} |  awk '{print $6}' | sort | uniq -c | sort -n</code></p>
<pre>2 LAST_ACK<br />      2 LISTEN<br />      4 FIN_WAIT1<br />     14 ESTABLISHED<br />     91 TIME_WAIT<br />    130 FIN_WAIT2</pre>
<p>Busy server can give out more information:<br />
<code># netstat -nat |grep 202.54.1.10 |  awk '{print $6}' | sort | uniq -c | sort -n</code><br />
Output:</p>
<pre>15 CLOSE_WAIT<br />  37 LAST_ACK<br />  64 FIN_WAIT_1<br />  65 FIN_WAIT_2<br />1251 TIME_WAIT<br />3597 SYN_SENT<br />5124 ESTABLISHED</pre>
<h2>Get List Of All Unique IP Address</h2>
<p>To print list of all unique IP address connected to server, enter:<br />
<code># netstat -nat | awk '{ print $5}' | cut -d: -f1 | sed -e '/^$/d' | uniq</code><br />
To print total of all unique IP address, enter:<br />
<code># netstat -nat | awk '{ print $5}' | cut -d: -f1 | sed -e '/^$/d' | uniq | wc -l</code><br />
Output:</p>
<pre>449</pre>
<h2>Find Out If Box is Under DoS Attack or Not</h2>
<p>If you think your Linux box is under attack, print out a list of open connections on your box and sorts them by according to IP address, enter:<br />
<code>#  netstat -atun | awk '{print $5}' | cut -d: -f1 | sed -e '/^$/d' |sort | uniq -c | sort -n</code><br />
Output:</p>
<pre>1 10.0.77.52<br />      2 10.1.11.3<br />      4 12.109.42.21<br />      6 12.191.136.3<br />.....<br />...<br />....<br />    13 202.155.209.202<br />     18 208.67.222.222<br />     28 0.0.0.0 <br /><br />    233 127.0.0.1</pre>
<p>You can simply block all abusive <a href="http://www.cyberciti.biz/faq/how-do-i-block-an-ip-on-my-linux-server/">IPs using iptables</a> or just <a href="http://www.cyberciti.biz/tips/how-do-i-drop-or-block-attackers-ip-with-null-routes.html">null route them</a>.</p>
<p> </p>
<pre>etc.<br /><br />转略..</pre></div>]]]]><![CDATA[>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6</wp:post_id>
		<wp:post_date><![CDATA[2009-02-25 16:01:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-02-25 16:01:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[netstat-%e5%91%bd%e4%bb%a4%e6%8c%87%e5%8d%97]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641039]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>和毛爷爷的合影</title>
		<link>http://blog.00rz.com/2010/01/%e5%92%8c%e6%af%9b%e7%88%b7%e7%88%b7%e7%9a%84%e5%90%88%e5%bd%b1.html</link>
		<pubDate>Sat, 16 Jan 2010 03:08:14 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=122</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://blog.00rz.com/blog/wp-content/uploads/2010/01/IMG_0782.gif"><img class="alignnone size-full wp-image-121" title="和毛爷爷的合影" src="" alt="和毛爷爷的合影" width="800" height="600" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>122</wp:post_id>
		<wp:post_date><![CDATA[2010-01-16 03:08:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-01-16 03:08:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%92%8c%e6%af%9b%e7%88%b7%e7%88%b7%e7%9a%84%e5%90%88%e5%bd%b1]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641085]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>wordpress的导入功能-07-09年的blog</title>
		<link>http://blog.00rz.com/2010/01/wordpress%e7%9a%84%e5%af%bc%e5%85%a5%e5%8a%9f%e8%83%bd-07-09%e5%b9%b4%e7%9a%84blog.html</link>
		<pubDate>Sat, 16 Jan 2010 03:21:30 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=128</guid>
		<description></description>
		<content:encoded><![CDATA[wordpress支持 rss 导入这个令人很欣慰， 不过把百度blog的rss导出来之后发现都是残废的文章， 囧，以前的文章就留在baidu吧
http://hi.baidu.com/_1_1_1_1/blog ， 也懒得弄]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>128</wp:post_id>
		<wp:post_date><![CDATA[2010-01-16 03:21:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-01-16 03:21:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wordpress%e7%9a%84%e5%af%bc%e5%85%a5%e5%8a%9f%e8%83%bd-07-09%e5%b9%b4%e7%9a%84blog]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="post_tag" nicename="%e5%bf%86%e5%be%80%e6%98%94"><![CDATA[忆往昔]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641086]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_56bc2ea7e84d9d53cce4a28ab9fa2bb1]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>广告</title>
		<link>http://blog.00rz.com/2010/01/%e5%b9%bf%e5%91%8a.html</link>
		<pubDate>Sat, 16 Jan 2010 04:05:23 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://blog.00rz.com/blog/?p=137</guid>
		<description></description>
		<content:encoded><![CDATA[[ad]广告代码]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>137</wp:post_id>
		<wp:post_date><![CDATA[2010-01-16 04:05:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-01-16 04:05:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%b9%bf%e5%91%8a]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641087]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>ubuntu server  安装 pptpd （vpn服务器）</title>
		<link>http://blog.00rz.com/2010/01/ubuntu-server-%e5%ae%89%e8%a3%85-pptpd-%ef%bc%88vpn%e6%9c%8d%e5%8a%a1%e5%99%a8%ef%bc%89.html</link>
		<pubDate>Mon, 18 Jan 2010 15:17:43 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/?p=144</guid>
		<description></description>
		<content:encoded><![CDATA[看了这位仁兄的 配置 自己也配置了一下
<a href="http://blog.cuoluo.cn/2009/12/install-pptp-vpn-in-linode-vps/">http://blog.cuoluo.cn/2009/12/install-pptp-vpn-in-linode-vps/</a>

1, 安装pptpd

apt-get install pptpd

2. 编辑 /etc/pptpd.conf文件

 添加 （或去掉注释，原来文件内容这两行 被注释掉了）
localip 192.168.0.1
remoteip 192.168.0.234-238,192.168.0.245

3修改/etc/ppp/chap-secrets 添加用户

格式这个文件里面有 基本上是

用户名 pptpd  密码    <em>ip(可用 *)           </em>

<em>4手动配置 登陆后的dns  编辑文件</em><em>/etc/ppp/options  添加</em>

ms-dns 8.8.8.8
ms-dns 8.8.4.4

5 开启ipv4 forward

修改 etc/sysctl.conf, 添加
<strong>net.ipv4.ip_forward = 1</strong>

运行下面的命令让配置生效。
sysctl -p
重启pptpd服务
/etc/init.d/pptpd restart
开启iptables转发
/sbin/iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o eth0 -j MASQUERADE]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>144</wp:post_id>
		<wp:post_date><![CDATA[2010-01-18 15:17:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-01-18 15:17:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[ubuntu-server-%e5%ae%89%e8%a3%85-pptpd-%ef%bc%88vpn%e6%9c%8d%e5%8a%a1%e5%99%a8%ef%bc%89]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641092]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>herding frosh 算法</title>
		<link>http://blog.00rz.com/2010/01/herding-frosh-%e7%ae%97%e6%b3%95.html</link>
		<pubDate>Tue, 19 Jan 2010 07:33:59 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/?p=147</guid>
		<description></description>
		<content:encoded><![CDATA[<pre lang="java">
package programming.challenges;
import java.util.Arrays;
/**
* Created by IntelliJ IDEA.
* User: zhangjiayin
* Date: Jan 13, 2010
* Time: 7:15:50 PM
* To change this template use File | Settings | File Templates.
*/
public class HerdingTrees {
private Tree origin = new Tree(0, 0);
/**
* get min value of a and b
* @param a
* @param b
* @return
*/
private static double min(double a, double b) {
return a > b ? b : a;
}
/**
* “vector o p1″ cross “vector o p2″
* @param o
* @param p1
* @param p2
* @return
*/
private static double cross(Tree o , Tree p1, Tree p2) {
return (p1.x – o.x) * (p2.y – o.y) – (p1.y – o.y) * (p2.x – o.x);
}
/**
*  ”vector p1″ cross “vector p2″
* @param p1
* @param p2
* @return
*/
private static double cross(Tree p1, Tree p2) {
return p1.x * p2.y – p1.y * p2.x;
}
/**
* distance of two tree p2 and p1
* @param p1
* @param p2
* @return
*/
private static double getDistance(Tree p1, Tree p2) {
return Math.sqrt(Math.pow(p1.x – p2.x, 2) + Math.pow(p1.y – p2.y, 2));
}
/**
* sort by angle in polar coordinate system
* if the angle is the same, then sort by their length
* @param p1
* @param p2
* @return
*/
public static boolean sortByAngle(Tree p1, Tree p2) {
if (p1.y == 0 && p2.y == 0 && p1.x * p2.x <= 0) return p1.x > p2.x;
if (p1.y == 0 && p1.x >= 0 && p2.y != 0) return true;
if (p2.y == 0 && p2.x >= 0 && p1.y != 0) return false;
if (p1.y * p2.y < 0) return p1.y > p2.y;
double c = cross(p1, p2);
return c > 0 || c == 0 && Math.abs(p1.x) < Math.abs(p2.x);
}
/**
*  determine if o -> p1 -> p2 are convex  (refer to the origin)
* @param o
* @param p1
* @param p2
* @return
*/
private boolean convex(Tree o, Tree p1,Tree p2) {
double c = cross(o, p1, p2);
return c > 0 || c == 0 && ((p1.x – o.x) * (p2.x – p1.x) + (p1.y – o.y) * (p2.y – p1.y)) < 0;
}
/**
* instance of this algorithm
* @param trees
* @return
*/
public double goaround(Tree[] trees) {
int[] hulls = new int[1000];
int i, j, k;
int treesCount = trees.length;
// the special case
if (treesCount == 0) {
return 2.0;
}
// sort all trees by their angle in polar coordinate system
Arrays.sort(trees);
double ans = 1e9;
// start from each possible tree
for (i=0; i<treesCount; ++i) {
// get a proper hull by the graham’s scan
k = 0;
for (j=0; j< treesCount; ++j) {
int p = (i+j) % treesCount;
while (k >= 2 && !convex(trees[hulls[k-2]], trees[hulls[k-1]], trees[p])) k–;
hulls[k++] = p;
}
// calculate the distance of the hull
double length = getDistance(trees[i], origin) + getDistance(trees[(i-1+treesCount)%treesCount], origin);
for (j=0; j<k-1; ++j)
length += getDistance(trees[hulls[j]], trees[hulls[j+1]]);
// record the minimal distance
ans = min(ans, length);
}
// print solution, don’t forget to plus 2
return 2.0 + ans;
}
public static void main(String[] argv) {
Tree [] trees =  {new Tree(1,1),new  Tree(-1,1), new Tree(-1, -1), new Tree(1,-1)};
double a = new HerdingTrees().goaround(trees);
System.out.println(a);
Tree [] trees2 =  {new Tree(1,1),new  Tree(-1,1), new Tree(-1, -1), new Tree(1,-1), new Tree(1,-20)};
double b = new HerdingTrees().goaround(trees2);
System.out.println(b);
}
}
class Tree implements Comparable<Tree> {
public double x = 0;
public double y = 0;
public Tree(int x, int y) {
this.x = x;
this.y = y;
}
public int compareTo(Tree p) {
return HerdingTrees.sortByAngle(this, p) ? 0 : 1;
}
}
package programming.challenges;
import java.util.Arrays;
/** * Created by IntelliJ IDEA. * User: zhangjiayin * Date: Jan 13, 2010 * Time: 7:15:50 PM * To change this template use File | Settings | File Templates. */public class HerdingTrees {
private Tree origin = new Tree(0, 0);    /**     * get min value of a and b     * @param a     * @param b     * @return     */    private static double min(double a, double b) {        return a > b ? b : a;    }
/**     * “vector o p1″ cross “vector o p2″     * @param o     * @param p1     * @param p2     * @return     */    private static double cross(Tree o , Tree p1, Tree p2) {        return (p1.x – o.x) * (p2.y – o.y) – (p1.y – o.y) * (p2.x – o.x);    }
/**     *  ”vector p1″ cross “vector p2″     * @param p1     * @param p2     * @return     */    private static double cross(Tree p1, Tree p2) {        return p1.x * p2.y – p1.y * p2.x;    }
/**     * distance of two tree p2 and p1     * @param p1     * @param p2     * @return     */    private static double getDistance(Tree p1, Tree p2) {        return Math.sqrt(Math.pow(p1.x – p2.x, 2) + Math.pow(p1.y – p2.y, 2));    }

/**     * sort by angle in polar coordinate system     * if the angle is the same, then sort by their length     * @param p1     * @param p2     * @return     */    public static boolean sortByAngle(Tree p1, Tree p2) {
if (p1.y == 0 && p2.y == 0 && p1.x * p2.x <= 0) return p1.x > p2.x;
if (p1.y == 0 && p1.x >= 0 && p2.y != 0) return true;
if (p2.y == 0 && p2.x >= 0 && p1.y != 0) return false;
if (p1.y * p2.y < 0) return p1.y > p2.y;
double c = cross(p1, p2);
return c > 0 || c == 0 && Math.abs(p1.x) < Math.abs(p2.x);    }
/**     *  determine if o -> p1 -> p2 are convex  (refer to the origin)     * @param o     * @param p1     * @param p2     * @return     */    private boolean convex(Tree o, Tree p1,Tree p2) {        double c = cross(o, p1, p2);        return c > 0 || c == 0 && ((p1.x – o.x) * (p2.x – p1.x) + (p1.y – o.y) * (p2.y – p1.y)) < 0;    }
/**     * instance of this algorithm     * @param trees     * @return     */    public double goaround(Tree[] trees) {
int[] hulls = new int[1000];
int i, j, k;
int treesCount = trees.length;

// the special case        if (treesCount == 0) {            return 2.0;        }

// sort all trees by their angle in polar coordinate system        Arrays.sort(trees);
double ans = 1e9;
// start from each possible tree        for (i=0; i<treesCount; ++i) {
// get a proper hull by the graham’s scan            k = 0;            for (j=0; j< treesCount; ++j) {                int p = (i+j) % treesCount;                while (k >= 2 && !convex(trees[hulls[k-2]], trees[hulls[k-1]], trees[p])) k–;                hulls[k++] = p;            }
// calculate the distance of the hull            double length = getDistance(trees[i], origin) + getDistance(trees[(i-1+treesCount)%treesCount], origin);            for (j=0; j<k-1; ++j)                length += getDistance(trees[hulls[j]], trees[hulls[j+1]]);
// record the minimal distance            ans = min(ans, length);
}
// print solution, don’t forget to plus 2
return 2.0 + ans;    }
public static void main(String[] argv) {        Tree [] trees =  {new Tree(1,1),new  Tree(-1,1), new Tree(-1, -1), new Tree(1,-1)};        double a = new HerdingTrees().goaround(trees);        System.out.println(a);
Tree [] trees2 =  {new Tree(1,1),new  Tree(-1,1), new Tree(-1, -1), new Tree(1,-1), new Tree(1,-20)};        double b = new HerdingTrees().goaround(trees2);        System.out.println(b);
}}
class Tree implements Comparable<Tree> {        public double x = 0;
public double y = 0;
public Tree(int x, int y) {        this.x = x;        this.y = y;    }
public int compareTo(Tree p) {        return HerdingTrees.sortByAngle(this, p) ? 0 : 1;

}

}
</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>147</wp:post_id>
		<wp:post_date><![CDATA[2010-01-19 07:33:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-01-19 07:33:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[herding-frosh-%e7%ae%97%e6%b3%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641094]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Twitter 更新 for 2010-01-24</title>
		<link>http://blog.00rz.com/2010/01/twitter-%e6%9b%b4%e6%96%b0-for-2010-01-24.html</link>
		<pubDate>Sun, 24 Jan 2010 08:20:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/2010/01/twitter-%e6%9b%b4%e6%96%b0-for-2010-01-24.html</guid>
		<description></description>
		<content:encoded><![CDATA[<ul class="aktt_tweet_digest">
	<li>RT @<a href="http://twitter.com/fomou" class="aktt_username">fomou</a> : RT: @dupola: 网易网友评论《CN域名数量剧减 中国拟恢复个人注册》：你叫我滚，我滚了，你叫我回来，对不起，已经滚远了。牛 <a href="http://twitter.com/zhangjiayin/statuses/7935598678" class="aktt_tweet_time">#</a></li>
	<li>RT @<a href="http://twitter.com/xdanger" class="aktt_username">xdanger</a> : RT @DashHuang: 5毛招聘启示 <a href="http://is.gd/6zmRh" rel="nofollow">http://is.gd/6zmRh</a>  经典 <a href="http://twitter.com/zhangjiayin/statuses/7935691300" class="aktt_tweet_time">#</a></li>
</ul>
<p class="aktt_credit">Powered by <a href="http://alexking.org/projects/wordpress">Twitter Tools</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>152</wp:post_id>
		<wp:post_date><![CDATA[2010-01-24 16:20:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-01-24 08:20:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[twitter-%e6%9b%b4%e6%96%b0-for-2010-01-24]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="twtteen"><![CDATA[twtteen]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641095]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>fuse-hdfs 简单测试</title>
		<link>http://blog.00rz.com/2010/02/fuse-hdfs-%e7%ae%80%e5%8d%95%e6%b5%8b%e8%af%95.html</link>
		<pubDate>Wed, 24 Feb 2010 04:01:35 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/?p=154</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="_mcePaste">
<div id="_mcePaste">这东西实验性还是很强 在编译过程中 出现很多错误，</div>
<div>最后一次忽略所有错误继续 编译 才编译过去，</div>
<div></div>
<div>读</div>
<div>time dd if=/mnt/hdfs/user/root/with_country.tsv/part-00071  of=/tmp/a.txt bs=8k count=30000</div>
<div id="_mcePaste">3603+1 records in</div>
<div id="_mcePaste">3603+1 records out</div>
<div id="_mcePaste">29519802 bytes (30 MB) copied, 2.98445 s, 9.9 MB/s</div>
<div id="_mcePaste"></div>
<div id="_mcePaste">real<span style="white-space: pre;"> </span>0m3.015s</div>
<div id="_mcePaste">user<span style="white-space: pre;"> </span>0m0.008s</div>
<div id="_mcePaste">sys<span style="white-space: pre;"> </span>0m0.104s</div>
</div>
<div></div>
<div>写</div>
<div>sudo time dd if=/dev/zero of=/mnt/hdfs/test.txt bs=8k count=3000</div>
<div>3000+0 records in</div>
<div>3000+0 records out</div>
<div>24576000 bytes (25 MB) copied, 2.98638 s, 8.2 MB/s</div>
<div>0.00user 0.08system 0:03.01elapsed 2%CPU (0avgtext+0avgdata 0maxresident)k</div>
<div>0inputs+0outputs (0major+261minor)pagefaults 0swaps</div>
<div>~$ sudo time dd if=/dev/zero of=/mnt/hdfs/test.txt bs=8k count=30000</div>
<div>30000+0 records in</div>
<div>30000+0 records out</div>
<div>245760000 bytes (246 MB) copied, 30.1176 s, 8.2 MB/s</div>
<div>0.03user 0.78system 0:30.19elapsed 2%CPU (0avgtext+0avgdata 0maxresident)k</div>
<div>0inputs+0outputs (0major+259minor)pagefaults 0swaps</div>
<div></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>154</wp:post_id>
		<wp:post_date><![CDATA[2010-02-24 12:01:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-02-24 04:01:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[fuse-hdfs-%e7%ae%80%e5%8d%95%e6%b5%8b%e8%af%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641098]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>OReilly.Hadoop.The.Definitive.Guide.June.2009.RETAiL.eBOOk-sUppLeX.pdf</title>
		<link>http://blog.00rz.com/2010/02/oreilly-hadoop-the-definitive-guide-june-2009-retail-ebook-supplex-pdf.html</link>
		<pubDate>Thu, 25 Feb 2010 05:29:49 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/?p=156</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://blog.00rz.com/wp-content/uploads/2010/02/OReilly.Hadoop.The_.Definitive.Guide_.June_.2009.RETAiL.eBOOk-sUppLeX.pdf">OReilly.Hadoop.The.Definitive.Guide.June.2009.RETAiL.eBOOk-sUppLeX</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>156</wp:post_id>
		<wp:post_date><![CDATA[2010-02-25 13:29:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-02-25 05:29:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[oreilly-hadoop-the-definitive-guide-june-2009-retail-ebook-supplex-pdf]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="hadoop"><![CDATA[hadoop]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641100]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>EBOOK Pro Hadoop</title>
		<link>http://blog.00rz.com/2010/02/ebook-pro-hadoop.html</link>
		<pubDate>Thu, 25 Feb 2010 05:37:26 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/?p=159</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://blog.00rz.com/wp-content/uploads/2010/02/Pro+Hadoop.pdf">Pro Hadoop</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>159</wp:post_id>
		<wp:post_date><![CDATA[2010-02-25 13:37:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-02-25 05:37:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[ebook-pro-hadoop]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="hadoop"><![CDATA[hadoop]]></category>
		<category domain="category" nicename="hadoop"><![CDATA[hadoop]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641104]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>hadoop0.20.1 eclipse plugin</title>
		<link>http://blog.00rz.com/2010/02/hadoop0-20-1-eclipse-plugin.html</link>
		<pubDate>Thu, 25 Feb 2010 07:33:42 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/?p=164</guid>
		<description></description>
		<content:encoded><![CDATA[http://issues.apache.org/jira/browse/MAPREDUCE-1262

src/contrib/eclipse-plugin/src/java/org/apache/hadoop/eclipse/launch/HadoopApplicationLaunchShortcut.java

@@ -32,7 +32,7 @@
-import org.eclipse.jdt.internal.debug.ui.launcher.JavaApplicationLaunchShortcut;
+import org.eclipse.jdt.debug.ui.launchConfigurations.JavaApplicationLaunchShortcut;

@@ -65,6 +65,10 @@
ILaunchConfiguration iConf =
super.findLaunchConfiguration(type, configType);

+    if(iConf == null){
+      return null;
+    }
+
ILaunchConfigurationWorkingCopy iConfWC;
try {
/*

cd  src/contrib/eclipse-plugin/

ant jar -Declipse.home=/usr/local/eclipse   ///usr/local/eclipse your eclipse home]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>164</wp:post_id>
		<wp:post_date><![CDATA[2010-02-25 15:33:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-02-25 07:33:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hadoop0-20-1-eclipse-plugin]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="hadoop"><![CDATA[hadoop]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_08a314748c858ce56018e34fb72678b9]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_a2280aa9c5480f91762888125db2e95b]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641106]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_5a64d79a88a464f17259000c87d1a035]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_ef081251b6653ab77e55ba2bbfc8e8ee]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>网站排障分析常用的命令</title>
		<link>http://blog.00rz.com/2010/02/166.html</link>
		<pubDate>Thu, 25 Feb 2010 08:23:27 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/2010/02/166.html</guid>
		<description></description>
		<content:encoded><![CDATA[http://docs.linuxtone.org/webapp/webscan.txt

好久没有发贴了，
整理一些常用分析网站的小命令方便大家排障，内容均来源于网络。
如果你是初学者关于AWK应用技巧请参照论坛的脚本编程版块，
如果你是老手，什么好的命令集或者必杀技欢迎跟贴，丰富此贴！

系统连接状态篇：
1.查看TCP连接状态
netstat -nat |awk '{print $6}'|sort|uniq -c|sort -rn

netstat -n | awk '/^tcp/ {++S[$NF]};END {for(a in S) print a, S[a]}' 或
netstat -n | awk '/^tcp/ {++state[$NF]}; END {for(key in state) print key,"\t",state[key]}'
netstat -n | awk '/^tcp/ {++arr[$NF]};END {for(k in arr) print k,"\t",arr[k]}'

netstat -n |awk '/^tcp/ {print $NF}'|sort|uniq -c|sort -rn

netstat -ant | awk '{print $NF}' | grep -v '[a-z]' | sort | uniq -c

2.查找请求数请20个IP（常用于查找攻来源）：
netstat -anlp|grep 80|grep tcp|awk '{print $5}'|awk -F: '{print $1}'|sort|uniq -c|sort -nr|head -n20

netstat -ant |awk '/:80/{split($5,ip,":");++A[ip[1]]}END{for(i in A) print A[i],i}' |sort -rn|head -n20

3.用tcpdump嗅探80端口的访问看看谁最高
tcpdump -i eth0 -tnn dst port 80 -c 1000 | awk -F"." '{print $1"."$2"."$3"."$4}' | sort | uniq -c | sort -nr |head -20

4.查找较多time_wait连接
netstat -n|grep TIME_WAIT|awk '{print $5}'|sort|uniq -c|sort -rn|head -n20

5.找查较多的SYN连接
netstat -an | grep SYN | awk '{print $5}' | awk -F: '{print $1}' | sort | uniq -c | sort -nr | more

6.根据端口列进程
netstat -ntlp | grep 80 | awk '{print $7}' | cut -d/ -f1

网站日志分析篇1（Apache）：

1.获得访问前10位的ip地址
cat access.log|awk '{print $1}'|sort|uniq -c|sort -nr|head -10
cat access.log|awk '{counts[$(11)]+=1}; END {for(url in counts) print counts[url], url}'

2.访问次数最多的文件或页面,取前20
cat access.log|awk '{print $11}'|sort|uniq -c|sort -nr|head -20

3.列出传输最大的几个exe文件（分析下载站的时候常用）
cat access.log |awk '($7~/\.exe/){print $10 " " $1 " " $4 " " $7}'|sort -nr|head -20

4.列出输出大于200000byte(约200kb)的exe文件以及对应文件发生次数
cat access.log |awk '($10 &gt; 200000 &amp;&amp; $7~/\.exe/){print $7}'|sort -n|uniq -c|sort -nr|head -100

5.如果日志最后一列记录的是页面文件传输时间，则有列出到客户端最耗时的页面
cat access.log |awk  '($7~/\.php/){print $NF " " $1 " " $4 " " $7}'|sort -nr|head -100

6.列出最最耗时的页面(超过60秒的)的以及对应页面发生次数
cat access.log |awk '($NF &gt; 60 &amp;&amp; $7~/\.php/){print $7}'|sort -n|uniq -c|sort -nr|head -100

7.列出传输时间超过 30 秒的文件
cat access.log |awk '($NF &gt; 30){print $7}'|sort -n|uniq -c|sort -nr|head -20

8.统计网站流量（G)
cat access.log |awk '{sum+=$10} END {print sum/1024/1024/1024}'

9.统计404的连接
awk '($9 ~/404/)' access.log | awk '{print $9,$7}' | sort

10. 统计http status.
cat access.log |awk '{counts[$(9)]+=1}; END {for(code in counts) print code, counts[code]}'
cat access.log |awk '{print $9}'|sort|uniq -c|sort -rn

10.蜘蛛分析
查看是哪些蜘蛛在抓取内容。
/usr/sbin/tcpdump -i eth0 -l -s 0 -w - dst port 80 | strings | grep -i user-agent | grep -i -E 'bot|crawler|slurp|spider'

网站日分析2(Squid篇）

2.按域统计流量
zcat squid_access.log.tar.gz| awk '{print $10,$7}' |awk 'BEGIN{FS="[ /]"}{trfc[$4]+=$1}END{for(domain in trfc){printf "%s\t%d\n",domain,trfc[domain]}}'

效率更高的perl版本请到此下载:http://docs.linuxtone.org/soft/tools/tr.pl

数据库篇
1.查看数据库执行的sql
/usr/sbin/tcpdump -i eth0 -s 0 -l -w - dst port 3306 | strings | egrep -i 'SELECT|UPDATE|DELETE|INSERT|SET|COMMIT|ROLLBACK|CREATE|DROP|ALTER|CALL'

系统Debug分析篇

1.调试命令
strace -p pid

2.跟踪指定进程的PID
gdb -p pid

更多的请参考：
http://bbs.linuxtone.org/forum-14-1.html]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>166</wp:post_id>
		<wp:post_date><![CDATA[2010-02-25 16:23:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-02-25 08:23:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[166]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_bdba7128ad623a1525dc6a733a5d99e4]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_e50ccedaad4f94bcde3f08646f07d0c2]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_bb9d2a3b0dec8102993a8efda8435f01]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_a3101e9790fd870076bce70379c9ba5f]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_7c61c14dab7533049a938fb19de037b5]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_7ea2cb9e11d5a1af59d97b7b69d4644c]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641105]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_c1e2964633f338934751714846c4c1fa]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_4dafdfc15c8730f508abe723d554c683]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title> static hostname to   special module  -zend framework</title>
		<link>http://blog.00rz.com/2010/02/static-hostname-to-special-module-zend-frameword.html</link>
		<pubDate>Fri, 26 Feb 2010 08:36:47 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/?p=170</guid>
		<description></description>
		<content:encoded><![CDATA[麻烦的zend                 tnnd 手册也不全
'sso' =&gt; array(
'type' =&gt; 'Zend_Controller_Router_Route_Hostname',
'route' =&gt; 'sso.xxxxxx.com',
'defaults' =&gt; array(
'module' =&gt; 'sso',
'controller'=&gt;'index',
'action'=&gt; 'index'
),

'chains' =&gt;  array(
array(
'type'=&gt;'Zend_Controller_Router_Route',
'route'=&gt;':controller/:action',
'defaults' =&gt; array(
'module'     =&gt; 'sso',
'controller' =&gt; 'index',
'action'     =&gt; 'index'
)
)
)
)

大概是这么写的]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>170</wp:post_id>
		<wp:post_date><![CDATA[2010-02-26 16:36:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-02-26 08:36:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[static-hostname-to-special-module-zend-frameword]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[php]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641110]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Twitter 更新 for 2010-02-28</title>
		<link>http://blog.00rz.com/2010/02/twitter-%e6%9b%b4%e6%96%b0-for-2010-02-28.html</link>
		<pubDate>Sun, 28 Feb 2010 08:20:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/2010/02/twitter-%e6%9b%b4%e6%96%b0-for-2010-02-28.html</guid>
		<description></description>
		<content:encoded><![CDATA[<ul class="aktt_tweet_digest">
	<li>为啥我点的链接都是被墙了！ <a href="http://twitter.com/zhangjiayin/statuses/9531452495" class="aktt_tweet_time">#</a></li>
	<li>vpn 上网比平时上网都快！ <a href="http://twitter.com/zhangjiayin/statuses/9671738759" class="aktt_tweet_time">#</a></li>
</ul>
<p class="aktt_credit">Powered by <a href="http://alexking.org/projects/wordpress">Twitter Tools</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>175</wp:post_id>
		<wp:post_date><![CDATA[2010-02-28 16:20:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-02-28 08:20:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[twitter-%e6%9b%b4%e6%96%b0-for-2010-02-28]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="twtteen"><![CDATA[twtteen]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641115]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>在手册上看到这么一条 关于curl 的东西</title>
		<link>http://blog.00rz.com/2010/03/%e5%9c%a8%e6%89%8b%e5%86%8c%e4%b8%8a%e7%9c%8b%e5%88%b0%e8%bf%99%e4%b9%88%e4%b8%80%e6%9d%a1-%e5%85%b3%e4%ba%8ecurl-%e7%9a%84%e4%b8%9c%e8%a5%bf.html</link>
		<pubDate>Wed, 03 Mar 2010 10:00:10 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/2010/03/%e5%9c%a8%e6%89%8b%e5%86%8c%e4%b8%8a%e7%9c%8b%e5%88%b0%e8%bf%99%e4%b9%88%e4%b8%80%e6%9d%a1-%e5%85%b3%e4%ba%8ecurl-%e7%9a%84%e4%b8%9c%e8%a5%bf.html</guid>
		<description></description>
		<content:encoded><![CDATA[Note: Passing an array to CURLOPT_POSTFIELDS will encode the data as multipart/form-data, while passing a URL-encoded string will encode the data as application/x-www-form-urlencoded. ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>177</wp:post_id>
		<wp:post_date><![CDATA[2010-03-03 18:00:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-03-03 10:00:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%9c%a8%e6%89%8b%e5%86%8c%e4%b8%8a%e7%9c%8b%e5%88%b0%e8%bf%99%e4%b9%88%e4%b8%80%e6%9d%a1-%e5%85%b3%e4%ba%8ecurl-%e7%9a%84%e4%b8%9c%e8%a5%bf]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641116]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>twitter 代理</title>
		<link>http://blog.00rz.com/2010/03/twitter-%e4%bb%a3%e7%90%86.html</link>
		<pubDate>Fri, 05 Mar 2010 12:33:06 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/?p=180</guid>
		<description></description>
		<content:encoded><![CDATA[api,上传头像,https,注册，登陆都支持
的twitter代理 就在 <a href=" http://proxy.00rz.com">http://proxy.00rz.com</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>180</wp:post_id>
		<wp:post_date><![CDATA[2010-03-05 20:33:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-03-05 12:33:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[twitter-%e4%bb%a3%e7%90%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641117]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Twitter 更新 for 2010-03-07</title>
		<link>http://blog.00rz.com/2010/03/twitter-%e6%9b%b4%e6%96%b0-for-2010-03-07.html</link>
		<pubDate>Sun, 07 Mar 2010 08:20:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/2010/03/twitter-%e6%9b%b4%e6%96%b0-for-2010-03-07.html</guid>
		<description></description>
		<content:encoded><![CDATA[<ul class="aktt_tweet_digest">
	<li><a href="http://proxy.00rz.com/" rel="nofollow">http://proxy.00rz.com/</a> <a href="http://twitter.com/zhangjiayin/statuses/9828509287" class="aktt_tweet_time">#</a></li>
</ul>
<p class="aktt_credit">Powered by <a href="http://alexking.org/projects/wordpress">Twitter Tools</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>183</wp:post_id>
		<wp:post_date><![CDATA[2010-03-07 16:20:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-03-07 08:20:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[twitter-%e6%9b%b4%e6%96%b0-for-2010-03-07]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="twtteen"><![CDATA[twtteen]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641122]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>关于 memcache</title>
		<link>http://blog.00rz.com/2010/03/%e5%85%b3%e4%ba%8e-memcache.html</link>
		<pubDate>Tue, 09 Mar 2010 21:45:57 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/2010/03/%e5%85%b3%e4%ba%8e-memcache.html</guid>
		<description></description>
		<content:encoded><![CDATA[pid memcache服务器的进程ID
uptime 服务器已经运行的秒数
time 服务器当前的unix时间戳
version memcache版本
pointer_size 当前操作系统的指针大小（32位系统一般是32bit）
rusage_user 进程的累计用户时间
rusage_system 进程的累计系统时间
curr_items 服务器当前存储的items数量
total_items 从服务器启动以后存储的items总数量
bytes 当前服务器存储items占用的字节数
curr_connections 当前打开着的连接数
total_connections 从服务器启动以后曾经打开过的连接数
connection_structures 服务器分配的连接构造数
cmd_get get命令（获取）总请求次数
cmd_set set命令（保存）总请求次数
get_hits 总命中次数
get_misses 总未命中次数
evictions 为获取空闲内存而删除的items数（分配给memcache的空间用满后需要删除旧的items来得到空间分配给新的items）
bytes_read 总读取字节数（请求字节数）
bytes_written 总发送字节数（结果字节数）
limit_maxbytes 分配给memcache的内存大小（字节）
threads 当前线程数

<a href="http://code.sixapart.com/svn/memcached/trunk/server/scripts/memcached-tool">工具脚本</a><a href="http://code.sixapart.com/svn/memcached/trunk/server/scripts/memcached-tool">
http://code.sixapart.com/svn/memcached/trunk/server/scripts/memcached-tool</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>184</wp:post_id>
		<wp:post_date><![CDATA[2010-03-10 05:45:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-03-09 21:45:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%85%b3%e4%ba%8e-memcache]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_08148b5d8bc334bae5a053121821fc0a]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_98a467af5db3797d03aadc821ee6f991]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641123]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_5dbeb8b5b69141bb7be201d1ffd1341c]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>ubuntu9.10 小键盘不能用了</title>
		<link>http://blog.00rz.com/2010/03/ubuntu9-10-%e5%b0%8f%e9%94%ae%e7%9b%98%e4%b8%8d%e8%83%bd%e7%94%a8%e4%ba%86.html</link>
		<pubDate>Wed, 10 Mar 2010 05:53:48 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/?p=188</guid>
		<description></description>
		<content:encoded><![CDATA[天天更新 ubuntu  突然有一天小键盘不能用了 google了一下 发现下面的文章 正好用。

http://blog.donews.com/jiji262/archive/2009/10/02/1564198.aspx

问题：

小键盘区，num lock有反应。enter有反应，其他的，
按小键盘数字键，不能输入数字，而是操作鼠标的方向，像是游戏里八维的方向键？
不记得从什么时候才变成这样的？怎么改过来？

方法1：
终端输入
gksudo gedit /etc/console-tools/remap

把
#s/keycode 58 = Caps_Lock/keycode 58 = Control/;
改为
s/keycode 58 = Caps_Lock/keycode 58 = Control/;

保存修改的文件
sudo /etc/init.d/console-screen.sh
重新启动即可。

方法2：
按下 shift + alt 和 NumLock 就好了

<a href="http://blog.donews.com/jiji262/archive/2009/10/02/1564198.aspx"></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>188</wp:post_id>
		<wp:post_date><![CDATA[2010-03-10 13:53:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-03-10 05:53:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[ubuntu9-10-%e5%b0%8f%e9%94%ae%e7%9b%98%e4%b8%8d%e8%83%bd%e7%94%a8%e4%ba%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="ubuntu"><![CDATA[ubuntu]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_e54034fbef8c2c604ea9d2a5eb782e89]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_f182897ef4d665f9ea61c67bdea6c09b]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641124]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_c97cf0e3ff8b8def727bd30464f46db5]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_520c6e27f651039f9a6194c40f99204a]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>hadoop 小文件的问题-The Small Files Problem</title>
		<link>http://blog.00rz.com/2010/03/hadoop-%e5%b0%8f%e6%96%87%e4%bb%b6%e7%9a%84%e9%97%ae%e9%a2%98-the-small-files-problem.html</link>
		<pubDate>Sun, 14 Mar 2010 15:30:58 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/?p=190</guid>
		<description></description>
		<content:encoded><![CDATA[<h1><a href="http://www.cloudera.com/blog/2009/02/the-small-files-problem/">http://www.cloudera.com/blog/2009/02/the-small-files-problem/</a></h1>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>190</wp:post_id>
		<wp:post_date><![CDATA[2010-03-14 23:30:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-03-14 15:30:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hadoop-%e5%b0%8f%e6%96%87%e4%bb%b6%e7%9a%84%e9%97%ae%e9%a2%98-the-small-files-problem]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="hadoop"><![CDATA[hadoop]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4565943761]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>diffrient  stdout and stderr redirect between csh &amp; bash </title>
		<link>http://blog.00rz.com/2010/03/diffrient-stdout-and-stderr-redirect-between-csh-bash.html</link>
		<pubDate>Mon, 15 Mar 2010 11:41:02 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/2010/03/diffrient-stdout-and-stderr-redirect-between-csh-bash.html</guid>
		<description></description>
		<content:encoded><![CDATA[csh : (ls *.txt > list.html ) >& list.stderr
bash: ls *.txt > list.html  2>&1]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>193</wp:post_id>
		<wp:post_date><![CDATA[2010-03-15 19:41:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-03-15 11:41:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[diffrient-stdout-and-stderr-redirect-between-csh-bash]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641129]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>opencv guide</title>
		<link>http://blog.00rz.com/2010/03/opencv-guide.html</link>
		<pubDate>Tue, 16 Mar 2010 10:49:17 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/?p=194</guid>
		<description></description>
		<content:encoded><![CDATA[http://cgi.cse.unsw.edu.au/~cs4411/wiki/index.php?title=OpenCV_Guide#Finding_bounding_boxes_around_regions_of_a_binary_image]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>194</wp:post_id>
		<wp:post_date><![CDATA[2010-03-16 18:49:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-03-16 10:49:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[opencv-guide]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="opencv"><![CDATA[opencv]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_134867afc6c435aca21e2c04090642cd]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_589e9cbfdbd5c778abeca4fd7e4a6fda]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_53a0080533239e11422b5cb94f0a2ca3]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[7578622903]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_3d59dd18ef8ebed54424e64cd9294fa6]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Twitter 更新 for 2010-03-28</title>
		<link>http://blog.00rz.com/2010/03/twitter-%e6%9b%b4%e6%96%b0-for-2010-03-28.html</link>
		<pubDate>Sun, 28 Mar 2010 08:20:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/2010/03/twitter-%e6%9b%b4%e6%96%b0-for-2010-03-28.html</guid>
		<description></description>
		<content:encoded><![CDATA[<ul class="aktt_tweet_digest">
	<li>蛋定，一定要蛋定。 <a href="http://twitter.com/zhangjiayin/statuses/11179102124" class="aktt_tweet_time">#</a></li>
</ul>
<p class="aktt_credit">Powered by <a href="http://alexking.org/projects/wordpress">Twitter Tools</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>199</wp:post_id>
		<wp:post_date><![CDATA[2010-03-28 16:20:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-03-28 08:20:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[twitter-%e6%9b%b4%e6%96%b0-for-2010-03-28]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="twtteen"><![CDATA[twtteen]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641131]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Man Page的Section</title>
		<link>http://blog.00rz.com/2010/04/man-page%e7%9a%84section.html</link>
		<pubDate>Sat, 03 Apr 2010 18:15:23 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/2010/04/man-page%e7%9a%84section.html</guid>
		<description></description>
		<content:encoded><![CDATA[Section	描述
1	用户命令，例如ls(1)
2	系统调用，例如_exit(2)
3	库函数，例如printf(3)
4	特殊文件，例如null(4)描述了设备文件/dev/null、/dev/zero的作用
5	系统配置文件的格式，例如passwd(5)描述了系统配置文件/etc/passwd的格式
6	游戏
7	其它杂项，例如bash-builtins(7)描述了bash的各种内建命令
8	系统管理命令，例如ifconfig(8)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>203</wp:post_id>
		<wp:post_date><![CDATA[2010-04-04 02:15:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-04-03 18:15:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[man-page%e7%9a%84section]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[7578625323]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>关于堆栈</title>
		<link>http://blog.00rz.com/2010/04/%e5%85%b3%e4%ba%8e%e5%a0%86%e6%a0%88.html</link>
		<pubDate>Sun, 04 Apr 2010 04:33:31 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/?p=204</guid>
		<description></description>
		<content:encoded><![CDATA[一个进程的内存空间可以在逻辑上分成3个部份：代码区，静态数据区和动态数据区，静态数据区和动态数据区。动态数据区一般就是“堆栈”。“栈 (stack)”和“堆(heap)”是两种不同的动态数据区，栈是一种线性结构，堆是一种链式结构。进程的每个线程都有私有的“栈”，所以每个线程虽然 代码一样，但本地变量的数据都是互不干扰。一个堆栈可以通过“基地址”和“栈顶”地址来描述。全局变量和静态变量分配在静态数据区，本地变量分配在动态数 据区，即堆栈中。程序通过堆栈的基地址和偏移量来访问本地变量。

通常栈的空间较小不能再栈上分配很大的内存空间（栈只有1-2MB的大小），而堆可以在内存允许的情况下分配大内存空间

栈区（stack）— 由编译器自动分配释放 ，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。
堆区（heap） — 一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回收 。注意它与数据结构中的堆是两回事]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>204</wp:post_id>
		<wp:post_date><![CDATA[2010-04-04 12:33:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-04-04 04:33:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%85%b3%e4%ba%8e%e5%a0%86%e6%a0%88]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="c%e8%af%ad%e8%a8%80%e5%ad%a6%e4%b9%a0"><![CDATA[c语言学习]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641136]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>C/C++堆、栈及静态数据区</title>
		<link>http://blog.00rz.com/2010/04/cc%e5%a0%86%e3%80%81%e6%a0%88%e5%8f%8a%e9%9d%99%e6%80%81%e6%95%b0%e6%8d%ae%e5%8c%ba.html</link>
		<pubDate>Sun, 04 Apr 2010 04:39:27 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/2010/04/cc%e5%a0%86%e3%80%81%e6%a0%88%e5%8f%8a%e9%9d%99%e6%80%81%e6%95%b0%e6%8d%ae%e5%8c%ba.html</guid>
		<description></description>
		<content:encoded><![CDATA[<span style="font-size: x-small;">引自<a href="http://www.cnw168.cn/china/zxjx/rjbc/c/20080114142636.htm" target="_blank">http://www.cnw168.cn/china/zxjx/rjbc/c/20080114142636.htm</a></span>

<span style="font-size: x-small;">五大内存分区
在C++中，内存分成5个区，他们分别是堆、栈、自由存储区、全局/静态存储区和常量存储区。
栈，就是那些由编译器在需要的时候分配，在不需要的时候自动清除的变量的存储区。里面的变量通常是局部变量、函数参数等。
堆，就是那些由new分配的内存块，他们的释放编译器不去管，由我们的应用程序去控制，一般一个new就要对应一个delete。如果程序员没有释放掉，那么在程序结束后，操作系统会自动回收。
自由存储区，就是那些由malloc等分配的内存块，他和堆是十分相似的，不过它是用free来结束自己的生命的。
全局/静态存储区，全局变量和静态变量被分配到同一块内存中，在以前的C语言中，全局变量又分为初始化的和未初始化的，在C++里面没有这个区分了，他们共同占用同一块内存区。
常量存储区，这是一块比较特殊的存储区，他们里面存放的是常量，不允许修改（当然，你要通过非正当手段也可以修改，而且方法很多）
明确区分堆与栈
在bbs上，堆与栈的区分问题，似乎是一个永恒的话题，由此可见，初学者对此往往是混淆不清的，所以我决定拿他第一个开刀。
首先，我们举一个例子：
void f() { int* p=new int[5]; }
这条短短的一句话就包含了堆与栈，看到new，我们首先就应该想到，我们分配了一块堆内存，那么指针p呢？他分配的是一块栈内存，所以这句话的意思就是： 在栈内存中存放了一个指向一块堆内存的指针p。在程序会先确定在堆中分配内存的大小，然后调用operator new分配内存，然后返回这块内存的首地址，放入栈中，他在VC6下的汇编代码如下：
00401028push14h
0040102Acalloperator new (00401060)
0040102Faddesp,4
00401032movdword ptr [ebp-8],eax
00401035moveax,dword ptr [ebp-8]
00401038movdword ptr [ebp-4],eax
这里，我们为了简单并没有释放内存，那么该怎么去释放呢？是delete p么？澳，错了，应该是delete []p，这是为了告诉编译器：我删除的是一个数组，VC6就会根据相应的Cookie信息去进行释放内存的工作。
好了，我们回到我们的主题：堆和栈究竟有什么区别？
主要的区别由以下几点：
1 、管理方式不同；
2 、空间大小不同；
3 、能否产生碎片不同；
4 、生长方向不同；
5 、分配方式不同；
6 、分配效率不同；
管理方式：对于栈来讲，是由编译器自动管理，无需我们手工控制；对于堆来说，释放工作由程序员控制，容易产生memory leak。
空间大小：一般来讲在32位系统下，堆内存可以达到4G的空间，从这个角度来看堆内存几乎是没有什么限制的。但是对于栈来讲，一般都是有一定的空间大小的，例如，在VC6下面，默认的栈空间大小是1M（好像是，记不清楚了）。当然，我们可以修改：
打开工程，依次操作菜单如下：Project-&gt;Setting-&gt;Link，在Category 中选中Output，然后在Reserve中设定堆栈的最大值和commit。
注意：reserve最小值为4Byte；commit是保留在虚拟内存的页文件里面，它设置的较大会使栈开辟较大的值，可能增加内存的开销和启动时间。
碎片问题：对于堆来讲，频繁的new/delete势必会造成内存空间的不连续，从而造成大量的碎片，使程序效率降低。对于栈来讲，则不会存在这个问题， 因为栈是先进后出的队列，他们是如此的一一对应，以至于永远都不可能有一个内存块从栈中间弹出，在他弹出之前，在他上面的后进的栈内容已经被弹出，详细的 可以参考数据结构，这里我们就不再一一讨论了。
生长方向：对于堆来讲，生长方向是向上的，也就是向着内存地址增加的方向；对于栈来讲，它的生长方向是向下的，是向着内存地址减小的方向增长。
分配方式：堆都是动态分配的，没有静态分配的堆。栈有2种分配方式：静态分配和动态分配。静态分配是编译器完成的，比如局部变量的分配。动态分配由alloca函数进行分配，但是栈的动态分配和堆是不同的，他的动态分配是由编译器进行释放，无需我们手工实现。
分配效率：栈是机器系统提供的数据结构，计算机会在底层对栈提供支持：分配专门的寄存器存放栈的地址，压栈出栈都有专门的指令执行，这就决定了栈的效率比 较高。堆则是C/C++函数库提供的，它的机制是很复杂的，例如为了分配一块内存，库函数会按照一定的算法（具体的算法可以参考数据结构/操作系统）在堆 内存中搜索可用的足够大小的空间，如果没有足够大小的空间（可能是由于内存碎片太多），就有可能调用系统功能去增加程序数据段的内存空间，这样就有机会分 到足够大小的内存，然后进行返回。显然，堆的效率比栈要低得多。
从这里我们可以看到，堆和栈相比，由于大量new/delete的使用，容易造成大量的内存碎片；由于没有专门的系统支持，效率很低；由于可能引发用户态 和核心态的切换，内存的申请，代价变得更加昂贵。所以栈在程序中是应用最广泛的，就算是函数的调用也利用栈去完成，函数调用过程中的参数，返回地 址，EBP和局部变量都采用栈的方式存放。所以，我们推荐大家尽量用栈，而不是用堆。
虽然栈有如此众多的好处，但是由于和堆相比不是那么灵活，有时候分配大量的内存空间，还是用堆好一些。
无论是堆还是栈，都要防止越界现象的发生（除非你是故意使其越界），因为越界的结果要么是程序崩溃，要么是摧毁程序的堆、栈结构，产生以想不到的结果,就算是在你的程序运行过程中，没有发生上面的问题，你还是要小心，说不定什么时候就崩掉，那时候debug可是相当困难的</span>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>207</wp:post_id>
		<wp:post_date><![CDATA[2010-04-04 12:39:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-04-04 04:39:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[cc%e5%a0%86%e3%80%81%e6%a0%88%e5%8f%8a%e9%9d%99%e6%80%81%e6%95%b0%e6%8d%ae%e5%8c%ba]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="c%e8%af%ad%e8%a8%80%e5%ad%a6%e4%b9%a0"><![CDATA[c语言学习]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641135]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>struct 字节对齐</title>
		<link>http://blog.00rz.com/2010/04/struct-%e5%ad%97%e8%8a%82%e5%af%b9%e9%bd%90.html</link>
		<pubDate>Tue, 06 Apr 2010 14:29:12 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/2010/04/struct-%e5%ad%97%e8%8a%82%e5%af%b9%e9%bd%90.html</guid>
		<description></description>
		<content:encoded><![CDATA[<pre>struct {
	char a;
	short b;
	int c;
	char d;
} __attribute__((packed)) s</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>210</wp:post_id>
		<wp:post_date><![CDATA[2010-04-06 22:29:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-04-06 14:29:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[struct-%e5%ad%97%e8%8a%82%e5%af%b9%e9%bd%90]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="c%e8%af%ad%e8%a8%80%e5%ad%a6%e4%b9%a0"><![CDATA[c语言学习]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641140]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>追踪google adsense点击</title>
		<link>http://blog.00rz.com/2010/04/%e8%bf%bd%e8%b8%aagoogle-adsense%e7%82%b9%e5%87%bb.html</link>
		<pubDate>Thu, 15 Apr 2010 10:17:22 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/?p=211</guid>
		<description></description>
		<content:encoded><![CDATA[看openx 咋干的  https://developer.openx.org/jira/browse/OX-1844]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>211</wp:post_id>
		<wp:post_date><![CDATA[2010-04-15 18:17:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-04-15 10:17:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%bf%bd%e8%b8%aagoogle-adsense%e7%82%b9%e5%87%bb]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[javascript]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641143]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>pragmatic bookshelf practices of an agile developer working in the real world (高效程序员的45个习惯)</title>
		<link>http://blog.00rz.com/2010/04/pragmatic-bookshelf-practices-of-an-agile-developer-working-in-the-real-world-%e9%ab%98%e6%95%88%e7%a8%8b%e5%ba%8f%e5%91%98%e7%9a%8445%e4%b8%aa%e4%b9%a0%e6%83%af.html</link>
		<pubDate>Mon, 19 Apr 2010 01:07:07 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/?p=213</guid>
		<description></description>
		<content:encoded><![CDATA[<a rel="attachment wp-att-214" href="http://blog.00rz.com/2010/04/pragmatic-bookshelf-practices-of-an-agile-developer-working-in-the-real-world-%e9%ab%98%e6%95%88%e7%a8%8b%e5%ba%8f%e5%91%98%e7%9a%8445%e4%b8%aa%e4%b9%a0%e6%83%af.html/pragmatic1-bookshelf-practices-of-an-agile-developer-working-in-the-real-world-mar-2006">Pragmatic[1].Bookshelf.Practices.of.an.Agile.Developer.Working.in.the.Real.World.Mar.2006</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>213</wp:post_id>
		<wp:post_date><![CDATA[2010-04-19 09:07:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-04-19 01:07:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[pragmatic-bookshelf-practices-of-an-agile-developer-working-in-the-real-world-%e9%ab%98%e6%95%88%e7%a8%8b%e5%ba%8f%e5%91%98%e7%9a%8445%e4%b8%aa%e4%b9%a0%e6%83%af]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e5%bc%80%e5%8f%91"><![CDATA[开发]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641147]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>了解 epoll 之 python</title>
		<link>http://blog.00rz.com/2010/04/%e4%ba%86%e8%a7%a3-epoll-%e4%b9%8b-python.html</link>
		<pubDate>Fri, 30 Apr 2010 15:46:34 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/?p=217</guid>
		<description></description>
		<content:encoded><![CDATA[http://scotdoyle.com/python-epoll-howto.html]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>217</wp:post_id>
		<wp:post_date><![CDATA[2010-04-30 23:46:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-04-30 15:46:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%ba%86%e8%a7%a3-epoll-%e4%b9%8b-python]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python"><![CDATA[python]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_002f9216c3809d3eafedb4220a9938de]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_352701ed8f7441f5fa035f4c79d6e3a6]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_770b6cb313cfd99eb854c1ff93200caf]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641148]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_53c0de8c81c16706c3c3c3e5ca3e47a8]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>python epoll demo</title>
		<link>http://blog.00rz.com/2010/05/python-epoll-demo.html</link>
		<pubDate>Sat, 01 May 2010 06:03:41 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/2010/05/python-epoll-demo.html</guid>
		<description></description>
		<content:encoded><![CDATA[from http://www.codexon.com/posts/debunking-the-erlang-and-haskell-hype-for-servers
epoll.py
<pre lang="python">
import select
import socket

EPOLLIN = select.EPOLLIN
EPOLLOUT = select.EPOLLOUT

epoll = select.epoll(60000)
connections = {}

class Server(object):
    def __init__(self):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        sock.setblocking(0)
        sock.bind(('', 8050))
        sock.listen(60000)
        self.socket = sock

        fileno = sock.fileno()
        connections[fileno] = self
        epoll.register(fileno, EPOLLIN)

    def onInput(self):
        sock, address = self.socket.accept()
        Client(sock)

class Client(object):
    input  = ''
    output = "HTTP/1.0 200 OK\r\nContent-Length: 5\r\n\r\nPong!\r\n"

    def __init__(self, sock):
        sock.setblocking(0)
        fileno = sock.fileno()
        epoll.register(fileno, EPOLLIN|EPOLLOUT)
        connections[fileno] = self
        self.socket = sock

    def onInput(self):
        newdata = self.socket.recv(1024)
        if len(newdata) is 0:
            self.close()
        self.input += newdata

    def onOutput(self):
        sent = self.socket.send(self.output)
        self.output = self.output[sent:]
        if len(self.output) is 0:
            self.close()

    def close(self):
        fileno = self.socket.fileno()
        del connections[fileno]
        epoll.unregister(fileno)
        self.socket.close()

Server()

while 1:
    for fd, event in epoll.poll():
        if event & EPOLLIN:
            connections[fd].onInput()

        if event & EPOLLOUT:
            connections[fd].onOutput()

</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>221</wp:post_id>
		<wp:post_date><![CDATA[2010-05-01 14:03:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-05-01 06:03:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[python-epoll-demo]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python"><![CDATA[python]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641149]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>the.Definitive.Guide.to.Pylons.Dec.2008.pdf</title>
		<link>http://blog.00rz.com/2010/05/the-definitive-guide-to-pylons-dec-2008-pdf.html</link>
		<pubDate>Tue, 11 May 2010 16:35:02 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/?p=227</guid>
		<description></description>
		<content:encoded><![CDATA[<a href='http://blog.00rz.com/wp-content/uploads/2010/05/Apress.the_.Definitive.Guide_.to_.Pylons.Dec.2008.pdf'>Apress.the.Definitive.Guide.to.Pylons.Dec.2008</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>227</wp:post_id>
		<wp:post_date><![CDATA[2010-05-12 00:35:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-05-11 16:35:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[the-definitive-guide-to-pylons-dec-2008-pdf]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python"><![CDATA[python]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641150]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>python datamodel 貌似这页应该好好看下</title>
		<link>http://blog.00rz.com/2010/05/python-datamodel-%e8%b2%8c%e4%bc%bc%e8%bf%99%e9%a1%b5%e5%ba%94%e8%af%a5%e5%a5%bd%e5%a5%bd%e7%9c%8b%e4%b8%8b.html</link>
		<pubDate>Thu, 13 May 2010 15:19:37 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/?p=232</guid>
		<description></description>
		<content:encoded><![CDATA[http://docs.python.org/reference/datamodel.html]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>232</wp:post_id>
		<wp:post_date><![CDATA[2010-05-13 23:19:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-05-13 15:19:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[python-datamodel-%e8%b2%8c%e4%bc%bc%e8%bf%99%e9%a1%b5%e5%ba%94%e8%af%a5%e5%a5%bd%e5%a5%bd%e7%9c%8b%e4%b8%8b]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_69a733e27ef37d5dac90da5968902f0a]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_fc8fb3f40c05a279ff84460bc8547ed2]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_e4a54241e42b031622d71302c26bffac]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_e80cfd4f65df0ebd88a21dd599db5d56]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>pylons 部署 + fastcgi</title>
		<link>http://blog.00rz.com/2010/05/pylons-%e9%83%a8%e7%bd%b2-fastcgi.html</link>
		<pubDate>Fri, 14 May 2010 08:54:47 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/?p=234</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.rightbrainnetworks.com/blog/deploying-a-pylons-app-to-production-step-by-step-part-2-of-2/comment-page-1/#comment-27">http://www.rightbrainnetworks.com/blog/deploying-a-pylons-app-to-production-step-by-step-part-2-of-2/comment-page-1/#comment-27</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>234</wp:post_id>
		<wp:post_date><![CDATA[2010-05-14 16:54:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-05-14 08:54:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[pylons-%e9%83%a8%e7%bd%b2-fastcgi]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641155]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>git手册</title>
		<link>http://blog.00rz.com/2010/05/git%e6%89%8b%e5%86%8c.html</link>
		<pubDate>Sat, 15 May 2010 03:41:16 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/?p=237</guid>
		<description></description>
		<content:encoded><![CDATA[http://progit.org/book/zh/]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>237</wp:post_id>
		<wp:post_date><![CDATA[2010-05-15 11:41:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-05-15 03:41:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[git%e6%89%8b%e5%86%8c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_c29c30e0dcf4f13868ff760620f5bb68]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_473ebc21244caf5f0019d97b8098a9b0]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_2ed49f74d724996e7b0013d7f5269c2d]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_719c768b3d2d8e2ebb482290e015c690]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641159]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_4e3ec7ff00b86b4b2af93d02470ca039]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>High.Performance.MySQL2nd.Edition</title>
		<link>http://blog.00rz.com/2010/06/244.html</link>
		<pubDate>Thu, 03 Jun 2010 08:46:44 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/?p=244</guid>
		<description></description>
		<content:encoded><![CDATA[<a href='http://blog.00rz.com/wp-content/uploads/2010/06/OReilly.High.Performance.MySQL2nd.Edition.pdf.tar.g'>O'Reilly.High.Performance.MySQL,2nd.Edition</a>
<a href='http://blog.00rz.com/wp-content/uploads/2010/06/OReilly.High.Performance.MySQL2nd.Edition-chinese.pdf.tar.g'>O'Reilly.High.Performance.MySQL,2nd.Edition中文版</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>244</wp:post_id>
		<wp:post_date><![CDATA[2010-06-03 16:46:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-06-03 08:46:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[244]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e7%94%b5%e5%ad%90%e4%b9%a6"><![CDATA[电子书]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641158]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Twitter 更新 for 2010-07-25</title>
		<link>http://blog.00rz.com/2010/07/twitter-%e6%9b%b4%e6%96%b0-for-2010-07-25.html</link>
		<pubDate>Sun, 25 Jul 2010 08:20:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/2010/07/twitter-%e6%9b%b4%e6%96%b0-for-2010-07-25.html</guid>
		<description></description>
		<content:encoded><![CDATA[<ul class="aktt_tweet_digest">
	<li>firefox + foxyproxy + ssh 比vpn 好用多了 <a href="http://twitter.com/zhangjiayin/statuses/19300009185" class="aktt_tweet_time">#</a></li>
</ul>
<p class="aktt_credit">Powered by <a href="http://alexking.org/projects/wordpress">Twitter Tools</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>250</wp:post_id>
		<wp:post_date><![CDATA[2010-07-25 16:20:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-07-25 08:20:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[twitter-%e6%9b%b4%e6%96%b0-for-2010-07-25]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="twtteen"><![CDATA[twtteen]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641163]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Twitter 更新 for 2010-07-25</title>
		<link>http://blog.00rz.com/2010/07/twitter-%e6%9b%b4%e6%96%b0-for-2010-07-25-2.html</link>
		<pubDate>Sun, 25 Jul 2010 08:20:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/2010/07/twitter-%e6%9b%b4%e6%96%b0-for-2010-07-25-2.html</guid>
		<description></description>
		<content:encoded><![CDATA[<ul class="aktt_tweet_digest">
	<li>firefox + foxyproxy + ssh 比vpn 好用多了 <a href="http://twitter.com/zhangjiayin/statuses/19300009185" class="aktt_tweet_time">#</a></li>
</ul>
<p class="aktt_credit">Powered by <a href="http://alexking.org/projects/wordpress">Twitter Tools</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>251</wp:post_id>
		<wp:post_date><![CDATA[2010-07-25 16:20:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-07-25 08:20:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[twitter-%e6%9b%b4%e6%96%b0-for-2010-07-25-2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="twtteen"><![CDATA[twtteen]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_tweeted]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641160]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>关于 ubuntu 下 eclipse  代码编辑区域 在代码 补全 后不能编辑 的笔记</title>
		<link>http://blog.00rz.com/2010/08/%e5%85%b3%e4%ba%8e-ubuntu-%e4%b8%8b-eclipse-%e4%bb%a3%e7%a0%81%e7%bc%96%e8%be%91%e5%8c%ba%e5%9f%9f-%e5%9c%a8%e4%bb%a3%e7%a0%81-%e8%a1%a5%e5%85%a8-%e5%90%8e%e4%b8%8d%e8%83%bd%e7%bc%96%e8%be%91.html</link>
		<pubDate>Wed, 25 Aug 2010 04:25:24 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/?p=254</guid>
		<description></description>
		<content:encoded><![CDATA[以前没有发现这个问题， 今天下了一个eclipse3.6 装了之后，发现编辑代码时，补全之后 编辑器貌似还在获得焦点，
但是不能type 字符，很奇怪，
google 了一下，没有找到，解决方案，
这次baidu很出息，找到是scim问题， 据说还是一个老问题， 

修改
/etc/X11/xinit/xinput.d/scim 
将原来的
GTK_IM_MODULE=xim
QT_IM_MODULE=xim
改成
GTK_IM_MODULE=scim
QT_IM_MODULE=scim

之前在切换 terminal 的之后， 开始的时候键盘反应慢的问题也解决了。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>254</wp:post_id>
		<wp:post_date><![CDATA[2010-08-25 12:25:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-08-25 04:25:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%85%b3%e4%ba%8e-ubuntu-%e4%b8%8b-eclipse-%e4%bb%a3%e7%a0%81%e7%bc%96%e8%be%91%e5%8c%ba%e5%9f%9f-%e5%9c%a8%e4%bb%a3%e7%a0%81-%e8%a1%a5%e5%85%a8-%e5%90%8e%e4%b8%8d%e8%83%bd%e7%bc%96%e8%be%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641170]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>php extension 声明类属性</title>
		<link>http://blog.00rz.com/2010/09/php-extension-delcare-class-array-property.html</link>
		<pubDate>Wed, 22 Sep 2010 09:18:48 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/?p=256</guid>
		<description></description>
		<content:encoded><![CDATA[在弄一个php扩展， 想把 扩展写成类的 形式， 于是在声明的时候 想给类加个array 属性
于是expect 代码是这样的
<pre lang="c">
PHP_MINIT_FUNCTION(concurrency)
{
	zend_class_entry ce;
	INIT_CLASS_ENTRY(ce, PHP_CONCURRENCY_CLASSNAME, concurrency_class_methods);
	concurrency_class_entry = zend_register_internal_class(&amp;ce TSRMLS_CC);

	zval *requests;

	MAKE_STD_ZVAL(requests);

	array_init(requests);

	zend_printf("%d", requests->type);
	zend_declare_property(concurrency_class_entry, "requests", strlen("requests"), requests, ZEND_ACC_PUBLIC);

	return SUCCESS;
}
</pre>
结果报错，
PHP Fatal error:  Internal zval's can't be arrays, objects or resources in Unknown on line 0
把requests->type 用zend_printf打出来发现 结果是4 是 ZEND定义的IS_ARRAY,
继续翻代码
发现在Zend/zend_API.c 里面zend_declare_property的原型 有这样的定义

<pre lang="c">
	if (ce->type & ZEND_INTERNAL_CLASS) {
		switch(Z_TYPE_P(property)) {
			case IS_ARRAY:
			case IS_CONSTANT_ARRAY:
			case IS_OBJECT:
			case IS_RESOURCE:
				zend_error(E_CORE_ERROR, "Internal zval's can't be arrays, objects or resources");
				break;
			default:
				break;
		}
	}
</pre>
不知何意看
staceflow 上也有人遇到这种问题
http://stackoverflow.com/posts/1105360/revisions
，没办法，
于是就改成在构造函数里面 增加属性的声明
just as follow

<pre lang="c">
PHP_METHOD(Concurrency, __construct)
{
	zval *pThis;
	pThis = getThis();
	
	zval *requests;
	MAKE_STD_ZVAL(requests);
	array_init(requests);

	add_property_zval_ex(pThis, "requests", sizeof("requests"), requests);
}
</pre>
在这里记下！]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>256</wp:post_id>
		<wp:post_date><![CDATA[2010-09-22 17:18:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-09-22 09:18:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[php-extension-delcare-class-array-property]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[php]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_23f034028d0894c4e7fb2b1b410c3878]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_ba01aaa4c5bfc35151b35730b16ae611]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_6610642dea1cc7f863f2426bb5fc13cf]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_857399265378324c1ab9d28a56d192a5]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641169]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_8258cbd246f402ba08ef38c224364c36]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_e35391ce1e742b88dbc8b462a6e3ea12]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>http://www.metabrew.com/article/a-million-user-comet-application-with-mochiweb-part-1/</title>
		<link>http://blog.00rz.com/2010/10/httpwww-metabrew-comarticlea-million-user-comet-application-with-mochiweb-part-1.html</link>
		<pubDate>Wed, 06 Oct 2010 14:24:54 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/2010/10/httpwww-metabrew-comarticlea-million-user-comet-application-with-mochiweb-part-1.html</guid>
		<description></description>
		<content:encoded><![CDATA[http://www.metabrew.com/article/a-million-user-comet-application-with-mochiweb-part-1/]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>262</wp:post_id>
		<wp:post_date><![CDATA[2010-10-06 22:24:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-10-06 14:24:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[httpwww-metabrew-comarticlea-million-user-comet-application-with-mochiweb-part-1]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_757498bfefab435dd43560b85ca3e35f]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_a6b333644fd312c71bab71d63f86b1eb]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_f3fadfafa83d8578fc1796bcaf13b0e8]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_68d8992a5bf6cc280fe894c44b86aa1d]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_c78978b08dacabceb8c96880f9a63367]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641181]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_70be96e1d6db8a65ce4cb45aca61847b]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>自增运算php &amp; c</title>
		<link>http://blog.00rz.com/2010/10/%e8%87%aa%e5%a2%9e%e8%bf%90%e7%ae%97php-c.html</link>
		<pubDate>Fri, 15 Oct 2010 08:18:54 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/?p=265</guid>
		<description></description>
		<content:encoded><![CDATA[以前面试的时候老有人问  ++i 和 i++ 的问题， 每每心里都在暗暗想...,
1、这俩东西功能不一样。

2、 写代码的时候多放些注意力在别的地方比在这个地方纠结强。
我总认为， 可读性和扩展性好的代码  比 一堆 又烂又快的代码好。

3、不免俗的研究了一下。

对于C
<pre lang="c">#include "stdio.h"

int main(int argc, char *argv[]) {
    int i = 0;

    int a = 0;
    int b = 0;

    a = i++;
    b=  ++i;

    i++;
    ++i;

    printf("%d",a);
    printf("%d",b);
}</pre>
汇编后
<pre lang="assembler">	.file	"test.c"
	.section	.rodata
.LC0:
	.string	"%d"
	.text
.globl main
	.type	main, @function
main:
	pushl	%ebp
	movl	%esp, %ebp
	andl	$-16, %esp
	subl	$32, %esp
	movl	$0, 28(%esp)
	movl	$0, 24(%esp)
	movl	$0, 20(%esp)
	movl	28(%esp), %eax
	movl	%eax, 24(%esp)
	addl	$1, 28(%esp)
	addl	$1, 28(%esp)
	movl	28(%esp), %eax
	movl	%eax, 20(%esp)
	addl	$1, 28(%esp)
	addl	$1, 28(%esp)
	movl	$.LC0, %eax
	movl	24(%esp), %edx
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	printf
	movl	$.LC0, %eax
	movl	20(%esp), %edx
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	printf
	leave
	ret
	.size	main, .-main
	.ident	"GCC: (Ubuntu/Linaro 4.4.4-14ubuntu5) 4.4.5"
	.section	.note.GNU-stack,"",@progbits</pre>
可以看出没有赋值操作的 自增运算 不管是 ++i 还是i++ 都会被会变成一条相同的汇编（addl	$1, 28(%esp)）
如果有赋值操作的时候 汇编的条数是一样的 只是 几条语句的顺序不一样
所以C中这两种格式区别仅在于生成的值, 所以在仅使用它们的副作用时, 二者 完全一样，
http://c-faq-chn.sourceforge.net/ccfaq/node46.htm

但是 C++同学的表现是不一样的有兴趣的同学google一下，

悲剧 刚才写的一段代码丢了
简单说下php同学吧
有兴趣的通许参阅一下php源码  大概在这个文件里zend_compile.c
stackoverflow上有一些简单的说明:
http://stackoverflow.com/questions/1756015/whats-the-difference-between-i-and-i-in-php

原文有一段
:For further clarification, post-incrementation in PHP has been documented as storing a temporary variable which attributes to this 10% overhead vs. pre-incrementation.

是说 post-incrementation i++ 比pre-incrementation ＋＋i 花费多10% 来存储一个临时变量。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>265</wp:post_id>
		<wp:post_date><![CDATA[2010-10-15 16:18:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-10-15 08:18:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%87%aa%e5%a2%9e%e8%bf%90%e7%ae%97php-c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="c%e8%af%ad%e8%a8%80%e5%ad%a6%e4%b9%a0"><![CDATA[c语言学习]]></category>
		<category domain="category" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[aktt_notify_twitter]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_cd30d0d8eddabe97b2cbd2b758b3b23a]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_6464dd18c25eb4a8a779b4551b3c7bb1]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_07527f338bbff37aa7e6f11ca2bd106d]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_2d52a80036e7ce4dc49a97fb0294d2d7]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_64b53a122f9b9caa5c44a4dae66bc8d9]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_429df044bbe7ab4c01822bd3ac25af36]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_547ad40c6045fa841032d052c45d0452]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_884c74e0cf1b55150f8c1872aa6c406b]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_8434cbb7db163668c595aeeb73d9b587]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_81b737df09f79b5495e9dc624661ba2b]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641183]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_a225f0eb621dd84f8a547e287d3939c0]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_05889c392b92a81a5fda7c0c92c5cac9]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_c56866113ffcc0122a5f2d6d9ba421d5]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_9b4475c08e91b5b422e605081ae0ae39]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>The TIME-WAIT state in TCP and Its Effect on Busy Servers</title>
		<link>http://blog.00rz.com/2011/02/the-time-wait-state-in-tcp-and-its-effect-on-busy-servers.html</link>
		<pubDate>Tue, 15 Feb 2011 10:20:34 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/?p=311</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://blog.00rz.com/wp-content/uploads/2011/02/10.1.1.116.9808.pdf">The TIME-WAIT state in TCP and Its Effect on Busy Servers</a> from  <a href="http://www.isi.edu/touch/pubs/infocomm99/infocomm99-web/">http://www.isi.edu/touch/pubs/infocomm99/infocomm99-web/</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>311</wp:post_id>
		<wp:post_date><![CDATA[2011-02-15 18:20:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-02-15 10:20:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[the-time-wait-state-in-tcp-and-its-effect-on-busy-servers]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641187]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>关于curl multi的bug</title>
		<link>http://blog.00rz.com/2011/07/%e5%85%b3%e4%ba%8ecurl-multi%e7%9a%84bug.html</link>
		<pubDate>Sun, 31 Jul 2011 01:22:26 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/?p=320</guid>
		<description></description>
		<content:encoded><![CDATA[http://curl.haxx.se/mail/lib-2010-06/0030.html
http://sourceforge.net/tracker/index.php?func=detail&aid=2501457&group_id=976&atid=100976]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>320</wp:post_id>
		<wp:post_date><![CDATA[2011-07-31 09:22:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-07-31 01:22:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%85%b3%e4%ba%8ecurl-multi%e7%9a%84bug]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_e012e90c689577ed1f7249dba9f93a37]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_1481de384d94e2c338d15504e78c0f19]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_f8590965606b4c988473ef4752408d64]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_b12a80b6643e9294a3b904dcae10ccc5]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_0627b75693f9dc010ed8eaa9e3f706a1]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_26ddf74f437da55a2970c09738dac713]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641186]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_dfa2208c04081f78094812fc9adc4159]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_9eca7fce7dc8cf4a0e846ca31063691b]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>gcc  march参数 cpu相关</title>
		<link>http://blog.00rz.com/2011/12/cpu-%e7%bc%96%e8%af%91%e5%8f%82%e6%95%b0.html</link>
		<pubDate>Wed, 07 Dec 2011 11:11:19 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/?p=324</guid>
		<description></description>
		<content:encoded><![CDATA[<pre lang="c">
CPU	Family	Rec. system gcc	Rec. ports compiler
Intel Atom D525	atom	CPUTYPE=core2 (*)	gcc45 -march=atom
Intel Xeon 3065	core2	CPUTYPE=core2 (*)	gcc45
Intel Xeon E5310	core2	CPUTYPE=core2 (*)	gcc45 -march=core2
Intel Xeon E5405	core2	no CPUTYPE	gcc45 -march=core2
Intel Core i7-920	nehalem	CPUTYPE=nocona	gcc45 -march=nocona
Intel Xeon X3450	nehalem	CPUTYPE=nocona	gcc45 -march=nocona
Intel Xeon E5620	nehalem	CPUTYPE=nocona	gcc45 -march=nocona
AMD Opteron 6128	barcelona	CPUTYPE=opteron-ssse3	gcc45 -march=barcelona
</pre>
http://blog.vx.sk/archives/25-FreeBSD-Compiler-Benchmark-gcc-base-vs-gcc-ports-vs-clang.html]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>324</wp:post_id>
		<wp:post_date><![CDATA[2011-12-07 19:11:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-12-07 11:11:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[cpu-%e7%bc%96%e8%af%91%e5%8f%82%e6%95%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_0862c2707becc212ee930b6009fc55c0]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_e20062bd960b0440fd3562f45970ebc0]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641189]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_5f1f93e6d215bad1becca63aca76c001]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_9f2f6089ba0099e1312d6eaacb0b525b]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>获取正在运行 进程的函数栈</title>
		<link>http://blog.00rz.com/2011/12/%e8%8e%b7%e5%8f%96%e6%ad%a3%e5%9c%a8%e8%bf%90%e8%a1%8c-%e8%bf%9b%e7%a8%8b%e7%9a%84%e5%87%bd%e6%95%b0%e6%a0%88.html</link>
		<pubDate>Wed, 07 Dec 2011 11:31:47 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/?p=335</guid>
		<description></description>
		<content:encoded><![CDATA[1、gdb -p pid 当前进程会挂起
2、pstack -p pid  or  gstack -p pid 
3、gcore [-o filename] pid  然后用gdb调试。

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>335</wp:post_id>
		<wp:post_date><![CDATA[2011-12-07 19:31:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-12-07 11:31:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%8e%b7%e5%8f%96%e6%ad%a3%e5%9c%a8%e8%bf%90%e8%a1%8c-%e8%bf%9b%e7%a8%8b%e7%9a%84%e5%87%bd%e6%95%b0%e6%a0%88]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4543641190]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>mysql innodb copy</title>
		<link>http://blog.00rz.com/2016/03/mysql-innodb-copy.html</link>
		<pubDate>Fri, 04 Mar 2016 07:27:37 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/?p=347</guid>
		<description></description>
		<content:encoded><![CDATA[https://avdeo.com/2015/02/19/moving-innodb-table-between-servers/]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>347</wp:post_id>
		<wp:post_date><![CDATA[2016-03-04 15:27:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-04 07:27:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mysql-innodb-copy]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_027410a5672d30328b50a2e8259e7c6f]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4920182795]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_41560d656b2fca7f1da085afd35b3f2d]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_74951c306c645091bf5c4e7dda4b29d5]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://avdeo.com/2015/02/19/moving-innodb-table-between-servers/">Moving InnoDB Table Between&nbsp;Servers</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_74951c306c645091bf5c4e7dda4b29d5]]></wp:meta_key>
		<wp:meta_value><![CDATA[1566482488]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>build androd on centos 64bit</title>
		<link>http://blog.00rz.com/2016/03/build-androd-on-centos-64bit.html</link>
		<pubDate>Tue, 08 Mar 2016 15:15:35 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/?p=350</guid>
		<description></description>
		<content:encoded><![CDATA[android sdk i386支持

sudo yum install glibc.i686
sudo yum install libstdc++.i686
sudo yum install ncurses-libs.i686
sudo yum install zlib.i686

android update sdk --no-ui --filter support-v4
更新制定sdk
tools/android update sdk --no-ui
更新sdk
echo y | ./tools/android update sdk --no-ui --all --filter "extra-android-support"
更新 android support]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>350</wp:post_id>
		<wp:post_date><![CDATA[2016-03-08 23:15:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-08 15:15:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[build-androd-on-centos-64bit]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4644811241]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>build ios with jenkins</title>
		<link>http://blog.00rz.com/2016/03/build-ios-with-jenkins.html</link>
		<pubDate>Wed, 09 Mar 2016 05:15:45 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/?p=353</guid>
		<description></description>
		<content:encoded><![CDATA[jenkins xcode 插件

打adhoc包的时候并且由widght的时候 注意
这几个环境变量 
PROVISIONING_PROFILE="xxxx" APP_PROFILE="xxxx"  EXTENSION_PROFILE="xxxx"]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>353</wp:post_id>
		<wp:post_date><![CDATA[2016-03-09 13:15:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-09 05:15:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[build-ios-with-jenkins]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4678290027]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>android 模拟器设置dns</title>
		<link>http://blog.00rz.com/2016/03/android-%e6%a8%a1%e6%8b%9f%e5%99%a8%e8%ae%be%e7%bd%aedns.html</link>
		<pubDate>Wed, 23 Mar 2016 15:02:02 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/?p=355</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://blog.csdn.net/as_314159265/article/details/6956306">http://blog.csdn.net/as_314159265/article/details/6956306</a>

第一步：用系统的命令进入Android开发包的tools目录

cd X:\...\android-sdk-windows\tool

第二布：使用adb的shell，确认系统的各项属性

adb shell

getprop

getprop会列出系统当前的各项属性

第三步：得到模拟器的DNS地址

在结果里可以看到：

[net.dns1]: [10.0.2.3]
[net.dns2]: [10.0.2.4]
[net.dns3]: [10.0.2.5]
[net.dns4]: [10.0.2.6]

第四步：把dns改成我们自己的DNS

setprop net.dns1 192.168.1.1]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>355</wp:post_id>
		<wp:post_date><![CDATA[2016-03-23 23:02:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-23 15:02:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[android-%e6%a8%a1%e6%8b%9f%e5%99%a8%e8%ae%be%e7%bd%aedns]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4686715347]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>mac bind</title>
		<link>http://blog.00rz.com/2016/03/mac-bind.html</link>
		<pubDate>Wed, 23 Mar 2016 15:18:17 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/?p=357</guid>
		<description></description>
		<content:encoded><![CDATA[<pre><span style="font-family: monospace;"><a href="http://stackoverflow.com/questions/19538118/osx-mavericks-bind-no-longer-installed-how-to-get-local-dns-server-working"> http://stackoverflow.com/questions/19538118/osx-mavericks-bind-no-longer-installed-how-to-get-local-dns-server-working</a></span></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>357</wp:post_id>
		<wp:post_date><![CDATA[2016-03-23 23:18:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-23 15:18:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mac-bind]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4899092166]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>cpp复习</title>
		<link>http://blog.00rz.com/2021/01/cpp%e5%a4%8d%e4%b9%a0.html</link>
		<pubDate>Wed, 06 Jan 2021 09:01:41 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/?p=367</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>decltype</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>lockguard</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>smart ptr</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>std::move</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">shared_from_this</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>367</wp:post_id>
		<wp:post_date><![CDATA[2021-01-06 17:01:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-01-06 09:01:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[cpp%e5%a4%8d%e4%b9%a0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>慈不掌兵、义不养财、善不为官、情不立事、仁不从政</title>
		<link>http://blog.00rz.com/2021/11/%e6%85%88%e4%b8%8d%e6%8e%8c%e5%85%b5%e3%80%81%e4%b9%89%e4%b8%8d%e5%85%bb%e8%b4%a2%e3%80%81%e5%96%84%e4%b8%8d%e4%b8%ba%e5%ae%98%e3%80%81%e6%83%85%e4%b8%8d%e7%ab%8b%e4%ba%8b%e3%80%81%e4%bb%81%e4%b8%8d.html</link>
		<pubDate>Wed, 24 Nov 2021 02:03:21 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.00rz.com/?p=378</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><strong>慈不掌兵、义不养财、善不为官、情不立事、仁不从政</strong></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>378</wp:post_id>
		<wp:post_date><![CDATA[2021-11-24 10:03:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-11-24 02:03:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%85%88%e4%b8%8d%e6%8e%8c%e5%85%b5%e3%80%81%e4%b9%89%e4%b8%8d%e5%85%bb%e8%b4%a2%e3%80%81%e5%96%84%e4%b8%8d%e4%b8%ba%e5%ae%98%e3%80%81%e6%83%85%e4%b8%8d%e7%ab%8b%e4%ba%8b%e3%80%81%e4%bb%81%e4%b8%8d]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
				</channel>
</rss>
	
